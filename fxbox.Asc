Set Buffer 80 : Rem                                                 *play
Set Stack 0 : Rem                                                   *position
'                                                                   *draw
MSG: Rem                                                            *zoom 
Data "                         .." : Rem                            *range
Data "  oec8888E          . uW8'" : Rem                             *file
Data " @888888N  uL   ..  `t888             u.     uL   .." : Rem   *edit
Data " 8`*88%  .@88b  @88R 8888   .   ...ue888b  .@88b  @88R" : Rem *mix 
Data " 8b.    '`Y888k/`*P  9888.z88N  888R Y888r'`Y888k/`*P" : Rem  *frame
Data "u8888888>  Y888L     9888  888E 888R I888>   Y888L" : Rem     *volume
Data " 8888R      8888     9888  888E 888R I888>    8888" : Rem     *resample
Data " 8888P      `888N    9888  888E 888R I888>    `888N" : Rem    *filter 
Data " *888>   .u./`888&   9888  888Eu8888cJ888  .u./`888&" : Rem   *distort 
Data " 4888   d888' Y888*'.8888  888' `*888*P'  d888' Y888*'" : Rem *effects 
Data " '888   ` `Y   Y'    `%888*%'     `Y'     ` `Y   Y'" : Rem    *bitwise
Data "  88R                   '`" : Rem                             *convert 
Data "  88>" : Rem                                                  *process
Data "  48" : Rem                                                   *utils 
Data "  '8                 Version 1.13","","" : Rem                *direct 
Data "              © 1991-2025 Marc Williams","" : Rem             *help
'                                                                   *macro 
On Error Proc TR4P : Rem                                            *sys
If Prg State=-1 Then Break Off : Rem                                *mouse
Request Off : Auto View Off : Led Off : Rem                         *choice
'                                                                   *windows 
'********************************************************************buttons** 
'                                                                   *gadgets 
_M1=7 : _M2=17 : _M3=11 : _TB=8 : _OB=17 : _OP=22 : _MR=16 : Rem    *network
_FL=247 : _FR=600 : _XC=8 : _RT=11 : _BU=14 : _FALSE$="0" : Rem     *init
'                                                                   *screen
'********************************************************************menu****
'                                                                   *error 
Dim MENS$(_M1,_M2,_M3),MENG$(_M1,_M2,_M3) : Rem                     *data
Dim MENX(_M1,_M2,_M3),MENFX(_M1,_M2,_M3)
Dim BUTS$(_BU),BUTX(_BU),BUTY(_BU),BUTG$(_BU)
Dim PAULA(7),VOL(4),CHAIN$(_XC),D_START(4),D_LENGTH(4)
Dim OFFSET(4),LEFTOVER(4),ADV#(4),ADVPOS#(4),XP(4),XP2(4)
Dim DEVS$(5),FILES$(_FR),FILEL(_FR),MACROS$(_MR)
Dim FB$(_FL),FPATH$(_FL),SETTING$(_OP)
'
_BG=0 : _PANE=1 : _WHITE=2 : _GRAY=3
_BLACK=4 : _SHADOW=5 : _BRIGHT=6 : _HIGHLIGHT=7
_GREEN=8 : _DARKGREEN=9 : _DARKBLUE=13 : _BROWN=10
_TAN=11 : _RED=12 : _SKYBLUE=14 : _BLUE=15
'
C0L=_PANE : PC0L=C0L
'  
SCR_W=640 : SCR_W#=640.0 : SCR_H=256 : SCR_R=Hires : SCR_D=8
HDR_H=11 : WVE_H=SCR_H-HDR_H-69 : WVE_W=SCR_W-1
POS_T=HDR_H+1
BUT_W=101 : BUT_H=13
RNG_B=WVE_H
WND_Y=HDR_H+WVE_H+1 : WND_H=WND_Y+9
LEV_X=13 : LEV_W=LEV_X+15 : LEV_Y=HDR_H+WVE_H+28
TST_X=SCR_W-210 : TST_W=SCR_W-10
TST_Y=HDR_H+WVE_H+13 : TST_H=HDR_H+WVE_H+20
TST_T=TST_Y+6
GNO_X=SCR_W-30 : GNO_W=SCR_W-14
GNO_Y=WVE_H+35 : GNO_H=WVE_H+41
DCT_Y=100
XD2=SCR_W : PXD2=XD2
OSC_W=SCR_W/2
'
M0DE=1 : B=1 : PB=B : UB=B : TGL=1 : PBANK=5 : UBANK=2 : CBANK=6 : WBANK=7
_SIZE=20480 : FBSIZE=8192 : FREQ=22448
_CHANNEL=1 : _CURRENT=32767 : _STEP=1 : _WHEEL=20 : _DSTEP=-22
'
_LP=True : _LPMIX=True
REXX=False : OCTAMED=False
NETWORK=False
BGREC=False
OSCILLO=False : OSCMODE=1
_DIRECT=False
_DEBUG=False
_PREVIEW=True
'
_DOSVER=40 : _CPU$=" 00"
MATH=True : BSD=True
_SHOW=True : REALTIME=False
_ERASE=False
_AMIHZ=True
PLYING=False : STPPED=True
BGPLYING=False
RNGEPLY=False : DISPPLY=False
RENDERING=False
'
Dim PNTERS(63)
'
Dim ROT#(_RT),ROTX(_RT),ROTY(_RT),ROTX2(_RT),ROTY2(_RT)
ROT#(1)=13.3
Def Fn DIALZONE(_DIAL)=CX>ROTX(_DIAL)-14 and CX<ROTX2(_DIAL) and CY>ROTY(_DIAL)-9 and CY<ROTY2(_DIAL)
'
_SELF=False
MIX=False
VN=60 : VA#=0.6
_DCOFFSETN=0
KDOWN=False
HIGHN=80 : HIGHF=4000
RC#=0.0 : DT#=0.0 : ALPHA#=0.0
Dim HBUF(4)
BANDN=80 : BANDF=4000
Dim BBUF0(4) : Dim BBUF1(4)
LOWN=80 : LOWF=4000
Dim LBUF(4)
RESN=45 : _RF#=0.225 : _RQ#=0.6666674 : _RFB#=1.52688
ROT#(2)=9.6 : ROT#(3)=11.7
Dim RBUF0#(4),RBUF1#(4)
Dim SMOBUF(4)
ALIN=12 : ALIN2=12
TUBEN=96 : TUBEV#=1.04
SATN=120 : SATV#=1.2
FOLDN=4 : FOLDV#=0.015625
PHAN=0
Dim PHBUF#(4)
Dim PHBUF0(4),PHBUF1(4)
_EFFN=0 : _ECHON=0
RVN=20 : RVV#=0.6
Dim RVBUF0(4),RVBUF1(4)
TREMN=82 : TREMN#=2.5625
Dim TBUF(4)
_THRESHOLDN#=50 : ROT#(4)=9.3
_SLOPEN#=50 : ROT#(5)=13.3
_WINDOWN#=1 : ROT#(6)=9.2
_LOOKAHEADN#=3 : ROT#(7)=9.8
_ATTACKN#=0.1 : ROT#(8)=8.8
_RELEASEN#=300 : ROT#(9)=9.9
_ATT#=0.0 : _REL#=0.0
_OFFSET=0 : _RMS=0
_MSB=False
'
T0NEN=0 : T0NEV#=5.0 : T0NEA=98
ROT#(10)=8.5 : ROT#(11)=12.2
'
Dim RANDRSL(255),MM(255)
'
'***************************************************************************** 
'
Gosub _CLIOUT
Gosub _TGLMON
Gosub _INIT
Every 2 Gosub _NOTPLAYING
Goto _MAIN
'
'
'
'***************************************************************************** 
'*play************************************************************************ 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'   ::::::::.   :::      :::.     -:.     ::-.:    
'   `;;```.;;;  ;;;      ;;`;;    ';;.   ;;;;''    
'   `]]nnn]]'   [[[     ,[[ '[[,     '[[,[[['      
'    $$$""      $$'    c$$$cc$$$c      c$$"        
'    888o     o88oo,.__ 888   888,   ,8P"`         
'    YMMMb    """YUMMMM YMM   ""`   mM"            
'
'  
'
_PLAYRANGE:
If RL>1
   STA=RST : FI=P_LENGTH-RFIN
Else 
   Gosub FLSHSCR
   Goto _MAIN
End If 
Gosub _RANGEPXCLEAR
DISPPLY=False
RNGEPLY=True
Goto _PLAY
'
_PLAYDISPLAY:
STA=ST : FI=P_LENGTH-FIN
If STA>0 and FI>0
   If M0DE=2
      STA=STA/2
      FI=FI/2
   Else If M0DE=3
      STA=STA/4
      FI=FI/4
   End If 
End If 
RNGEPLY=False
DISPPLY=True
Goto _PLAY
'
_PLAYALL:
STA=0 : FI=P_LENGTH
DISPPLY=False
RNGEPLY=False
PWC=1
Repeat 
   OFFSET(PWC)=0
   LEFTOVER(PWC)=0
   Inc PWC
Until PWC>4
_PLAY:
BGPLYING=True : STPPED=False
If M0DE=4
   OFFSET(B)=STA
Else 
   OFFSET(1)=STA
End If 
If _TOAST$="" Then _TOAST$="¯"
If Not PLYING
   Gosub _RANGEPXCLEAR
   PLYING=True
   BBUFF=Max(BSIZE,257)
   Sam Loop On 
   _STARTPLAY=True
   Gosub _PLAYING
   If OCTAMED and SETTING$(20)<>_FALSE$
      Exec 'sys:rexxc/rx "address OCTAMED_REXX PL_PLAYBLOCK"'
   End If 
   If NETWORK and BSD
      PKTCOUNT=0
      MSG$="/t_start"+S_NULL$+S_NULL$+S_NULL$+S_NULL$+",iff"+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$
      Gosub SOCK_SENDSTRING
      MSG$="/t_pulse"+S_NULL$+S_NULL$+S_NULL$+S_NULL$+",iff"+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_VALU$
      Loke Varptr(MSG$)+20,PKTCOUNT
   End If 
End If 
C0L=_WHITE
BTXT1$="Stop" : BZN=8 : BX=BUTX(BZN) : BY=BUTY(BZN) : Gosub BUTTON
BTXT1$="Play" : BZN=7 : BX=BUTX(BZN) : BY=BUTY(BZN) : Gosub BUTTON
Gosub POS_CAL
If STA+FI=0 Then FI=P_LENGTH
'
'***************************************************************************** 
_MAIN:
Gosub GVAL
If M=1
   'Mouse zone does not allow 640 
   If CX=SCR_W and CY>HDR_H and CY<WVE_H+HDR_H
      Z=73
   End If 
   If Z>0
      Gosub BCHOOSE
   End If 
   Gosub DRWDIALS
Else If _CHOICE
   Gosub MCHOOSE
Else If C>0
   Gosub KCHOOSE
Else If PZ<>Z
   Gosub ZCHOOSE
End If 
'
'********************
If REXX and Arexx
   MSG$=Upper$(Arexx$(0))
   Arexx Answer 0,"ok"
   Trap Gosub MSG$
   If Errtrap
      _TOAST$="Error:"+MSG$
   Else 
      _TOAST$=MSG$
   End If 
End If 
'********************
'
If Not PLYING
   If Not STPPED
      BGPLYING=False : RNGEPLY=False : DISPPLY=False
      C0L=_PANE
      BZN=8 : BTXT1$=BUTS$(BZN) : BX=BUTX(BZN) : BY=BUTY(BZN) : Gosub BUTTON
      BZN=7 : BTXT1$=BUTS$(BZN) : BX=BUTX(BZN) : BY=BUTY(BZN) : Gosub BUTTON
      Gosub _RANGEPXCLEAR
      Gosub _GNOMEC
      STPPED=True
      Gosub _BGREC
      Gosub _CLEARPLAYBUFFER
   End If 
End If 
Goto _MAIN
'***************************************************************************** 
'
_PLAYING:
If TGL=1
   P_BUF=P_STARTB2 : P_SWP=P_STARTB1 : TGL=2
Else 
   P_BUF=P_STARTB1 : P_SWP=P_STARTB2 : TGL=1
End If 
If SETTING$(22)=_FALSE$ and _STARTPLAY Then Sam Raw PAULA(7),P_BUF,BBUFF,FREQ
If M0DE=4
   If((RNGEPLY and RL<>0) or DISPPLY)
      If B<5
         If OFFSET(B)>FI or OFFSET(B)<STA
            If _LP
               OFFSET(B)=LEFTOVER(B)+STA
               LEFTOVER(B)=0
               _TOAST$="¯"
            Else 
               Goto _STOP
            End If 
         End If 
      End If 
   End If 
   BBUFF=0
   For SBCOUNT=1 To 4
      B_LENGTH=Length(SBCOUNT+7)
      If B_LENGTH>0
         B_START=Start(SBCOUNT+7)
         If OFFSET(SBCOUNT)>=B_LENGTH
            Copy B_START+LEFTOVER(SBCOUNT),B_START+LEFTOVER(SBCOUNT)+BSIZE To P_SWP+BBUFF
            If _LP
               OFFSET(SBCOUNT)=LEFTOVER(SBCOUNT)
               LEFTOVER(SBCOUNT)=0
               _TOAST$="¯"
            Else 
               Goto _STOP
            End If 
         Else 
            If OFFSET(SBCOUNT)+BSIZE>B_LENGTH
               Copy B_START+OFFSET(SBCOUNT),B_START+B_LENGTH To P_SWP+BBUFF
               LEFTOVER(SBCOUNT)=BSIZE-(B_LENGTH-OFFSET(SBCOUNT))
               Copy B_START,B_START+LEFTOVER(SBCOUNT) To P_SWP+BBUFF+(BSIZE-LEFTOVER(SBCOUNT))
            Else 
               Copy B_START+OFFSET(SBCOUNT),B_START+OFFSET(SBCOUNT)+BSIZE To P_SWP+BBUFF
            End If 
         End If 
      End If 
      Add BBUFF,BSIZE
   Next SBCOUNT
Else 
   P_LEFTOVER=P_START+LEFTOVER(1)
   If(OFFSET(1)+BSIZE>FI) : Rem or OFFSET(1)<STA)
      If _LP and P_LENGTH>0
         Copy P_LEFTOVER,P_LEFTOVER+BSIZE To P_SWP
         If M0DE=2 or M0DE=3
            Copy P_LEFTOVER+P_LENGTH,P_LEFTOVER+P_LENGTH+BSIZE To P_SWP+BSIZE
         End If 
         If M0DE=3
            Copy P_LEFTOVER+P_LENGTH+P_LENGTH,P_LEFTOVER+P_LENGTH+P_LENGTH+BSIZE To P_SWP+BSIZE+BSIZE
            Copy P_LEFTOVER+P_LENGTH+P_LENGTH+P_LENGTH,P_LEFTOVER+P_LENGTH+P_LENGTH+P_LENGTH+BSIZE To P_SWP+BSIZE+BSIZE+BSIZE
         End If 
         OFFSET(1)=STA+LEFTOVER(1)
         LEFTOVER(1)=0
         _TOAST$="¯"
      Else 
         Goto _STOP
      End If 
   End If 
   P_OFFSET=P_START+OFFSET(1)
   Copy P_OFFSET,P_OFFSET+BSIZE To P_SWP
   If M0DE=2 or M0DE=3
      Copy P_OFFSET+P_LENGTH,P_OFFSET+BSIZE+P_LENGTH To P_SWP+BSIZE
   End If 
   If M0DE=3
      Copy P_OFFSET+P_LENGTH+P_LENGTH+P_LENGTH,P_OFFSET+BSIZE+P_LENGTH+P_LENGTH+P_LENGTH To P_SWP+BSIZE+BSIZE+BSIZE
      Copy P_OFFSET+P_LENGTH+P_LENGTH,P_OFFSET+BSIZE+P_LENGTH+P_LENGTH To P_SWP+BSIZE+BSIZE
   End If 
End If 
If _STARTPLAY
   If SETTING$(22)<>_FALSE$
      Gosub SOCK_SENDCUP
   End If 
   _STARTPLAY=False
   Every 1 Gosub _PLAYING
   If NETWORK and BSD
      PKTCOUNT=0
      MSG$="/t_start"+S_NULL$+S_NULL$+S_NULL$+S_NULL$+",iff"+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$
      Gosub SOCK_SENDSTRING
      MSG$="/t_pulse"+S_NULL$+S_NULL$+S_NULL$+S_NULL$+",iff"+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_VALU$
      Loke Varptr(MSG$)+20,PKTCOUNT
   End If 
   Return 
End If 
If SETTING$(22)=_FALSE$
   If M0DE=1
      Sam Swap PAULA(7) To P_BUF,BSIZE
   Else If M0DE=2
      Sam Swap PAULA(5) To P_BUF,BSIZE
      Sam Swap PAULA(6) To P_BUF+BSIZE,BSIZE
   Else 
      BBUFF=0 : SBCOUNT=1
      For SBCOUNT=1 To 4
         Sam Swap PAULA(SBCOUNT) To P_BUF+BBUFF,BSIZE
         Add BBUFF,BSIZE
      Next SBCOUNT
   End If 
End If 
If _AMIVER>4
   Gosub _POSITION
End If 
If TGL=1
   Gosub DRW_LEV
Else 
   If _AMIVER<5
      Gosub _POSITION
   End If 
   Gosub _PROBAR
   Gosub _SCROLL
   Gosub LEV_OUT
End If 
If M0DE=4
   For SBCOUNT=1 To 4
      OFFSET(SBCOUNT)=OFFSET(SBCOUNT)+BSIZE
   Next SBCOUNT
Else 
   OFFSET(1)=OFFSET(1)+BSIZE
End If 
If _DEBUG
   If Sam Swapped(0) or Sam Swapped(1) or Sam Swapped(2) or Sam Swapped(3)
      _TOAST$="u" : Rem buffer underrun
   End If 
End If 
'  
'********************
If REALTIME and _PREVIEW
   For SBCOUNT=1 To _XC
      If Not CHAIN$(SBCOUNT)=""
         _CHANNEL=1
         If M0DE=2
            For _CHANNEL=1 To 2
               Gosub CHAIN$(SBCOUNT)
               P_SWP=P_SWP+BSIZE
            Next _CHANNEL
         Else If M0DE=3 or(M0DE=4 and Key Shift)
            For _CHANNEL=1 To 4
               Gosub CHAIN$(SBCOUNT)
               P_SWP=P_SWP+BSIZE
            Next _CHANNEL
         Else 
            If M0DE=4
               P_SWP=P_SWP+(BSIZE*(B-1))
            End If 
            Gosub CHAIN$(SBCOUNT)
         End If 
      End If 
   Next SBCOUNT
End If 
'******************* 
'
If SETTING$(22)<>_FALSE$
   Gosub SOCK_SENDP_BUF
End If 
Gosub _BGREC
Gosub _TOASTWAITER
Every On 
Return 
'
_NOTPLAYING:
Gosub _PROBAR
Gosub _SCROLL
Every On 
Return 
'
_STOP:
Every 2 Gosub _NOTPLAYING
_FULLSTOP:
Sam Loop Off 
If BGPLYING Then Gosub NUDGEPOS
PLYING=False
If OCTAMED and SETTING$(20)<>_FALSE$
   Exec 'sys:rexxc/rx "address OCTAMED_REXX PL_STOP"'
End If 
If NETWORK and BSD
   MSG$="/t_stop"+S_NULL$+","+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$
   For I=1 To 10
      Gosub SOCK_SENDSTRING
   Next I
End If 
Ink _PANE : Gosub DRWLEV
Return 
'
_CLEARPLAYBUFFER:
Fill P_STARTB1 To P_STARTB1+FBSIZE,0
Fill P_STARTB2 To P_STARTB2+FBSIZE,0
Return 
'
_BGREC:
If Not BGREC Then Return 
If BGRECTOTAL=-1
   Inc BGRECTOTAL
   Return 
End If 
BBUFF=0 : SBCOUNT=1
If M0DE=1
   Ssave 3,P_BUF To P_BUF+BSIZE
Else If M0DE=2
   Repeat 
      Ssave SBCOUNT+2,P_BUF+BBUFF To P_BUF+BBUFF+BSIZE
      BBUFF=BBUFF+BSIZE
      Inc SBCOUNT
   Until SBCOUNT>2
Else 
   Repeat 
      Ssave SBCOUNT+2,P_BUF+BBUFF To P_BUF+BBUFF+BSIZE
      BBUFF=BBUFF+BSIZE
      Inc SBCOUNT
   Until SBCOUNT>4
End If 
DRWBGREC:
BGRECTOTAL=BGRECTOTAL+BSIZE
If Not RENDERING and TGL=1
   Gosub GFXSET
   Ink _HIGHLIGHT,_PANE
   T_LENGTH=BGRECTOTAL
   Gosub TIME_CAL
   T$=Str$(DIV#)-" "+T$
   If Len(T$)<16
      T$=Space$(5)+T$
   Else If Len(T$)<22
      T$=Space$(1)+T$
   End If 
   Text 600-Text Length(T$),WVE_H+24+16,T$
   Gosub GFXRESTORE
End If 
Return 
'
'
'
'***************************************************************************** 
'*position******************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'   ::::::::.     ...      .::::::.  :::  :::::::::: :::      ...     ::.    :::.
'   `;;```.;;; .;;;;;;;.  ;;;`    `; ;;;  ;;;;;;;''' ;;;   .;;;;;;;.  ;;;;,  `;;;
'   `]]nnn]]' ,[[     \[[,'[==/[[[[, [[[      [[     [[[  ,[[     \[[, [[[[[. '[[
'    $$$""    $$$,     $$$  '''    $ $$$,     $$     $$$, $$$,     $$$ $$$ "Y$c$$
'    888o     "888,_ _,88P,88b    dPo88888    88,   o88888"888,_ _,88P888    Y88 
'    YMMMb      "YMMMMMP"   "YMmMY" MMM"MM    MMM   MMM"MM  "YMMMMMP" MM     YM
'
'
'
_POSITION:
If SETTING$(13)=_FALSE$ or P_LENGTH=0 or OSCILLO or _MENUDO Then Goto _SENDSYNC
If M0DE=4
   PPSTEP=1
   PPY=HDR_H
   PPH=(WVE_H/4)
   Gosub GFXSET
   For PPCOUNT=1 To 4
      If ADVPOS#(PPCOUNT)>0 : Rem and OFFSET(PPCOUNT)>=0 
         XP(PPCOUNT)=Int((OFFSET(PPCOUNT)-BSIZE)/ADVPOS#(PPCOUNT))
         If XD>0
            XP(PPCOUNT)=XP(PPCOUNT)-(ST/ADVPOS#(PPCOUNT))
         End If 
         If Not RENDERING
            If XP2(PPCOUNT)<>XP(PPCOUNT)
               Gr Writing %10
               Draw XP(PPCOUNT),PPY To XP(PPCOUNT),PPY+PPH
               If XP2(PPCOUNT)>-1
                  Ink _WHITE
                  Draw XP2(PPCOUNT),PPY To XP2(PPCOUNT),PPY+PPH
               End If 
               XP2(PPCOUNT)=XP(PPCOUNT)
            End If 
         End If 
         PPY=PPY+PPH
      End If 
   Next PPCOUNT
   Gr Writing %1
   Gosub GFXRESTORE
Else 
   If ADVPOS#(1)>0 and OFFSET(1)>0
      If STA>0
         XP(1)=Int(OFFSET(1)/ADVPOS#(1))
         If XD>0
            If ST>0
               XP(1)=Int(XP(1)-(ST/ADVPOS#(1)))
            End If 
         Else 
            If STA>0 and RST>0
               XP(1)=Int(XP(1)-(STA/ADVPOS#(1))+(RST/ADVPOS#(1)))
            End If 
         End If 
      Else 
         If(OFFSET(1)-ST)>0
            XP(1)=Int(((OFFSET(1)-ST)/ADVPOS#(1)))
         Else 
            XP(1)=0
         End If 
      End If 
      If Not RENDERING
         If XP(1)<>XP2(1)
            Gr Writing %10
            Draw XP(1),POS_T To XP(1),WVE_H+HDR_H-1
            If XP2(1)>-1
               Draw XP2(1),HDR_H To XP2(1),WVE_H+HDR_H-1
            End If 
            Gr Writing %1
            XP2(1)=XP(1)
         End If 
      End If 
   End If 
End If 
_SENDSYNC:
PPCOUNT=PBANK-7
If PPCOUNT<0 Then PPCOUNT=1
If PPCOUNT>M0DE Then PPCOUNT=M0DE
If SETTING$(15)<>_FALSE$
   If Not RENDERING and PLYING
      If ADVPOS#(PPCOUNT)>0 : Rem and OFFSET(PPCOUNT)>0
         BEAT=(((OFFSET(PPCOUNT)/CON#)+1)/(SCR_W/8))+1
         BEAT=Btst(0,BEAT)
         If BEAT and METRO
            Gosub _GNOME
            METRO=False
         Else If Not BEAT
            If Not METRO
               Gosub _GNOMEC
               METRO=True
            End If 
         End If 
      End If 
   End If 
End If 
If NETWORK and BSD
   BEAT=(((OFFSET(PPCOUNT)/ADVPOS#(1))+1)/(SCR_W/48))-1
   If Btst(0,BEAT)
      If PBEAT<>BEAT
         PKTCOUNT=PKTCOUNT+4
         Loke Varptr(MSG$)+20,PKTCOUNT
         Gosub SOCK_SENDSTRING
         PBEAT=BEAT
      End If 
   End If 
End If 
Return 
'
POS_CAL:
P_LENGTH=Length(PBANK)
If P_LENGTH=0 Then Return 
P_START=Start(PBANK)
If M0DE<4
   If M0DE=2
      P_LENGTH=P_LENGTH/2
   Else If M0DE=3
      P_LENGTH=P_LENGTH/4
   End If 
   ADVPOS#(1)=(L-BSIZE)/SCR_W#
Else 
   For PAC=1 To 4
      ADVPOS#(PAC)=(D_LENGTH(PAC)-BSIZE-ST-FIN)/SCR_W#
   Next PAC
End If 
Return 
'
NUDGEPOS:
If OSCILLO Then Return 
If Not BGPLYING Then Return 
Gosub GFXSET
If M0DE=4
   NPSTEP=1
   NPY=HDR_H
   NPH=(WVE_H/4)
   For NPCOUNT=1 To 4
      Gr Writing %10
      Ink _WHITE
      Draw XP(NPCOUNT),NPY To XP(NPCOUNT),NPY+NPH
      NPY=NPY+NPH
   Next NPCOUNT
Else 
   Gr Writing %10
   Draw XP2(1),POS_T To XP2(1),WVE_H+HDR_H-1
End If 
Gr Writing %1
Gosub GFXRESTORE
Return 
'
POS_SET:
RNG_T=1
If M0DE=4
   CY=Y Screen(Y Mouse)
   WVE_D=WVE_H/4
   If CY>HDR_H and CY<=HDR_H+WVE_D
      RNG_T=1
      RNG_B=WVE_D
      B=1
   Else If CY>HDR_H+WVE_D and CY<=HDR_H+WVE_D+WVE_D
      RNG_T=WVE_D+1 : RNG_B=WVE_D+WVE_D
      B=2
   Else If CY>HDR_H+WVE_D+WVE_D and CY<=HDR_H+WVE_D+WVE_D+WVE_D
      RNG_T=WVE_D+WVE_D+1 : RNG_B=WVE_D+WVE_D+WVE_D
      B=3
   Else If CY>HDR_H+WVE_D+WVE_D+WVE_D and CY<=HDR_H+WVE_H
      RNG_T=WVE_D+WVE_D+WVE_D+1 : RNG_B=WVE_H
      B=4
   End If 
   If PB<>B
      Gosub NUDGEPOS
   End If 
   Gosub _SWAPBANK
   If Length(B+7)=0
      Gosub _CLEARPLAYBUFFER
   End If 
End If 
Return 
'
'  
'
'***************************************************************************** 
'*draw************************************************************************ 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'  
'   ::::::-.  :::::::..    :::.     .::    .   .:: 
'   ;;,   `';,;;;;``;;;;   ;;`;;    ';;,  ;;  ;;;' 
'   `[[     [[\[[[,/[[['  ,[[ '[[,   '[[, [[, [['  
'    $$,    $$"$$$$$$c   c$$$cc$$$c    Y$c$$$c$P   
'    888_,o8P',888b "88bo 888   888,    "88"888    
'   "MMMMP"`  "MMMM   "W" YMM   ""`      "M "M"    
'
'
'
_DRAW:
For D=HDR_H+WVE_H To HDR_H-_DSTEP Step _DSTEP
   Ink _PANE
   Bar 0,D--_DSTEP To WVE_W,D
Next D
Ink _SHADOW
WVE_D=HDR_H+(WVE_H/2)
Draw 0,WVE_D To SCR_W,WVE_D
If M0DE>1
   WVE_D=HDR_H+(WVE_H/4)
   DCY=WVE_D+(WVE_H/2)
   Draw 0,WVE_D To SCR_W,WVE_D
   Draw 0,DCY To SCR_W,DCY
End If 
If M0DE>2
   WVE_D=WVE_H/4
   DCY=-(WVE_H/8)
   For D=1 To 4
      Draw 0,HDR_H+WVE_D+DCY To SCR_W,HDR_H+WVE_D+DCY
      DCY=DCY+WVE_D
   Next D
End If 
If M0DE<>4 and P_LENGTH=0 Then Goto _COPYWAVE
Ink _WHITE
On M0DE Goto D1,D2,D3,D4
D1:
WVE_D=HDR_H+(WVE_H/2)
ADV#=(P_LENGTH-ST-FIN)/SCR_W#
D_START(1)=P_START+ST
DN=(Peek(D_START(1))*128)/192
If DN>84 Then Add DN,-170
Gr Locate 0,DN+WVE_D
DI=0
For D=0 To WVE_W Step _STEP
   DN=Int(D*ADV#)
   DN=(Peek(D_START(1)+DN)*128)/192
   If DN>84 Then Add DN,-170
   Draw To D,DN+WVE_D
Next D
Goto _COPYWAVE
D2:
WVE_D=WVE_H/2
ADV#=(P_LENGTH-ST-FIN)/SCR_W#
D_START(1)=P_START+ST
D_START(2)=D_START(1)+P_LENGTH
DCY=HDR_H+(WVE_D/2)
DC=1
Repeat 
   DN=(Peek(D_START(DC))*128)/512
   If DN>31 Then Add DN,-64
   Gr Locate 0,DN+DCY
   DI=1
   Repeat 
      DN=Int(DI*ADV#)
      DN=(Peek(D_START(DC)+DN)*128)/512
      If DN>31 Then Add DN,-64
      Draw To DI,DN+DCY
      Add DI,_STEP
   Until DI>WVE_W
   Add DCY,WVE_D
   Inc DC
Until DC>2
Goto _COPYWAVE
D3:
WVE_D=WVE_H/4
ADV#=(P_LENGTH-ST-FIN)/SCR_W#
DI=0
DC=1
Repeat 
   D_START(DC)=P_START+ST+DI
   Add DI,P_LENGTH
   Inc DC
Until DC>4
DCY=HDR_H+(WVE_D/2)
DC=1
Repeat 
   DN=(Peek(D_START(DC))*128)/1024
   If DN>15 Then Add DN,-32
   Gr Locate 0,DN+DCY
   DI=1
   Repeat 
      DN=Int(DI*ADV#)
      DN=(Peek(D_START(DC)+DN)*128)/1024
      If DN>15 Then Add DN,-32
      Draw To DI,DN+DCY
      Add DI,_STEP
   Until DI>WVE_W
   Add DCY,WVE_D
   Inc DC
Until DC>4
Goto _COPYWAVE
D4:
WVE_D=WVE_H/4
DC=1
Repeat 
   D_LENGTH(DC)=Length(DC+7)
   If D_LENGTH(DC)>0
      ADV#(DC)=(D_LENGTH(DC)-ST-FIN)/SCR_W#
      D_START(DC)=Start(DC+7)+ST
   Else 
      ADV#(DC)=0
   End If 
   Inc DC
Until DC>4
DCY=HDR_H+(WVE_D/2)
DC=1
Repeat 
   If ADV#(DC)>0
      DN=(Peek(D_START(DC)+1)*128)/1024
      If DN>15
         Add DN,-32
      End If 
      Gr Locate 0,DN+DCY
      DI=1
      Repeat 
         DN=Int(DI*ADV#(DC))
         DN=(Peek(D_START(DC)+DN)*128)/1024
         If DN>15
            Add DN,-32
         End If 
         Draw To DI,DN+DCY
         Add DI,_STEP
      Until DI>WVE_W
   Else 
      Draw 0,DCY To SCR_W,DCY
   End If 
   Add DCY,WVE_D
   Inc DC
Until DC>4
_COPYWAVE:
If M=0
   Gosub DRWINFO
   For D=HDR_H+WVE_H To HDR_H-_DSTEP Step _DSTEP
      Screen Copy 0,0,D--_DSTEP,WVE_W,D To 1,0,(D--_DSTEP)-HDR_H
   Next D
End If 
Return 
'
_SHOWWAVE:
For D=WVE_H To 0 Step _DSTEP
   Screen Copy 1,0,D--_DSTEP,WVE_W,D To 0,0,HDR_H+D--_DSTEP
Next D
Return 
'
DRWINFO:
Ink _SHADOW
DI=39
DCY=HDR_H+WVE_H
Repeat 
   Draw DI,HDR_H To DI,HDR_H+2
   Draw DI+40,HDR_H To DI+40,HDR_H+5
   Draw DI,DCY-2 To DI,DCY
   Draw DI+40,DCY-5 To DI+40,DCY
   Add DI,80
Until DI>=559
Draw DI,HDR_H To DI,HDR_H+2
Draw DI,DCY-2 To DI,DCY
If M0DE=4
   DI=39
   Repeat 
      Draw DI,HDR_H+WVE_D To DI,HDR_H+WVE_D+2
      Draw DI+40,HDR_H+WVE_D To DI+40,HDR_H+WVE_D+5
      Draw DI,HDR_H+(WVE_D*3)-2 To DI,HDR_H+(WVE_D*3)
      Draw DI+40,HDR_H+(WVE_D*3)-4 To DI+40,HDR_H+(WVE_D*3)
      Add DI,80
   Until DI>=559
   Draw DI,HDR_H+WVE_D To DI,HDR_H+WVE_D+2
   Draw DI,HDR_H+(WVE_D*3)-2 To DI,HDR_H+(WVE_D*3)
End If 
Return 
'
DRWTIME:
If RENDERING Then Return 
T_LENGTH=P_LENGTH
Gosub TIME_CAL
Ink _SHADOW,_PANE
If DIV#>0
   If DIV#>9
      T$=Str$(DIV#)-" "+T$
   Else 
      T$=Str$(DIV#)+T$
      
   End If 
   If Len(T$)<16
      T$=Space$(7)+T$
   End If 
Else 
   T$=Space$(22)
End If 
Text 600-Text Length(T$),WVE_H+24+16,T$
DRWHZ:
Ink _SHADOW,_PANE
T$=Str$(FREQ)+" Hz"
Text 108-Text Length(T$),WVE_H+24+16,T$
Return 
'
HEADER:
Ink _PANE
Bar 0,0 To SCR_W,HDR_H-1
Ink _SHADOW,_PANE
T$=Str$(B)-" "
If Len(F$)<19
   Text 6,8,T$+":"+F$
Else 
   Text 6,8,T$+":"+Left$(F$,15)+"..."
End If 
MFREE=Fast Free+Chip Free
If MFREE>10000000
   MFREE=MFREE/1048576
   T$="M"
Else 
   MFREE=MFREE/1024
   T$="K"
End If 
Text SCR_W-83,8,"Free:"+Str$(MFREE)-" "+T$
HEADERCORDS:
Ink _SHADOW,_PANE
Text 244,8,Space$(9)
Text 244,8,Str$(Length(PBANK))
Text 210,8,"Size:"
Text 361,8,Space$(9)
Text 361,8,Str$(RST)
Text 319,8,"Start:"
Text 480,8,Space$(9)
Text 480,8,Str$(RL)
Text 438,8,"Range:"
Return 
'  
_SHOWALL:
Gosub SET_PBANK
If FX_LENGTH=0 Then Goto FLSHSCR
XD=0 : XD2=SCR_W : ST=0 : FIN=0 : L=0
If DISPPLY
   STA=0
   FI=P_LENGTH
End If 
Gosub _RANGEPXCLEAR
RENDERING=True
Gosub _DRAW
Gosub SETCORDS
Gosub FRESHSEL
RENDERING=False
Gosub MAGICWAND
Gosub HEADER
Gosub DRWTIME
Return 
'  
'
'
'***************************************************************************** 
'*zoom*wand******************************************************************* 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'   ::::::::     ...         ...      .        :   
'   `````;;;  .;;;;;;;.   .;;;;;;;.   ;;,.    ;;;  
'       .n[[',[[     \[[,,[[     \[[, [[[[, ,[[[[, 
'     ,$$P"  $$$,     $$$$$$,     $$$ $$$$$$$$"$$$ 
'   ,888bo,_ "888,_ _,88P"888,_ _,88P888 Y88" 888o 
'    `""*UMM   "YMMMMMP"   "YMMMMMP" MM  M'  "MMMM 
'
'
'
UDISPPLY:
If DISPPLY
   If ST+FIN=0
      FI=P_LENGTH
   Else 
      STA=ST
      FI=P_LENGTH-FIN
   End If 
End If 
Return 
'
MAGICWANDM:
_MOVEHANDLE=True
MAGICWAND:
Gosub SETCORDS
Gosub SETZ0NES
If XD+43<XD2-43
   Cls _PANE,0,WND_Y To XD,WND_H
   Cls _WHITE,XD,WND_Y To XD+43,WND_H
   Cls _BLACK,XD+43,WND_Y To XD2-43,WND_H
   Cls _WHITE,XD2-43,WND_Y To XD2,WND_H
   Cls _PANE,XD2,WND_Y To SCR_W,WND_H
   Set Zone 70,XD,WND_Y To XD+43,WND_H
   Set Zone 72,XD+43,WND_Y To XD2-43,WND_H
   Set Zone 71,XD2-43,WND_Y To XD2,WND_H
   ZXD=XD
Else If XD2<SCR_W and ZXD<SCR_W-43-43 and Not _MOVEHANDLE
   Cls _PANE,0,WND_Y To ZXD,WND_H
   Cls _HIGHLIGHT,ZXD,WND_Y To ZXD+23,WND_H
   Cls _BLACK,ZXD+23,WND_Y To ZXD+23+43,WND_H
   Cls _HIGHLIGHT,ZXD+43+23,WND_Y To ZXD+43+23+23,WND_H
   Cls _PANE,ZXD+43+46,WND_Y To SCR_W,WND_H
   Set Zone 70,ZXD,WND_Y To ZXD+23,WND_H
   Set Zone 72,ZXD+23,WND_Y To ZXD+23+43,WND_H
   Set Zone 71,ZXD+43+23,WND_Y To ZXD+43+23+23,WND_H
Else If XD2<SCR_W and XD<SCR_W-43-23-23
   Cls _PANE,0,WND_Y To XD,WND_H
   Cls _HIGHLIGHT,XD,WND_Y To XD+23,WND_H
   Cls _BLACK,XD+23,WND_Y To XD+23+43,WND_H
   Cls _HIGHLIGHT,XD+43+23,WND_Y To XD+43+23+23,WND_H
   Cls _PANE,XD+43+46,WND_Y To SCR_W,WND_H
   Set Zone 70,XD,WND_Y To XD+23,WND_H
   Set Zone 72,XD+23,WND_Y To XD+23+43,WND_H
   Set Zone 71,XD+43+23,WND_Y To XD+43+23+23,WND_H
   ZXD=XD
Else 
   Cls _PANE,0,WND_Y To SCR_W-43-23-23,WND_H
   Cls _HIGHLIGHT,SCR_W-43-23-23,WND_Y To SCR_W-43-23,WND_H
   Cls _BLACK,SCR_W-23-43,WND_Y To SCR_W-23,WND_H
   Cls _HIGHLIGHT,SCR_W-23,WND_Y To SCR_W,WND_H
   Set Zone 70,SCR_W-43-23-23,WND_Y To SCR_W-43-23,WND_H
   Set Zone 72,SCR_W-43-23,WND_Y To SCR_W-23,WND_H
   Set Zone 71,SCR_W-23,WND_Y To SCR_W,WND_H
   ZXD=XD
End If 
_MOVEHANDLE=False
Return 
'  
LEFTWAND:
RENDERING=True
MX=CX : PXD=XD
Repeat 
   PX=CX
   Gosub TESTMOVE
   If PX<>CX
      Gosub LREFRESH
   Else If C=78 or C=47
      Inc XD
      Gosub LRREFRSH
   Else If C=79 or C=45
      Dec XD
      Gosub LRREFRSH
   End If 
Until M=0
Goto AFTERWAND
LREFRESH:
Gosub UDISPPLY
If Key Shift=1
   XD=PXD-((MX-CX)/2)
Else 
   XD=PXD-(MX-CX)
End If 
If XD<0 Then XD=0
If XD>SCR_W-2 Then XD=SCR_W-2
If XD>XD2-1 Then XD=XD2-1
Gosub MAGICWANDM
If SETTING$(17)<>_FALSE$ Then Gosub _DRAW
Return 
'
RIGHTWAND:
RENDERING=True
MX=CX : PXD2=XD2
Repeat 
   PX=CX
   Gosub TESTMOVE
   If PX<>CX
      Gosub RREFRESH
   Else If C=78 or C=47
      Inc XD2
      Gosub LRREFRSH
   Else If C=79 or C=45
      Dec XD2
      Gosub LRREFRSH
   End If 
Until M=0
Goto AFTERWAND
RREFRESH:
Gosub UDISPPLY
If Key Shift=1
   XD2=PXD2-((MX-CX)/2)
Else 
   XD2=PXD2-(MX-CX)
End If 
If XD2>SCR_W Then XD2=SCR_W
If XD2<1 Then XD2=1
If XD2<XD+1 Then XD2=XD+1
Gosub MAGICWANDM
If SETTING$(17)<>_FALSE$ Then Gosub _DRAW
Return 
'
MOVEWAND:
RENDERING=True
MX=CX : PXD=XD : PXD2=XD2
Repeat 
   PX=CX
   Gosub TESTMOVE
   If PX<>CX
      Gosub MREFRESH
   Else If C=78 or C=47
      Inc XD : Inc XD2
      Gosub LRREFRSH
   Else If C=79 or C=45
      Dec XD : Dec XD2
      Gosub LRREFRSH
   End If 
Until M=0
AFTERWAND:
Gosub POS_CAL
Gosub SETCORDS
Gosub SETZ0NES
Gosub _DRAW
Gosub FRESHSEL
Gosub _RANGEPXCLEAR
RENDERING=False
Return 
'
MREFRESH:
If Key Shift=1
   XD=PXD-((MX-CX)/2)
   XD2=PXD2-((MX-CX)/2)
Else 
   XD=PXD-(MX-CX)
   XD2=PXD2-(MX-CX)
End If 
If XD2<1
   XD2=1
End If 
LRREFRSH:
If XD<0 Then XD=0
If XD>SCR_W-2 Then XD=SCR_W-2
If XD2>SCR_W Then XD2=SCR_W
Gosub UDISPPLY
Gosub MAGICWANDM
If SETTING$(17)<>_FALSE$ Then Gosub _DRAW
Return 
'
WREFRSH:
Gosub UDISPPLY
Gosub MAGICWANDM
RENDERING=True
Goto AFTERWAND
'  
SETCORDS:
Gosub SETSELV
If CON#>0
   If RL>0 and RST>0
      XR=Int((RST/CON#)-(ST/CON#))
      XR2=Int(SCR_W-((RFIN/CON#)-(FIN/CON#)))
   Else If RST=0
      XR=0
      XR2=Int(SCR_W-((RFIN/CON#)-(FIN/CON#)))
   End If 
End If 
If XR<0
   XR=0
Else If XR>SCR_W
   XR=SCR_W
End If 
If XR2>SCR_W
   XR2=SCR_W
Else If XR2<0
   XR2=0
End If 
CON#=P_LENGTH/SCR_W#
ST=Int(XD*CON#)
FIN=Int((SCR_W-XD2)*CON#)
L=P_LENGTH-ST-FIN
Goto POS_CAL
'
'
'
'***************************************************************************** 
'*range*********************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'   :::::::..    :::.     ::.    :::. .,-:::::/  .,::::::
'   ;;;;``;;;;   ;;`;;    ;;;;,  `;;;;;-'````'   ;;;;''''
'   \[[[,/[[['  ,[[ '[[,   [[[[[. '[[[[   [[[[[[/ [[cccc 
'   "$$$$$$c   c$$$cc$$$c  $$$ "Y$c$$$$c.    "$$  $$"""" 
'   ,888b "88bo 888   888,888    Y88 `Y8bo,,,o88  888oo,_
'   "MMMM   "W" YMM   ""` MM     YM    `'YMUP"YMM """"YUM
'
'
'
RANGE:
RENDERING=True
Gosub NUDGEPOS
If M0DE<>4
   If XP(1)>XR and XP(1)<XR2
   Else 
   End If 
Else 
End If 
Gosub CLR_RNG
If M0DE=4
   Gosub _RANGEPXCLEAR
   Gosub POS_SET
   If M0DE=4
      If XP(B)>XR and XP(B)<XR2
         Gosub NUDGEPOS
      End If 
   End If 
   RENDERING=True
End If 
MX=CX
If Key Shift=1
   MX=MX/40
   MX=MX*40
End If 
XR=MX : LXR=XR
XR2=XR : LXR2=XR2
Gosub FRESHDRW
Repeat 
   PX=CX
   Gosub TESTMOVE
   If PX<>CX
      Gosub SMREFRESH
   Else If(C=78 or C=47)
      Inc XR2
      Gosub MKEYREFRSH
   Else If(C=79 or C=45)
      Dec XR2
      Gosub MKEYREFRSH
   End If 
Until M=0
Gosub XRSWAP
Gosub SETSELCORDS
If RNGEPLY
   If M0DE=4
      OFFSET(B)=RST
   Else 
      OFFSET(1)=RST
   End If 
End If 
Gosub SETZ0NES
If RL=0 Then RL=1
Gosub HEADERCORDS
Gosub _RANGEPXCLEAR
Gosub NUDGEPOS
RENDERING=False
Return 
'
SMREFRESH:
If Key Shift=1
   CX=CX/40
   CX=CX*40
   If CX=MX
      Return 
   End If 
End If 
XR2=XR-(MX-CX)
MKEYREFRSH:
If XR2<0 Then XR2=0
If XR2>SCR_W Then XR2=SCR_W
Gosub SETSELCORDS
Gosub DRWRANGE
Return 
'
SELLEFT:
RENDERING=True
If XP(1)<>XP2(1)
End If 
Gosub NUDGEPOS
Gosub UNR0LLLEFT
MX=CX
If Key Shift=1
   MX=MX/40
   MX=MX*40
End If 
PXD=XR
LXR=XR
Repeat 
   PX=CX
   Gosub TESTMOVE
   If PX<>CX
      Gosub SLREFRESH
   Else If(C=78 or C=47)
      Inc XR : Inc PXD
      Gosub LKEYREFRSH
   Else If(C=79 or C=45)
      Dec XR : Dec PXD
      Gosub LKEYREFRSH
   End If 
Until M=0
Gosub XRSWAP
Gosub R0LLLEFT
Gosub HEADERCORDS
Gosub SETZ0NES
Gosub _RANGEPXCLEAR
If M0DE<>4
   If XP(1)=XP2(1)
      Gosub NUDGEPOS
   End If 
Else 
   Gosub NUDGEPOS
End If 
RENDERING=False
Return 
'  
SLREFRESH:
If Key Shift=1
   CX=CX/40
   CX=CX*40
   If CX=MX
      Return 
   End If 
   PXD=PXD/40
   PXD=PXD*40
End If 
XR=PXD-(MX-CX)
LKEYREFRSH:
If XR<0 Then XR=0
If XR>SCR_W Then XR=SCR_W
Gosub SETSELCORDS
Gosub DRWLRANGE
Return 
'
SELRIGHT:
RENDERING=True
Gosub NUDGEPOS
Gosub UNR0LLRIGHT
MX=CX
If Key Shift=1
   MX=MX/40
   MX=MX*40
End If 
PXD=XR2
LXR=XR
LXR2=XR2
Repeat 
   PX=CX
   Gosub TESTMOVE
   If PX<>CX
      Gosub SRREFRESH
   Else If(C=78 or C=47)
      Inc XR2 : Inc PXD
      Gosub RKEYREFRSH
   Else If(C=79 or C=45)
      Dec XR2 : Dec PXD
      Gosub RKEYREFRSH
   End If 
Until M=0
Gosub FRESHDRW
Gosub XRSWAP
Gosub R0LLRIGHT
Gosub HEADERCORDS
Gosub SETZ0NES
Gosub _RANGEPXCLEAR
If M0DE<>4
   If XP(1)=XP2(1)
      Gosub NUDGEPOS
   End If 
Else 
   Gosub NUDGEPOS
End If 
RENDERING=False
Return 
'
SRREFRESH:
If Key Shift=1
   CX=CX/40
   CX=CX*40
   If CX=MX
      Return 
   End If 
   PXD=PXD/40
   PXD=PXD*40
End If 
XR2=PXD-(MX-CX)
RKEYREFRSH:
If XR2<0 Then XR2=0
If XR2>SCR_W Then XR2=SCR_W
Gosub SETSELCORDS
Gosub DRWRANGE
Return 
'
R0LLLEFT:
If _MENUDO or RL<2 Then Return 
Ink _HIGHLIGHT
If XR2>XR+10
   Bar XR+1,RNG_T+HDR_H To XR+10,RNG_B+HDR_H-1
End If 
Return 
'  
UNR0LLLEFT:
If _MENUDO or RL<2 Then Return 
If XR2-XR>12 and XR2>XR
   Screen Copy 1,XR+1,RNG_T-1,XR+HDR_H,RNG_B To 0,XR+1,RNG_T+HDR_H-1,%110000
End If 
Return 
'
R0LLRIGHT:
If _MENUDO or RL<2 Then Return 
If XR2>10 and XR2>XR+10
   Ink _HIGHLIGHT
   Bar XR2-10,RNG_T+HDR_H To XR2-1,RNG_B+HDR_H-1
End If 
Return 
'
UNR0LLRIGHT:
If _MENUDO or RL<2 Then Return 
If XR2>12 and XR2>XR+12
   Screen Copy 1,XR2-11,RNG_T-1,XR2,RNG_B To 0,XR2-11,RNG_T+HDR_H-1,%110000
End If 
Return 
'
FRESHSEL:
If RL=0 Then Return 
If XR=XR2 or XR+1=XR2 Then Goto FRESHDRW
For D=RNG_B To RNG_T Step _DSTEP
   Screen Copy 1,XR,D--_DSTEP,XR2,D To 0,XR,HDR_H+(D--_DSTEP),%110000
Next D
Ink _BG
Draw XR,RNG_T+HDR_H To XR,RNG_B+HDR_H-1
FRESHDRW:
Ink _BG
Draw XR2,RNG_T+HDR_H To XR2,RNG_B+HDR_H-1
Return 
'
CLR_RNG:
For D=RNG_B To RNG_T Step _DSTEP
   Screen Copy 1,XR,D--_DSTEP,XR2+1,D To 0,XR,HDR_H+(D--_DSTEP)
Next D
Return 
'
DRWRANGE:
If RNGEPLY
   If RST+RFIN=0
      FI=P_LENGTH
   Else 
      STA=RST
      FI=P_LENGTH-RFIN
   End If 
End If 
If XR>XR2
   If LXR2>XR
      For D=RNG_B To RNG_T Step _DSTEP
         Screen Copy 1,XR,D--_DSTEP,LXR2+1,D To 0,XR,HDR_H+(D--_DSTEP)
      Next D
      LXR2=XR
   End If 
   If XR2<LXR
      For D=RNG_B To RNG_T Step _DSTEP
         Screen Copy 1,XR2,D--_DSTEP,LXR+1,D To 0,XR2,HDR_H+(D--_DSTEP),%110000
      Next D
      LXR=XR2
   End If 
   If XR2>LXR
      For D=RNG_B To RNG_T Step _DSTEP
         Screen Copy 1,LXR,D--_DSTEP,XR2,D To 0,LXR,HDR_H+(D--_DSTEP)
      Next D
      LXR=XR2
   End If 
Else 
   If LXR<XR
      For D=RNG_B To RNG_T Step _DSTEP
         Screen Copy 1,LXR,D--_DSTEP,XR,D To 0,LXR,HDR_H+(D--_DSTEP)
      Next D
      LXR=XR
   End If 
   If XR2>LXR2
      For D=RNG_B To RNG_T Step _DSTEP
         Screen Copy 1,LXR2,D--_DSTEP,XR2,D To 0,LXR2,HDR_H+(D--_DSTEP),%110000
      Next D
      LXR2=XR2
   End If 
   If XR2<LXR2
      For D=RNG_B To RNG_T Step _DSTEP
         Screen Copy 1,XR2,D--_DSTEP,LXR2+1,D To 0,XR2,HDR_H+(D--_DSTEP)
      Next D
      LXR2=XR2
   End If 
End If 
Ink _BG
Draw XR2,RNG_T+HDR_H To XR2,RNG_B+HDR_H-1
Draw XR,RNG_T+HDR_H To XR,RNG_B+HDR_H-1
Gosub SETZ0NES
Gosub HEADERCORDS
Return 
'
DRWLRANGE:
If RNGEPLY
   If RST+RFIN=0
      FI=P_LENGTH
   Else 
      STA=RST
      FI=P_LENGTH-RFIN
   End If 
End If 
If XR>XR2
   If LXR<XR2
      For D=RNG_B To RNG_T Step _DSTEP
         Screen Copy 1,LXR,D--_DSTEP,XR2,D To 0,LXR,HDR_H+(D--_DSTEP)
      Next D
      LXR=XR2
   End If 
   If XR>LXR2
      For D=RNG_B To RNG_T Step _DSTEP
         Screen Copy 1,LXR2,D--_DSTEP,XR,D To 0,LXR2,HDR_H+(D--_DSTEP),%11000
      Next D
      LXR2=XR
   End If 
   If XR<LXR2
      For D=RNG_B To RNG_T Step _DSTEP
         Screen Copy 1,XR,D--_DSTEP,LXR2+1,D To 0,XR,HDR_H+(D--_DSTEP)
      Next D
      LXR2=XR
   End If 
Else 
   If LXR2>XR2
      For D=RNG_B To RNG_T Step _DSTEP
         Screen Copy 1,XR2,D--_DSTEP,LXR2+1,D To 0,XR2,HDR_H+(D--_DSTEP)
      Next D
      LXR2=XR2
   End If 
   If XR>LXR
      For D=RNG_B To RNG_T Step _DSTEP
         Screen Copy 1,LXR,D--_DSTEP,XR,D To 0,LXR,HDR_H+(D--_DSTEP)
      Next D
      LXR=XR
   End If 
   If XR<LXR
      For D=RNG_B To RNG_T Step _DSTEP
         Screen Copy 1,XR,D--_DSTEP,LXR+1,D To 0,XR,HDR_H+(D--_DSTEP),%110000
      Next D
      LXR=XR
   End If 
End If 
Ink _BG
Draw XR2,RNG_T+HDR_H To XR2,RNG_B+HDR_H-1
Draw XR,RNG_T+HDR_H To XR,RNG_B+HDR_H-1
Gosub SETZ0NES
Gosub HEADERCORDS
Return 
'
XRSWAP:
If XR>XR2
   Swap XR,XR2
   Gosub SETSELCORDS
   Gosub HEADERCORDS
End If 
Return 
'
SETSELV:
P_LENGTH=Length(PBANK)
If M0DE=2
   P_LENGTH=P_LENGTH/2
Else If M0DE=3
   P_LENGTH=P_LENGTH/4
End If 
If L>0
   CON#=L/SCR_W#
Else 
   CON#=P_LENGTH/SCR_W#
End If 
Return 
'
SETSELCORDS:
Gosub SETSELV
RST#=XR*CON#
RFIN#=(SCR_W-XR2)*CON#
CON#=P_LENGTH/SCR_W#
ST#=XD*CON#
FIN#=(SCR_W-XD2)*CON#
RST#=ST#+RST#
RST=Int(RST#)
ST=Int(ST#)
FIN=Int(FIN#)
L=P_LENGTH-ST-FIN
RFIN#=FIN#+RFIN#
RFIN=Int(RFIN#)
If RFIN<0 Then RFIN=0
RL=P_LENGTH-RST-RFIN
Return 
'
_RANGEDISPLAY:
Gosub SET_PBANK
If FX_LENGTH=0
   Goto FLSHSCR
End If 
XR=0 : XR2=SCR_W
Gosub _RANGEPXCLEAR
Gosub SETSELCORDS
RENDERING=True
Gosub FRESHSEL
RENDERING=False
Gosub SETZ0NES
Gosub HEADERCORDS
Return 
'
_SHOWRANGE:
If RL<2
   Goto FLSHSCR
End If 
Gosub SET_PBANK
If FX_LENGTH=0
   Goto FLSHSCR
End If 
ST=RST : FIN=RFIN
XD=ST/CON#
XD2=((P_LENGTH-FIN)/CON#)
Gosub MAGICWAND
Gosub _RANGEPXCLEAR
RENDERING=True
Gosub _DRAW
Gosub SETSELCORDS
Gosub FRESHSEL
RENDERING=False
If DISPPLY
   STA=ST
   FI=P_LENGTH-FIN
End If 
Return 
'
_RANGEALL:
Gosub SET_PBANK
If FX_LENGTH=0
   Goto FLSHSCR
End If 
FIN=Length(PBANK)
RL=FIN : ST=0 : RST=0 : RFIN=0 : XR=0 : XR2=0
Gosub _RANGEPXCLEAR
Gosub SETCORDS
RENDERING=True
Gosub FRESHSEL
RENDERING=False
Gosub SETZ0NES
Gosub HEADERCORDS
Return 
'
_RANGENONE:
If RL=0 Then Return 
RENDERING=True
Gosub NUDGEPOS
If PASS=0
   If RNGEPLY
      STA=0 : ST=0 : FI=P_LENGTH
   End If 
   Gosub CLR_RNG
   If M0DE=4
      Gosub NUDGEPOS
   End If 
   XR=0 : XR2=0 : LXR=0 : LXR2=0
   RST=0 : RL=0 : RFIN=0
   Gosub HEADERCORDS
   Gosub SETZ0NES
   If M0DE<>4
      Gosub NUDGEPOS
   End If 
   RENDERING=False
End If 
Inc PASS
Return 
'
_RANGEPXCLEAR:
For D=1 To 4
   XP(D)=0 : XP2(D)=-1
Next D
Return 
'
'
'
'***************************************************************************** 
'*file************************************************************************ 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'    .-:::::' :::    :::    .,:::::: 
'    ;;;'''', ;;;    ;;;    ;;;;'''' 
'    [[[,,==[ [[[    [[[     [[cccc  
'    `$$$"``" $$$,   $$'     $$""""  
'   _ 888    o88888o88oo,.__ 888oo,_ 
'   MM"MM,   MMM"MM"""YUMMMM """"YUM 
'
'
'
_NEW:
BTXT1$="New" : TXT1$="Clear the current" : TXT2$="waveform?" : Gosub _REQUEST
If Not REQ Then Return 
If M0DE=4
   Gosub _CLEARPLAYBUFFER
Else 
   Gosub _STOP
End If 
Erase PBANK
F$="" : Gosub SETFILENAME
XD=0 : XD2=SCR_W : XR=0 : XR2=0 : ST=0 : FIN=0 : RST=0 : RFIN=0 : RL=0 : STA=0 : FI=0
Gosub SET_PBANK
RENDERING=True
Gosub _DRAW
RENDERING=False
Gosub HEADER
Gosub SETZ0NES
Gosub MAGICWAND
Return 
'
_OPEN:
WTXT$="Open: raw iff aif wav abk med"
PF$=F$
F$=""
Gosub FREQUEST
If Not FRQ
   F$=PF$
   Return 
Else If Not Exist(F$)
   F$=PF$
   Goto _NOTEXIST
End If 
FILEOPEN:
Gosub _CLEARUNDO
_CHANNELS=0 : _RATE=0 : _TAG=0 : _BITS=0
BANKNAME$="" : _ABK=False : _MMD=False
_IFF=False : _WAV=False : _16BIT=False : _FLOAT=False
Trap Open In 1,F$
If Errtrap Then Goto _FILEERROR
LF=Lof(1)
If LF=0
   F$=PF$
   Close 1
   Return 
End If 
FH$=Input$(1,4)
If FH$="FORM"
   _IFF=True
Else If FH$="RIFF"
   _WAV=True
Else If FH$="AmBk"
   _ABK=True
Else If Mid$(FH$,0,3)="MMD"
   _MMD=True
End If 
Gosub SETFILENAME
If _MMD
   BANKNAME$=F$
   T$=Input$(1,4) : PL=Leek(Varptr(T$))
   'length    
   T$=Input$(1,4) : P=Leek(Varptr(T$))
   'pointer     
   Pof(1)=P+787
   T$=Input$(1,1) : NUMSAMPLES=Peek(Varptr(T$))
   'numsamples  
   N=1
   Pof(1)=32
   T$=Input$(1,4) : P=Leek(Varptr(T$))
   'exp pointer 
   Pof(1)=P
   T$=Input$(1,20)
   T$=Input$(1,4) : NAMES=Leek(Varptr(T$))
   T$=Input$(1,2) : ENTRIES=Deek(Varptr(T$))
   'entries   
   T$=Input$(1,2) : ENTSIZE=Deek(Varptr(T$))
   'enterz  
   Pof(1)=NAMES
   For I=1 To ENTRIES
      T$=Input$(1,ENTSIZE)
      P=Peek(Varptr(T$))
      If P>0
         For I2=1 To Text Length(T$)
            CN=Peek(Varptr(T$)+I2)
            If CN=0
               Exit 
            End If 
         Next I2
         FILES$(I)=Mid$(T$,0,I2)
      Else 
         FILES$(I)=_UNNAMED$
      End If 
   Next I
   Pof(1)=24
   T$=Input$(1,4) : P=Leek(Varptr(T$))
   'pointer to smplarr pointer    
   Pof(1)=P
   For I=1 To ENTRIES
      T$=Input$(1,4) : P=Leek(Varptr(T$))
      'pointer to InstrHdr pointers      
      If P>0 and P<Lof(1)-Pof(1)
         PNTERS(I)=P
      Else 
         PNTERS(I)=-1
      End If 
   Next I
   FX_START=0
   FX_LENGTH=Lof(1)
   For I=1 To ENTRIES
      B=N
      If PNTERS(I)>0
         Pof(1)=PNTERS(I)
         T$=Input$(1,4) : PL=Leek(Varptr(T$))
         'sample length 
         T$=Input$(1,2) : T=Deek(Varptr(T$))
         'sample type 
         If T=16
            T=0
            '16bit mono  
         End If 
         If T=48
            T=0 : PL=PL*2
            '16bit stereo  
         End If 
         If T=32
            T=0 : PL=PL*2
            'stereo  
         End If 
         If T=0 and PL>0
            If 7+N>8
               Erase 7+N
               Trap Reserve As Work 7+N,PL
               If Errtrap
                  Close 1
                  F$=""
                  Goto _NOMEMORY
               End If 
               AC=Start(7+N)
            Else 
               Erase 5
               Trap Reserve As Work 5,PL
               If Errtrap
                  Close 1
                  F$=""
                  Goto _NOMEMORY
               End If 
               AC=Start(5)
            End If 
            WR=0
            While WR<PL
               PART=Min(8192,PL-WR)
               T$=Input$(1,PART)
               Copy Varptr(T$),Varptr(T$)+PART To AC+WR
               WR=WR+PART
               FX=FX+PART
            Wend 
            F$=FILES$(I)
            Gosub SETFILENAME
            'odd size file 
            If Instr(Str$(PL/2.0),".")>0
               If Instr(Str$(PL/2.0),"E+")<=0
                  T$=Input$(1,1)
               End If 
            End If 
            Inc N
         End If 
      End If 
   Next I
   Close 1
   B=1 : PB=1 : F$=FB$(B)
   TXT1$="Octamed File loaded" : TXT2$="with"+Str$(N)+" samples" : Gosub _NOTICE
Else If _ABK
   BANKNAME$=F$
   F$=Space$(Len(F$))
   Gosub SETFILENAME
   T$=Input$(1,2)
   T$=Input$(1,6)
   T$=Input$(1,8)
   If T$<>"Samples " or Eof(1)
      _ABK=False
      Close 1
      F$=PF$
      TXT1$="Not a sample bank" : TXT2$="" : Goto _ERROR
   End If 
   T$=Input$(1,2) : NN=Deek(Varptr(T$))
   If Eof(1)
      _ABK=False
      Close 1
      F$=PF$
      TXT1$="Empty sample bank" : TXT2$="" : Goto _ERROR
   End If 
   SF$=Input$(1,4) : SL=Leek(Varptr(SF$)) : If SL>6 : SF$=SF$+Input$(1,SL-S-6) : End If 
   FX=0 : FX_START=0 : FX_LENGTH=Lof(1) : FXE=FX_LENGTH
   For N=1 To NN
      If Leek(Varptr(SF$)+(N-1)*4)
         If Eof(1)
            TXT1$="Error loading" : TXT2$="bank, continuing..." : Gosub _ERROR
            Exit 
         End If 
         T$=Input$(1,14)
         CHRP=8
         For CHR=1 To 7
            CHRP=Peek(Varptr(T$)+CHR)
            If CHRP=0
               Exit 
            End If 
         Next CHR
         F$=Left$(T$,CHR)
         B=N : Gosub SETFILENAME
         SZ=Leek(Varptr(T$)+10)
         If SZ mod 2=1
            SZ=SZ+1
         End If 
         If SZ>0
            Erase 7+N
            Trap Reserve As Work 7+N,SZ
            If Errtrap
               Close 1
               F$=""
               Goto _NOMEMORY
            End If 
            AC=Start(7+N)
            P=0
            While P<SZ
               SL=Min(8192,SZ-P)
               If Not Eof(1)
                  T$=Input$(1,SL)
                  Copy Varptr(T$),Varptr(T$)+SL To AC+P
                  P=P+SL
                  FX=FX+SL
               Else 
                  P=SZ
               End If 
            Wend 
         End If 
      End If 
   Next 
   FX=FXE
   Close 1
   If M0DE<>4
      Bank Swap 5,8
   End If 
   B=1 : PB=1 : F$=FB$(1)
   TXT1$="Sample Bank loaded" : TXT2$="with"+Str$(NN)+" samples" : Gosub _NOTICE
Else 
   Erase PBANK
   Trap Reserve As Work PBANK,1024
   If Errtrap
      Close 1
      F$=""
      Goto _NOMEMORY
   End If 
   Pof(1)=0
   T$=Input$(1,1024)
   Copy Varptr(T$),Varptr(T$)+1024 To Start(PBANK)
   Close 1
   S_START=Start(PBANK)
   If _IFF
      S_START=Hunt(Start(PBANK) To Start(PBANK)+(Length(PBANK)),"8SVX")
      If S_START=0
         S_START=Hunt(Start(PBANK) To Start(PBANK)+(Length(PBANK)),"AIFF")
         _CHANNELS=Deek(S_START+12)
         _RATE=Deek(S_START+22)
         S_START=Hunt(S_START To Start(PBANK)+(Length(PBANK)),"SSND")+8+8
         _TOAST$="Aif"
         _BITS=16
      Else 
         _RATE=Deek(S_START+24)
         S_START=Hunt(S_START To Start(PBANK)+(Length(PBANK)),"BODY")+8
         _TOAST$="Iff"
         _BITS=8
      End If 
      If S_START=0
         S_START=Start(PBANK)+8
      End If 
   Else If _WAV
      S_START=Hunt(Start(PBANK) To Start(PBANK)+(Length(PBANK)),"fmt ")
      _TAG=Peek(S_START+8)
      If _TAG=3
         _FLOAT=True
         _TOAST$="Float"
      Else If _TAG=1
         _TOAST$="Wav"
      Else 
         _TOAST$=Str$(_TAG)
         _TAG=0
      End If 
      _CHANNELS=Peek(S_START+10)
      _RATE=0
      Poke Varptr(_RATE)+3,Peek(S_START+12)
      Poke Varptr(_RATE)+2,Peek(S_START+12+1)
      Poke Varptr(_RATE)+1,Peek(S_START+12+2)
      Poke Varptr(_RATE),Peek(S_START+12+3)
      _BITS=Peek(S_START+22)
      S_START=Hunt(Start(PBANK) To Start(PBANK)+(Length(PBANK)),"data")+8
   End If 
   S_START=S_START-Start(PBANK)
   S_LENGTH=LF-S_START
   Erase PBANK
   Trap Reserve As Work PBANK,LF
   If Errtrap
      F$=""
      Goto _NOMEMORY
   End If 
   Bload F$,PBANK
   Trap Reserve As Work WBANK,S_LENGTH
   If Errtrap
      F$=""
      Goto _NOMEMORY
   Else 
      Copy Start(PBANK)+S_START,Start(PBANK)+S_START+S_LENGTH To Start(WBANK)
      Bank Swap PBANK,WBANK
      Gosub _CLEARWORK
   End If 
End If 
If _BITS>0
   _TOAST$=Str$(_BITS)-" "+"bit "+_TOAST$
End If 
If _IFF and _BITS=16
   Gosub _STOP
   Gosub _16BITTO8BIT
Else If _WAV and _FLOAT and _BITS=32
   Gosub _STOP
   Gosub _32BITTO8BIT
Else If _WAV and _BITS=16
   Gosub _STOP
   Gosub _16BITTO8BITFLIP
Else If _WAV and _BITS=8
   Gosub _STOP
   Gosub _8BITUNSIGNEDTO8BIT
Else If _WAV and _TAG=0
   TXT1$="Wav encoding not" : TXT2$="decoded" : Gosub _NOTICE
End If 
PM0DE=M0DE
If _CHANNELS>1
   Gosub _DEINTERLEAVE
   If _CHANNELS>2
      Gosub _DEINTERLEAVE
      If M0DE<>4
         M0DE=3
      End If 
   Else If M0DE<>4
      M0DE=2
   End If 
Else If _ABK
   M0DE=4
   Gosub _RAINSET
End If 
If _RATE>0
   _TOAST$=_TOAST$+Str$(_RATE)+"Hz "
Else 
   _TOAST$="8bit RAW PCM "
End If 
Gosub _TOAST
PASS=0
XD=0 : XD2=SCR_W : XR=0 : XR2=0 : ST=0 : FIN=0 : RST=0 : RFIN=0 : RL=0
STA=0 : FI=Length(PBANK)
If M0DE=2
   FI=FI/2
Else If M0DE=3
   FI=FI/4
End If 
If PM0DE<>M0DE
   _M3SEL=M0DE+1
   M0DE=PM0DE
   Gosub M0DEMENU
   Gosub SETZ0NES
   Gosub HEADER
Else 
   Gosub _SHOWALL
End If 
Gosub SET_PBANK
If M0DE=4
   Gosub _SWAPBANK
   Gosub POS_CAL
End If 
Return 
'
_OPENASRAW:
WTXT$="Open as raw"
PF$=F$
Gosub FREQUEST
If Not FRQ
   F$=PF$
   Return 
Else If Not Exist(F$)
   F$=PF$
   Goto _NOTEXIST
End If 
Gosub _STOP
Gosub _CLEARUNDO
Trap Open In 1,F$
If Errtrap Then Goto _FILEERROR
LF=Lof(1)
If LF=0
   Close 1
   Return 
End If 
XD=0 : XD2=SCR_W : XR=0 : XR2=0 : ST=0 : FIN=0 : RST=0 : RFIN=0 : RL=0 : STA=0 : FI=0
FH$=Input$(1,4)
Close 1
_IFF=False : _WAV=False
If FH$="FORM"
   _IFF=True
Else If FH$="RIFF"
   _WAV=True
End If 
Erase PBANK
Trap Reserve As Work PBANK,LF
If Errtrap
   F$=""
   Goto _NOMEMORY
Else 
   Bload F$,PBANK
   If _IFF
      TXT2$="Iff file"
      S_START=Hunt(Start(PBANK) To Start(PBANK)+1024,"BODY")
      If S_START=0
         S_START=Hunt(Start(PBANK) To Start(PBANK)+1024,"SSND")
         TXT2$="Aif file"
      End If 
      Add S_START,8
   Else If _WAV
      TXT2$="Wav file"
      S_START=Hunt(Start(PBANK) To Start(PBANK)+(Length(PBANK)/2),"data")+8
   End If 
   If S_START>0
      Trap Reserve As Work WBANK,LF-(S_START-Start(PBANK))
      If Errtrap
         F$=""
         Goto _NOMEMORY
      End If 
      Copy S_START,Start(PBANK)+Length(PBANK) To Start(WBANK)
      Bank Swap PBANK,WBANK
      TXT1$="Header removed from" : Gosub _NOTICE
   End If 
   If M0DE<>1
      M0DE=1
      _M3SEL=M0DE+1
      Gosub M0DEMENU
   End If 
   Gosub _SHOWALL
End If 
Return 
'  
_REVERT:
If F$="" and BANKNAME$="" Then Goto FLSHSCR
BTXT1$="Ok" : TXT1$="Are you sure?" : TXT2$="You will loose any edits" : Gosub _REQUEST
If Not REQ Then Return 
If FB$(B)=_UNNAMED$ or FPATH$(B)="" Then Goto FLSHSCR
If _AMIVER<3 Then Gosub _STOP
If BANKNAME$<>"" Then F$=BANKNAME$
PPROGDIR$=Dir$
Dir$=FPATH$(B)
Gosub FILEOPEN
Dir$=PPROGDIR$
Gosub SET_PBANK
Return 
'
_SAVEAS:
If Length(PBANK)=0 Then Goto FLSHSCR
PF$=F$
WTXT$="Save As: raw"
Gosub FREQUEST
If Not FRQ Then Return 
If Exist(F$)
   Gosub _OVERWRITE
   If Not REQ
      F$=PF$
      Return 
   End If 
End If 
Bsave F$,Start(PBANK) To Start(PBANK)+Length(PBANK)
Gosub SETFILENAME
Gosub HEADER
Return 
'
'
'
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'   Sample Bank Maker by François Lionet, AMOS version by P.J.Hickman    
'   © Copyright 1990 Mandarin Software 
'
_SAVEASBANK:
PF$=F$
If BANKNAME$<>""
   F$=BANKNAME$
Else 
   F$="samples.abk"
End If 
WTXT$="Save: abk"
Gosub FREQUEST
If Not FRQ
   F$=PF$
   Return 
End If 
If Exist(F$)
   Gosub _OVERWRITE
   If Not REQ
      F$=PF$
      Return 
   End If 
End If 
PB=B : B=1
If M0DE<>4
   If Length(B+7)=0
      Bank Swap 5,B+7
   End If 
End If 
FIN=0
For N=1 To 248
   If Length(N+7)=0
      FIN=N
      Exit 
   End If 
Next N
TL=0 : TN=0
For N=1 To FIN
   If Length(7+N)>0
      TL=TL+Length(7+N)+4+14
      Inc TN
   End If 
Next 
Trap Reserve As Work WBANK,TL+22
If Errtrap Then Goto _NOMEMORY
AD=Start(WBANK)
T$="AmBk"
For I=1 To Len(T$)
   Poke AD+I-1,Asc(Mid$(T$,I,1))
Next I
AD=AD+4
Doke AD,5
AD=AD+2
Doke AD,0
AD=AD+2
Loke AD,(TL+8) or $80000000
AD=AD+4
T$="Samples "
For I=1 To Len(T$)
   Poke AD+I-1,Asc(Mid$(T$,I,1))
Next I
AD=AD+8
ACALC=AD
Doke AD,TN
AD=AD+2
AOFF=AD
APOKE=AOFF+TN*4
NN=0
For N=1 To 248
   WEIGHTING=0
   If Length(7+N)>0
      Inc NN
      Loke AOFF,APOKE-ACALC
      AOFF=AOFF+4
      If FB$(N)=""
         T$=Left$(_UNNAMED$,8)
      Else 
         T$=Left$(FB$(N),8)
      End If 
      AD=APOKE
      For I=1 To Len(T$)
         Poke AD+I-1,Asc(Mid$(T$,I,1))
      Next I
      Doke APOKE+8,FREQ
      Loke APOKE+10,Length(7+N)
      APOKE=APOKE+14
      A_START=Start(7+N)
      PP=Varptr(P)
      For I=0 To Length(7+N)
         P=Peek(A_START+I)+WEIGHTING
         Poke APOKE+I,Peek(PP+3)
      Next I
      APOKE=APOKE+Length(7+N)
      If Btst(0,APOKE)
         Inc APOKE
      End If 
   End If 
Next N
If Right$(Upper$(F$),4)<>".ABK"
   F$=F$+".abk"
End If 
Bsave F$,Start(WBANK) To Start(WBANK)+TL+22
If M0DE<>4 and Length(5)=0
   Bank Swap 5,B+7
End If 
Gosub _CLEARWORK
Gosub _SWAPBANK
TXT1$="Sample Bank saved" : TXT2$="with"+Str$(NN)+" samples" : Gosub _NOTICE
Return 
'
'***************************************************************************** 
'  
SETFILENAME:
FB$(B)=F$
If F$<>_UNNAMED$ Then FPATH$(B)=Dir$ Else FPATH$(B)=""
If B<11
   If F$<>""
      Mid$(MENS$(5,B,0),7)=FB$(B)
   Else 
      Mid$(MENS$(5,B,0),7)=Space$(16)
   End If 
End If 
Return 
'
_QUIT:
If OSCILLO Then Goto _TGLOSCILLO
BTXT1$="Quit" : TXT1$="Are you sure" : TXT2$="you want to quit?" : Gosub _REQUEST
If Not REQ Then Return 
¯QUIT:
Gosub _FULLSTOP
Every Off 
Erase Temp 
For I=1 To 7
   Trap Close I
Next I
Rainbow Del 0
If REXX Then Arexx Close 
If MATH Then Lib Close 1
If BSD
   Gosub SOCK_CLOSE
   Lib Close 2
End If 
Dir$=PROGDIR$
End 
'
'
'
'***************************************************************************** 
'*edit************************************************************************ 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'   .,::::::::::::-.   :::  :::::::::: 
'   ;;;;'''';;,   `';, ;;;  ;;;;;;;''' 
'    [[cccc `[[     [[ [[[      [[     
'    $$""""  $$,    $$ $$$,     $$     
'    888oo,_ 888_,o8P'o88888    88,    
'    """"YUM"MMMMP"`  MMM"MM    MMM  
'
'
'  
_CUT:
If PASS>0 Then Return 
If RL=0 Then Goto FLSHSCR
Gosub _UNDOSET
Gosub _COPYSET
If RNGEPLY
   RNGEPLY=False
   STA=0
End If 
If RL=1 or RL=P_LENGTH
   Gosub _CLEARCOPY
   Bank Swap CBANK,PBANK
   If M0DE=4
      Gosub _CLEARPLAYBUFFER
   Else 
      Gosub _STOP
   End If 
   Gosub SET_PBANK
Else 
   Trap Reserve As Work WBANK,Length(PBANK)-CLENGTHN
   If Errtrap
      Goto _NOMEMORY
   End If 
   Gosub _CLEARCOPY
   Trap Reserve As Work CBANK,CLENGTHN
   If Errtrap
      Goto _NOMEMORY
   End If 
   CLENGTH=0
   For CCOUNT=0 To CCOUNTN
      Copy P_START+CLENGTH+RST,P_START+CLENGTH+RST+RL To Start(CBANK)+(RL*CCOUNT)
      CLENGTH=CLENGTH+P_LENGTH
   Next CCOUNT
   CLENGTH=0
   For CCOUNT=0 To CCOUNTN
      If RST+CLENGTH>CLENGTH
         Copy P_START+CLENGTH,P_START+CLENGTH+RST To Start(WBANK)+CLENGTH-(RL*CCOUNT)
      End If 
      If P_LENGTH>RST+RL
         Copy P_START+CLENGTH+RST+RL,P_START+CLENGTH+P_LENGTH To Start(WBANK)+CLENGTH+RST-(RL*CCOUNT)
      End If 
      CLENGTH=CLENGTH+P_LENGTH
   Next CCOUNT
   Bank Swap PBANK,WBANK
   Gosub _RESIZED
End If 
If RL>0
   RL=1
End If 
Gosub _RANGENONE
Gosub _RANGEPXCLEAR
RENDERING=True
Gosub _DRAW
If M0DE<>4 Then Gosub NUDGEPOS
RENDERING=False
Inc PASS
Return 
'
_CROP:
If PASS>0 Then Return 
If RL<2 or RL=P_LENGTH
   Gosub FLSHSCR
Else 
   Gosub _UNDOSET
   Gosub _COPYSET
   Trap Reserve As Work WBANK,CLENGTHN
   If Errtrap
      Goto _NOMEMORY
   End If 
   CLENGTH=0
   For CCOUNT=0 To CCOUNTN
      Copy P_START+CLENGTH+RST,P_START+CLENGTH+RST+RL To Start(WBANK)+(RL*CCOUNT)
      CLENGTH=CLENGTH+P_LENGTH
   Next CCOUNT
   Bank Swap PBANK,WBANK
   Gosub _RESIZED
   Gosub _RANGENONE
   RENDERING=True
   Gosub _DRAW
   RENDERING=False
End If 
Inc PASS
Return 
'
_COPY:
If PASS>0 Then Return 
If P_LENGTH=0 Then Goto FLSHSCR
If RL<2 Then Gosub _RANGEALL
Gosub _COPYSET
Gosub _CLEARCOPY
Trap Reserve As Work CBANK,CLENGTHN
If Errtrap Then Goto _NOMEMORY
CLENGTH=0
For CCOUNT=0 To CCOUNTN
   Copy P_START+CLENGTH+RST,P_START+CLENGTH+RST+RL To Start(CBANK)+(RL*CCOUNT)
   CLENGTH=CLENGTH+P_LENGTH
Next CCOUNT
If M0DE<>4 Then Gosub NUDGEPOS
PASS=0
Inc PASS
Return 
'
_PASTE:
If PASS>0 Then Return 
If Length(CBANK)=0 Then Goto _NOCOPY
If Length(PBANK)=0
   Erase PBANK
   Trap Reserve As Work PBANK,Length(CBANK)
   If Errtrap
      Goto _NOMEMORY
   End If 
   Copy Start(CBANK),Start(CBANK)+Length(CBANK) To Start(PBANK)
   XD=0 : XD2=0 : XR=0 : XR2=0 : ST=0 : FIN=0 : RST=0 : RFIN=0
   RL=Length(PBANK)
   STA=0 : FI=RL
   F$=_UNNAMED$ : Gosub SETFILENAME
Else 
   Gosub _COPYSET
   Gosub _UNDOSET
   If M0DE=1 or M0DE=4
      RL=Length(CBANK)
   Else If M0DE=2
      RL=Length(CBANK)/2
   Else If M0DE=3
      RL=Length(CBANK)/4
   End If 
   Trap Reserve As Work WBANK,Length(PBANK)+Length(CBANK)
   If Errtrap
      Goto _NOMEMORY
   End If 
   For CCOUNT=0 To CCOUNTN
      If RST>0
         Copy Start(PBANK)+(P_LENGTH*CCOUNT),Start(PBANK)+(P_LENGTH*CCOUNT)+RST To Start(WBANK)+(P_LENGTH*CCOUNT)+(RL*CCOUNT)
      End If 
      Copy Start(CBANK)+(RL*CCOUNT),Start(CBANK)+(RL*CCOUNT)+RL To Start(WBANK)+(P_LENGTH*CCOUNT)+RST+(RL*CCOUNT)
      If RST<P_LENGTH
         Copy Start(PBANK)+(P_LENGTH*CCOUNT)+RST,Start(PBANK)+(P_LENGTH*CCOUNT)+P_LENGTH To Start(WBANK)+RST+(P_LENGTH*CCOUNT)+(RL*CCOUNT)+RL
      End If 
   Next CCOUNT
   Bank Swap PBANK,WBANK
End If 
L=Length(PBANK)
Gosub _RESIZED
Gosub SETSELV
XR=RST/CON#
XR2=XR+(RL/CON#)
Gosub SETSELCORDS
Gosub _SHOWALL
Inc PASS
Return 
'
_SIZE:
Gosub _OPENFXWIN
REALTIME=False
TXT1$="From"+Str$(FX_LENGTH)+":"
Gosub _RUNFXTEXTWIN
If T$="" Then REQ=False
If Not REQ Then Return 
Gosub _UNDOSET
Trap Reserve As Work WBANK,Val(T$)
If Errtrap Then Goto _NOMEMORY
If Length(PBANK)>0
   If Length(WBANK)>Length(PBANK)
      Copy Start(PBANK),Start(PBANK)+Length(PBANK) To Start(WBANK)
   Else 
      Copy Start(PBANK),Start(PBANK)+Length(WBANK) To Start(WBANK)
   End If 
End If 
Bank Swap PBANK,WBANK
Gosub _RESIZED
Gosub _RANGENONE
RENDERING=True
Gosub _DRAW
RENDERING=False
Return 
'
_COPYSWAP:
If Length(6)=0 Then Goto _NOCOPY
Bank Swap PBANK,6
XR=0 : XR2=0 : XD=0 : XD2=SCR_W : L=0 : ST=0 : FIN=0 : RST=0 : RFIN=0 : RL=0
FI=Length(PBANK)
Gosub POS_SET
RENDERING=True
Gosub _DRAW
Gosub FRESHSEL
RENDERING=False
Gosub _SHOWALL
Return 
'
_COPYSET:
Gosub SET_PBANK
Gosub SETCORDS
If M0DE=2
   CLENGTHN=RL*2
   CCOUNTN=1
Else If M0DE=3
   CLENGTHN=RL*4
   CCOUNTN=3
Else 
   CLENGTHN=RL
   CCOUNTN=0
End If 
Return 
'
_UNDO:
If Length(UBANK)=0 Then Goto _NOUNDO
If UB<>B Then Goto _WRONGUNDO
Bank Swap PBANK,UBANK
XR=0 : XR2=0 : XD=0 : XD2=SCR_W : L=0 : ST=0 : FIN=0 : RST=0 : RFIN=0 : RL=0
STA=0 : FI=Length(PBANK)
If M0DE=2
   FI=FI/2
Else If M0DE=4
   FI=FI/4
End If 
Gosub POS_CAL
RENDERING=True
Gosub _DRAW
RENDERING=False
Gosub _SHOWALL
Return 
'
_UNDOSET:
Gosub _CLEARUNDO
Trap Reserve As Work UBANK,Length(PBANK)
If Errtrap Then Return 
Copy Start(PBANK),Start(PBANK)+Length(PBANK) To Start(UBANK)
UB=B
Return 
'  
_CLEARCOPY:
Erase CBANK
Return 
'
_CLEARWORK:
Erase WBANK
Return 
'
_CLEARUNDO:
Erase UBANK
Return 
'
_RESIZED:
Gosub _CLEARWORK
FI=Length(PBANK)
If M0DE=2
   FI=FI/2
Else If M0DE=3
   FI=FI/4
End If 
If M0DE=4
   D_LENGTH(B)=Length(B+7)
   If D_LENGTH(B)>0
      ADV#(B)=(D_LENGTH(B)-ST-FIN)/SCR_W#
      D_START(B)=Start(B+7)+ST
   Else 
      ADV#(B)=0
   End If 
End If 
Gosub SETCORDS
Gosub HEADERCORDS
Gosub DRWTIME
Return 
'
'
'
'***************************************************************************** 
'*mix************************************************************************* 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'    .        :   :::  :.,::      .:.
'    ;;,.    ;;;  ;;;   `;;;,  .,;;
'    [[[[, ,[[[[, [[[      '[[,,[['
'    $$$$$$$$"$$$ $$$,      Y$$$P
'   888 Y88" 888oo88888   oP"``"Yo,
'   MM  M'  "MMMMMMM"MM,m"       "Mm,
'
'
'
_MIXBUT:
Gosub _MIX
RENDERING=True
Gosub _DRAW
Gosub FRESHSEL
RENDERING=False
Return 
'
_MIX:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
FX_LENGTH2=Length(CBANK)
If FX_LENGTH2=0 Then Goto _NOCOPY
Gosub _UNDOSET
FX_START2=Start(CBANK)
Dec FX_LENGTH2
FX2=0
Repeat 
   CN=Peek(FX)
   CN2=Peek(FX_START2+FX2)
   Gosub SIGN2
   If CN<0 and CN2<0
      CN=(CN+CN2)-((CN*CN2)/-127)
   Else If CN>0 and CN2>0
      CN=(CN+CN2)-((CN*CN2)/127)
   Else 
      Add CN,CN2
   End If 
   Inc FX2
   If FX2>FX_LENGTH2
      If _LPMIX
         FX2=0
      Else 
         FX=FXE
      End If 
   End If 
   Gosub UNSIGN
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
_ADD:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
FX_LENGTH2=Length(CBANK)
If FX_LENGTH2=0 Then Goto _NOCOPY
Gosub _UNDOSET
FX_START2=Start(CBANK)
FX2=0
Repeat 
   CN=Peek(FX)
   CN2=Peek(FX_START2+FX2)
   Gosub SIGN2
   CN=CN+CN2
   FX2=FX2+1
   If FX2>FX_LENGTH2
      If _LPMIX
         FX2=0
      Else 
         FX=FXE
      End If 
   End If 
   Gosub UNSIGN
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
_SUBTRACT:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
FX_LENGTH2=Length(CBANK)
If FX_LENGTH2=0 Then Goto _NOCOPY
Gosub _UNDOSET
FX_START2=Start(CBANK)
FX2=0
Repeat 
   CN=Peek(FX)
   CN2=Peek(FX_START2+FX2)
   Gosub SIGN2
   CN=CN-CN2
   FX2=FX2+1
   If FX2>FX_LENGTH2
      If _LPMIX
         FX2=0
      Else 
         FX=FXE
      End If 
   End If 
   Gosub UNSIGN
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
_MODULATE:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
FX_LENGTH2=Length(CBANK)
If FX_LENGTH2=0 Then Goto _NOCOPY
Gosub _UNDOSET
FX_START2=Start(CBANK)
FX2=0
Repeat 
   CN=Peek(FX)
   CN2=Peek(FX_START2+FX2)
   Gosub SIGN2
   CN#=CN2
   CN#=CN#/127
   CN=CN*CN#
   Inc FX2
   If FX2>FX_LENGTH2
      If _LPMIX
         FX2=0
      Else 
         FX=FXE
      End If 
   End If 
   Gosub UNSIGN
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
_INTERLEAVE:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
FX_LENGTH2=Length(CBANK)
_SELF=False
If FX_LENGTH2=0
   RST=Length(PBANK)/2
   RL=Length(PBANK)/2
   XR=SCR_W/2 : XR2=SCR_W
   Gosub SETCORDS
   Gosub _CUT
   _SELF=True
   Gosub SET_PBANK
   FX_LENGTH2=Length(CBANK)
End If 
Gosub _UNDOSET
FX_START2=Start(CBANK)
FX2=0 : FX3=0
Trap Reserve As Work WBANK,Length(PBANK)*2
If Errtrap Then Goto _NOMEMORY
FX_START3=Start(WBANK)
Repeat 
   CN=Peek(FX)
   CN2=Peek(FX_START2+FX2)
   Gosub SIGN2
   Inc FX2
   If FX2>FX_LENGTH2
      If _LPMIX
         FX2=0
      Else 
         FX=FXE
      End If 
   End If 
   Gosub UNSIGN2
   Poke FX_START3+FX3,CN
   Inc FX3
   Poke FX_START3+FX3,CN2
   Inc FX3
   Inc FX
Until FX>FXE
Bank Swap PBANK,WBANK
If _SELF
   Gosub _CLEARCOPY
Else 
   Gosub _RESIZED
End If 
Return 
'
_XOR:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
FX_LENGTH2=Length(CBANK)
If FX_LENGTH2=0 Then Goto _NOCOPY
Gosub _UNDOSET
FX_START2=Start(CBANK)
FX2=0
Repeat 
   CN=Peek(FX)
   CN2=Peek(FX_START2+FX2)
   Gosub SIGN2
   CN=CN xor CN2
   FX2=FX2+1
   If FX2>FX_LENGTH2
      If _LPMIX
         FX2=0
      Else 
         FX=FXE
      End If 
   End If 
   Gosub UNSIGN
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
'
'
'***************************************************************************** 
'*frame************************************************************************* 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'    .-:::::':::::::..    :::.      .        :  .,:::::: 
'    ;;;'''',;;;;``;;;;   ;;`;;     ;;,.    ;;; ;;;;'''' 
'    [[[,,==[\[[[,/[[['  ,[[ '[[,   [[[[, ,[[[[, [[cccc
'    `$$$"``""$$$$$$c   c$$$cc$$$c  $$$$$$$$"$$$ $$""""
'   _ 888    ,888b "88bo 888   888,888 Y88" 888o 888oo,_ 
'   MM"MM,   "MMMM   "W" YMM   ""` MM  M'  "MMMM """"YUM 
'
'
'
_SAMPLELEFT:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
FX_LENGTH2=1 : RemFX_LENGTH/16
LEFT:
Trap Reserve As Work WBANK,FX_LENGTH2
If Errtrap Then Goto _NOMEMORY
Gosub _UNDOSET
Copy FX,FX+FX_LENGTH2 To Start(WBANK)
Copy FX+FX_LENGTH2,FXE To FX
Copy Start(WBANK),Start(WBANK)+FX_LENGTH2 To FXE-FX_LENGTH2
Gosub _CLEARWORK
REQ=True
Return 
'
_SAMPLERIGHT:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
FX_LENGTH2=1
RIGHT:
Trap Reserve As Work WBANK,FX_LENGTH2
If Errtrap Then Goto _NOMEMORY
Gosub _UNDOSET
Copy FXE-FX_LENGTH2,FXE To Start(WBANK)
Copy FX,FXE-FX_LENGTH2 To FX+FX_LENGTH2
Copy Start(WBANK),Start(WBANK)+FX_LENGTH2 To FX
Gosub _CLEARWORK
REQ=True
Return 
'
_BEATLEFT:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
FX_LENGTH2=FX_LENGTH/16
Goto LEFT
'
_BEATRIGHT:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
FX_LENGTH2=FX_LENGTH/16
Goto RIGHT
'
'
'
'***************************************************************************** 
'*volume********************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'   :::      .::.    ...       :::     ...    ::: .        :  .,:::::: 
'   ';;,   ,;;;'  .;;;;;;;.    ;;;    ';;     ;;; ;;,.    ;;; ;;;;'''' 
'    \[[  .[[/   ,[[     \[[,  [[[    [['     [[[ [[[[, ,[[[[, [[cccc  
'     Y$c.$$"    $$$,     $$$  $$'    $$      $$$ $$$$$$$$"$$$ $$""""  
'      Y88P      "888,_ _,88Po88oo,.__88    .d888888 Y88" 888o 888oo,_ 
'       MP         "YMMMMMP" """YUMMMM "YmmMMMM""MM  M'  "MMMM """"YUM 
'  
'
'
_VOLUME:
Gosub SETREALTIME
If _SHOW
   Inc PASS
   If PASS<2
      Gosub SET_PBANK
      If FX_LENGTH<2
         Goto FLSHSCR
      End If 
      CHAIN$(1)="_VOLUMEP"
      Gosub _OPENFXWIN
      FXN=VN : FXSN=VN : FXS$="%" : Gosub FXDRW
      FXRUN$="VODRW"
      Gosub _RUNFXWIN
   End If 
   If Not REQ
      Return 
   End If 
End If 
_VOLUMEP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Gosub _UNDOSET
Repeat 
   CN=Peek(FX)
   Gosub SIGN
   CN=Int(CN*VA#)
   Gosub UNSIGN
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
VODRW:
VN=FXN
VA#=VN*0.01
FXSN=VN
Return 
'
_FADEIN:
CN2=0
Goto _FADE
_FADEOUT:
CN2=1
_FADE:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
DIV#=FX_LENGTH/100.0
If DIV#=0 Then Goto FLSHSCR
Gosub _UNDOSET
FX2=FX_LENGTH*CN2
Repeat 
   CN=Peek(FX)
   Gosub SIGN
   CN#=(FX2/DIV#)/100.0
   CN=Int(CN*CN#)
   Gosub UNSIGN
   Poke FX,CN
   Inc FX
   If CN2=0
      Inc FX2
   Else 
      Dec FX2
   End If 
Until FX>FXE
Return 
'
_HALF:
VA#=0.5
Goto _VOLUMEP
'
_DOUBLE:
VA#=2.0
Goto _VOLUMEP
'
_SILENCE:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Gosub _UNDOSET
Fill FX To FXE,0
FX=FXE
Return 
'
_MAXIMIZE:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
CN2=0
Repeat 
   CN=Peek(FX)
   Gosub SIGN
   If CN>CN2
      CN2=CN
   Else If CN<0 and CN<-CN2
      CN2=-CN
   End If 
   Inc FX
Until FX>FXE
If CN2=0 or CN2=127 Then Return 
VA#=127.0/CN2
Goto _VOLUMEP
'
_EXPAND:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Gosub _UNDOSET
Repeat 
   CN=Peek(FX)
   If CN>127 Then Dec CN Else Inc CN
   Gosub UNCHECKCLIP
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
_CONTRACT:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Gosub _UNDOSET
Repeat 
   CN=Peek(FX)
   If CN>127 Then Inc CN Else Dec CN
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
_DCOFFSET:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Gosub _OPENFXWIN
REALTIME=False
TXT1$="-127 to 127:"
Gosub _RUNFXTEXTWIN
CN=Val(T$)
If T$="" or CN=0 and REQ
   REQ=False
   Gosub FLSHSCR
End If 
If Not REQ Then Return 
Gosub CHECKCLIP
_DCOFFSETN=CN
_DCOFFSETP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Gosub _UNDOSET
Repeat 
   CN=Peek(FX)
   Gosub SIGN
   CN=CN+_DCOFFSETN
   Gosub UNSIGN
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
'
'
'***************************************************************************** 
'*resample******************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'   :::::::..  .,:::::: .::::::.   :::.      .        :  ::::::::.   :::    .,:::: 
'   ;;;;``;;;; ;;;;'''';;;`    `;  ;;`;;     ;;,.    ;;; `;;```.;;;  ;;;    ;;;;'' 
'   \[[[,/[[['  [[cccc '[==/[[[[, ,[[ '[[,   [[[[, ,[[[[,`]]nnn]]'   [[[     [[ccc 
'   "$$$$$$c    $$""""   '''    $c$$$cc$$$c  $$$$$$$$"$$$ $$$""      $$'     $$""" 
'   ,888b "88bo 888oo,_,88b    dP 888   888,888 Y88" 888o 888o     o88oo,.__ 888oo 
'   "MMMM   "W" """"YUM  "YMmMY"  YMM   ""` MM  M'  "MMMM YMMMb    """YUMMMM """"Y 
'  
'
'
_SCALESAMPLE:
N#=N2#/N#
FX_LENGTH2=Int(FX_LENGTH/N#)
If FX_LENGTH2<2 Then Goto FLSHSCR
If RL<2
   MIX=False
Else 
   MIX=True
End If 
Trap Reserve As Work WBANK,FX_LENGTH2
If Errtrap Then Goto _NOMEMORY
Gosub _UNDOSET
FX_START2=Start(WBANK)
FX2=0
FX3=FX_START2
FXE2=FX_START2+FX_LENGTH2-1
CN#=N#
Repeat 
   CN=Int(CN#)
   CN#=FX2*N#
   FX=FX_START+CN
   CN=Peek(FX)
   Poke FX3,CN
   Inc FX2 : Inc FX3
Until FX3>=FXE2 or FX=FXE
FX=FXE
If MIX
   If RL>FX_LENGTH2
      RL=FX_LENGTH2
   End If 
   Gosub _SILENCE
   _LPMIX=False
   Bank Swap CBANK,WBANK
   Gosub _MIX
Else 
   Bank Swap PBANK,WBANK
End If 
Gosub _RESIZED
Return 
'
_RESAMPLE:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Gosub _OPENFXWIN
REALTIME=False
BTXT1$="Piano" : BX=270 : BY=73 : BZN=48 : Gosub BUTTON
T$="" : _EXIT=False : KDOWN=False
Repeat 
   If CK=65 and N>0
      N=N-1
      T$=Mid$(T$,0,N)
   End If 
   Ink _BLACK,_WHITE
   TXT1$="From "+Str$(FREQ)-" "+":"
   Text X+340-Text Length(TXT1$),Y+68,TXT1$+T$+"_ "
   Repeat 
      Gosub GVAL
      If Z=48 and M<>0
         If Not KDOWN
            BX=270 : BY=73 : Gosub HIGHLIGHT
            N=0
            T$=""
            KDOWN=True
         End If 
         If C>0
            Gosub PIANO
            If KEYC<>-1
               T$=Str$(KEYF)-" "
               N=Len(T$)
            End If 
         End If 
      Else If A>33 and A<127
         T$=T$+K$
         N=N+1
      End If 
      If KDOWN and M=0
         BX=270 : BY=73 : Gosub HIGHLIGHT
         KDOWN=False
      Else If Z=60 and M=1 or A=13
         BX=RX+2 : BY=89 : Gosub PRESS
         REQ=True
         _EXIT=True
      Else If Z=61 and M=1 or A=27
         BX=RX+108 : BY=89 : Gosub PRESS
         REQ=False
         _EXIT=True
      End If 
   Until _EXIT or C<>0
Until _EXIT
Gosub WIND0WC
Reset Zone 48
If Not REQ Then Return 
_RESAMPLEP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
N#=FREQ
N2#=Val(T$)
If N2#=0 or A=27 Then Goto FLSHSCR
Goto _SCALESAMPLE
'
_RESIZE:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Gosub _OPENFXWIN
REALTIME=False
TXT1$="From "+Str$(FX_LENGTH)-" "+":"
Gosub _RUNFXTEXTWIN
If Not REQ Then Return 
_RESIZEP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
N=Val(T$)
If N<2 or A=27 Then Goto FLSHSCR
N#=N
N2#=FX_LENGTH
Goto _SCALESAMPLE
'  
_REBPM:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Gosub _OPENFXWIN
REALTIME=False
DIV#=FREQ
DIV#=((DIV#/Length(PBANK))*60)*4
TXT1$="From "+Str$(DIV#)-" "+":"
Gosub _RUNFXTEXTWIN
If Not REQ Then Return 
_REBPMP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
N#=DIV#
N2#=Val(T$)
If N2#<2 or A=27 Then Goto FLSHSCR
Goto _SCALESAMPLE
'
_16BITTO8BIT:
_OCTAVEUP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Gosub _UNDOSET
If RL<2
   MIX=False
   Trap Reserve As Work WBANK,FX_LENGTH/2
   If Errtrap
      Goto _NOMEMORY
   End If 
Else 
   MIX=True
End If 
FX2=0
Repeat 
   CN=Int(Deek(FX)/256.0)
   Poke FX_START+FX2,CN
   Inc FX2
   Inc FX : Inc FX
Until FX>FXE
If MIX
   RFIN=Length(PBANK)-RST-(RL/2)
Else 
   Copy FX_START,FX_START+FX2 To Start(WBANK)
   Bank Swap PBANK,WBANK
   Gosub _RESIZED
End If 
Return 
'
_OCTAVEDOWN:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Gosub _UNDOSET
If RL<2
   MIX=False
Else 
   MIX=True
End If 
Trap Reserve As Work WBANK,FX_LENGTH*2
If Errtrap Then Goto _NOMEMORY
FX_START2=Start(WBANK)
FX2=0
Repeat 
   If FX>0 Then CNL=Peek(FX-1)
   CN=Peek(FX)
   If FX<FXE Then CN2=Peek(FX+1)
   If FX<FXE-1 Then CNR=Peek(FX+2)
   A0=CNR-CN2-CNL+CN
   A1=CNL-CN-A0
   A2=CN2-CNL
   A3=CN
   Gosub SIGN
   CN2=A0+A1+A2+A3
   Poke FX_START2+FX2,CN : Inc FX2
   Poke FX_START2+FX2,CN2 : Inc FX2
   Inc FX
Until FX>FXE
If MIX
   _LPMIX=False
   If RST+(RL*2)>Length(PBANK)
      RL=Length(PBANK)-RST
   End If 
   RFIN=Length(PBANK)-RST-(RL*2)
   Gosub _SILENCE
   Bank Swap CBANK,WBANK
   Gosub _MIX
Else 
   Bank Swap PBANK,WBANK
   Gosub _RESIZED
End If 
Return 
'
_NOTEUP:
PFREQ=FREQ
FREQ=16730
T$="17734"
Gosub _RESAMPLEP
FREQ=PFREQ
Return 
'
_NOTEDOWN:
PFREQ=FREQ
FREQ=17734
T$="16730"
Gosub _RESAMPLEP
FREQ=PFREQ
Return 
'
_FINEUP:
T$=Str$(FREQ+50)-" "
Gosub _RESAMPLEP
Return 
'  
_FINEDOWN:
T$=Str$(FREQ-50)-" "
Gosub _RESAMPLEP
Return 
'
'
'
'***************************************************************************** 
'*filter********************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'    .-:::::' :::    :::    ::::::::::.,:::::::::::::..  
'    ;;;'''', ;;;    ;;;    ;;;;;;;''';;;;'''';;;;``;;;; 
'    [[[,,==[ [[[    [[[        [[     [[cccc \[[[,/[[[' 
'    `$$$"``" $$$,   $$'        $$     $$"""" "$$$$$$c 
'   _ 888    o88888o88oo,.__    88,    888oo,_,888b "88bo  
'   MM"MM,   MMM"MM"""YUMMMM    MMM    """"YUM"MMMM   "W"  
'  
'
'
_HIGHPASS:
Gosub SETREALTIME
If _SHOW
   Inc PASS
   If PASS<2
      Gosub SET_PBANK
      If FX_LENGTH<2
         Goto FLSHSCR
      End If 
      For FXBC=1 To 4
         HBUF(FXBC)=0
      Next FXBC
      CHAIN$(1)="_HIGHPASSP"
      Gosub _OPENFXWIN
      FXN=HIGHN : FXSN=HIGHF : FXS$="hz" : Gosub FXDRW
      Gosub HISET
      FXRUN$="HIDRW"
      Gosub _RUNFXWIN
   End If 
   If Not REQ
      Return 
   End If 
End If 
_HIGHPASSP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   CN2=HBUF(_CHANNEL)
   Gosub SIGN2
   CN2=-CN2
   CN#=CN2+(ALPHA#*(CN-CN2))*(ALPHA#*2)
   CN=Int(CN#)
   Gosub UNSIGN
   Poke FX,CN
   HBUF(_CHANNEL)=CN
   Inc FX
Until FX>FXE
Return 
'
HISET:
HIGHF=HIGHN*50
If HIGHF<100 Then HIGHF=100
RC#=1.0/(HIGHF*2*Pi#)
DT#=1.0/FREQ
ALPHA#=DT#/(RC#+DT#)
Return 
'
HIDRW:
HIGHN=FXN
Gosub HISET
FXSN=HIGHF
Return 
'  
_LOWPASS:
Gosub SETREALTIME
If _SHOW
   Inc PASS
   If PASS<2
      Gosub SET_PBANK
      If FX_LENGTH<2
         Goto FLSHSCR
      End If 
      For FXBC=1 To 4
         LBUF(FXBC)=0
      Next FXBC
      CHAIN$(1)="_LOWPASSP"
      Gosub _OPENFXWIN
      FXN=LOWN : FXSN=LOWF : FXS$="hz" : Gosub FXDRW
      Gosub LOSET
      FXRUN$="LODRW"
      Gosub _RUNFXWIN
   End If 
   If Not REQ
      Return 
   End If 
End If 
_LOWPASSP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   CN2=LBUF(_CHANNEL)
   Gosub SIGN2
   CN#=CN2+(ALPHA#*(CN-CN2))
   CN=Int(CN#)
   Gosub UNSIGN
   Poke FX,CN
   LBUF(_CHANNEL)=Peek(FX)
   Inc FX
Until FX>FXE
Return 
'
LOSET:
LOWF=(FREQ/(201-LOWN))/2
RC#=1.0/(LOWF*2*Pi#)
DT#=1.0/FREQ
ALPHA#=DT#/(RC#+DT#)
Return 
'  
LODRW:
LOWN=FXN
Gosub LOSET
FXSN=LOWF
Return 
'  
_BANDPASS:
Gosub SETREALTIME
If _SHOW
   Inc PASS
   If PASS<2
      Gosub SET_PBANK
      If FX_LENGTH<2
         Goto FLSHSCR
      End If 
      For FXBC=1 To 4
         BBUF0(FXBC)=0
         BBUF1(FXBC)=0
      Next FXBC
      CHAIN$(1)="_BANDPASSP"
      Gosub _OPENFXWIN
      FXN=BANDN : FXSN=BANDF : FXS$="hz" : Gosub FXDRW
      Gosub BPSET
      FXRUN$="BPDRW"
      Gosub _RUNFXWIN
   End If 
   If Not REQ
      Return 
   End If 
End If 
_BANDPASSP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   CN2=BBUF0(_CHANNEL)
   CN3=BBUF1(_CHANNEL)
   Gosub SIGN3
   CN2=-CN2
   CN3=-CN3
   CN#=CN2+(ALPHA#*(CN-CN2))*ALPHA#
   CN2#=CN3+(ALPHA#*(CN2-CN3))*ALPHA#
   CN=Int(CN#-CN2#)
   Gosub UNSIGN
   Poke FX,CN
   BBUF0(_CHANNEL)=CN
   BBUF1(_CHANNEL)=CN2
   Inc FX
Until FX>FXE
Return 
'
BPSET:
BANDF=BANDN*50
If BANDF<100 Then BANDF=100
RC#=1.0/(BANDF*2*Pi#)
DT#=1.0/FREQ
ALPHA#=DT#/(RC#+DT#)
Return 
'
BPDRW:
BANDN=FXN
Gosub BPSET
FXSN=BANDF
Return 
'
_RESONANT:
Gosub SETREALTIME
If _SHOW
   Inc PASS
   If PASS<2
      Gosub SET_PBANK
      If FX_LENGTH<2
         Goto FLSHSCR
      End If 
      For FXBC=1 To 4
         RBUF0#(FXBC)=0.0
      Next FXBC
      CHAIN$(1)="_RESONANTP"
      Gosub _OPENFXWIN
      Gosub DIARES
      FXRUN$=""
      Gosub _RUNFXWIN
   End If 
   If Not REQ
      Return 
   End If 
End If 
_RESONANTP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   Gosub FLOAT
   CN2#=RBUF0#(_CHANNEL) : CN3#=RBUF1#(_CHANNEL)
   CN2#=CN2#+_RF#*(CN#-CN2#+_RFB#*(CN2#-CN3#))
   CN3#=CN3#+_RF#*(CN2#-CN3#)
   RBUF0#(_CHANNEL)=CN2# : RBUF1#(_CHANNEL)=CN3#
   CN#=CN3#
   Gosub UNFLOAT
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'  
RESET:
_RF#=RESN/200.0
_RFB#=_RQ#+_RQ#/(1.01-_RF#)
Return 
'  
_SMOOTH:
Gosub SETREALTIME
If _SHOW and PLYING
   Inc PASS
   If PASS<2
      Gosub SET_PBANK
      If FX_LENGTH<2
         Goto FLSHSCR
      End If 
      For FXBC=1 To 4
         SMOBUF(FXBC)=0
      Next FXBC
      CHAIN$(1)="_SMOOTHP"
      Gosub _OPENFXSMALLWIN
      Gosub _RUNFXWIN
   End If 
   If Not REQ
      Return 
   End If 
End If 
_SMOOTHP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   CN2=SMOBUF(_CHANNEL)
   Gosub SIGN2
   CN=(CN+CN2)/2
   Gosub UNSIGN
   Poke FX,CN
   SMOBUF(_CHANNEL)=CN
   Inc FX
Until FX>FXE
Return 
'
_WAVESHAPER:
Gosub SETREALTIME
If _SHOW and PLYING
   Inc PASS
   If PASS<2
      Gosub SET_PBANK
      If FX_LENGTH<2
         Goto FLSHSCR
      End If 
      CHAIN$(1)="_WAVESHAPERP"
      Gosub _OPENFXSMALLWIN
      Gosub _RUNFXWIN
   End If 
   If Not REQ
      Return 
   End If 
End If 
_WAVESHAPERP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   Gosub FLOAT
   CN#=Sin(CN#)
   CN#=CN#*CN#*CN#
   Gosub UNFLOAT
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
_BEZIER:
Gosub SETREALTIME
If _SHOW and PLYING
   Inc PASS
   If PASS<2
      Gosub SET_PBANK
      If FX_LENGTH<2
         Goto FLSHSCR
      End If 
      CHAIN$(1)="_BEZIERP"
      Gosub _OPENFXSMALLWIN
      Gosub _RUNFXWIN
   End If 
   If Not REQ
      Return 
   End If 
End If 
_BEZIERP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   CN#=CN/256.0
   CN#=(CN#*CN#)*(3.0-(2.0*CN#))
   CN#=CN#*256.0
   CN=Int(CN#)
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
_PARABOLIC:
Gosub SETREALTIME
If _SHOW and PLYING
   Inc PASS
   If PASS<2
      Gosub SET_PBANK
      If FX_LENGTH<2
         Goto FLSHSCR
      End If 
      CHAIN$(1)="_PARABOLICP"
      Gosub _OPENFXSMALLWIN
      Gosub _RUNFXWIN
   End If 
   If Not REQ
      Return 
   End If 
End If 
_PARABOLICP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   CN#=CN/256.0
   SQ#=CN#*CN#
   CN#=SQ#/(2.0*(SQ#-CN#)+1.0)
   CN#=CN#*256.0
   CN=Int(CN#)
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'  
'
'
'***************************************************************************** 
'*distort********************************************************************* 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'   ::::::-.   :::   .::::::. ::::::::::    ...     :::::::..  ::::::::::  
'   ;;,   `';, ;;;  ;;;`    `;;;;;;;;''' .;;;;;;;.  ;;;;``;;;; ;;;;;;;'''  
'   `[[     [[ [[[  '[==/[[[[,    [[    ,[[     \[[,\[[[,/[[['     [[  
'    $$,    $$ $$$,   '''    $    $$    $$$,     $$$"$$$$$$c       $$  
'    888_,o8P'o88888,88b    dP    88,   "888,_ _,88P,888b "88bo    88, 
'   "MMMMP"`  MMM"MM  "YMmMY"     MMM     "YMMMMMP" "MMMM   "W"    MMM 
'
'
'
_TUBE:
Gosub SETREALTIME
If _SHOW
   Inc PASS
   If PASS<2
      Gosub SET_PBANK
      If FX_LENGTH<2
         Goto FLSHSCR
      End If 
      CHAIN$(1)="_TUBEP"
      Gosub _OPENFXWIN
      FXN=TUBEN : FXSN=TUBEN : FXS$="%" : Gosub FXDRW
      FXRUN$="TUDRW"
      Gosub _RUNFXWIN
   End If 
   If Not REQ
      Return 
   End If 
End If 
_TUBEP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   Gosub FLOAT
   If TUBEV#-CN#<>0
      CN#=CN#/(TUBEV#-CN#)
   Else 
      CN#=0
   End If 
   Gosub UNFLOAT
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
TUDRW:
TUBEN=FXN
TUBEV#=(200-TUBEN)/100.0
FXSN=TUBEN
Return 
'
_SATURATION:
Gosub SETREALTIME
If _SHOW
   Inc PASS
   If PASS<2
      Gosub SET_PBANK
      If FX_LENGTH<2
         Goto FLSHSCR
      End If 
      CHAIN$(1)="_SATURATIONP"
      Gosub _OPENFXWIN
      FXN=SATN : FXSN=SATN : FXS$="%" : Gosub FXDRW
      FXRUN$="SADRW"
      Gosub _RUNFXWIN
   End If 
   If Not REQ
      Return 
   End If 
End If 
_SATURATIONP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   Gosub FLOAT
   CN#=((1.1+SATV#)*CN#)-(0.2+SATV#*CN#)*CN#*CN#*CN#
   Gosub UNFLOAT
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
SADRW:
SATN=FXN
SATV#=SATN/100.0
FXSN=SATN
Return 
'
_OVERDRIVE:
Gosub SETREALTIME
If _SHOW and PLYING
   Inc PASS
   If PASS<2
      Gosub SET_PBANK
      If FX_LENGTH<2
         Goto FLSHSCR
      End If 
      CHAIN$(1)="_OVERDRIVEP"
      Gosub _OPENFXSMALLWIN
      Gosub _RUNFXWIN
   End If 
   If Not REQ
      Return 
   End If 
End If 
_OVERDRIVEP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   Gosub FLOAT
   If CN#<0 Then CN#=1-Exp(-CN#) Else CN#=-1+Exp(CN#)
   Gosub UNFLOAT
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
_ALIAS:
Gosub SETREALTIME
If _SHOW
   Inc PASS
   If PASS<2
      Gosub SET_PBANK
      If FX_LENGTH<2
         Goto FLSHSCR
      End If 
      CHAIN$(1)="_ALIASP"
      Gosub _OPENFXWIN
      FXN=ALIN : FXSN=ALIN : FXS$="b" : Gosub FXDRW
      FXRUN$="ALDRW"
      Gosub _RUNFXWIN
   End If 
   If Not REQ
      Return 
   End If 
End If 
_ALIASP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
ALIN2=ALIN
Repeat 
   If ALIN2<0
      ALIN2=ALIN
      CN=Peek(FX)
   End If 
   Dec ALIN2
   CN2=CN
   Poke FX,CN2
   Inc FX
Until FX>FXE
Return 
'
ALDRW:
ALIN=Int(FXN/1.5873)+2
FXSN=ALIN
Return 
'
_FOLD:
Gosub SETREALTIME
If _SHOW
   Inc PASS
   If PASS<2
      Gosub SET_PBANK
      If FX_LENGTH<2
         Goto FLSHSCR
      End If 
      CHAIN$(1)="_FOLDP"
      Gosub _OPENFXWIN
      FXN=FOLDN : FXSN=FOLDN : FXS$="%" : Gosub FXDRW
      FXRUN$="FODRW"
      Gosub _RUNFXWIN
   End If 
   If Not REQ
      Return 
   End If 
End If 
If FOLDN<1
   Return 
End If 
_FOLDP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   Gosub FLOAT
   If CN#>FOLDV#
      CN#=FOLDV#-(CN#-FOLDV#)
   End If 
   If CN#<-FOLDV#
      CN#=-FOLDV#+(-FOLDV#-CN#)
   End If 
   Gosub UNFLOAT
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
FODRW:
FOLDN=FXN
FOLDV#=FOLDN/256.0
FXSN=FOLDN
Return 
'  
'
'
'***************************************************************************** 
'*effects********************************************************************* 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'   .,:::::: .-:::::' .-:::::'.,::::::  .,-:::::::::::::::: .::::::.     
'   ;;;;'''' ;;;'''', ;;;'''',;;;;'''',;;;'````' ;;;;;;;''';;;`    `;    
'    [[cccc  [[[,,==[ [[[,,==[ [[cccc [[[            [[    '[==/[[[[,  
'    $$""""  `$$$"``" `$$$"``" $$"""" $$$            $$      '''    $  
'    888oo,__ 888    _ 888     888oo,_`88bo,__,o,    88,   ,88b    dP  
'    """"YUMMM"MM,   MM"MM,    """"YUM  "YUMMMMMP    MMM     "YMmMY"   
'
'                                                              
'
_PHASE:
Gosub SETREALTIME
If _SHOW
   Inc PASS
   If PASS<2
      Gosub SET_PBANK
      If FX_LENGTH<2
         Goto FLSHSCR
      End If 
      Gosub FXBUFFER
      For FXBC=1 To 4
         PHBUF#(FXBC)=0.0
         PHBUF0(FXBC)=Start(_CURRENT-FXBC)
         PHBUF1(FXBC)=PHBUF0(FXBC)
      Next FXBC
      CHAIN$(1)="_PHASEP"
      Gosub _OPENFXWIN
      FXN=PHAN : FXSN=PHAN : FXS$="%" : Gosub FXDRW
      FXRUN$="PHDRW"
      Gosub _RUNFXWIN
   End If 
   If Not REQ
      Return 
   End If 
   Gosub FXBUFFERC
End If 
_PHASEP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   CN2=Peek(PHBUF0(_CHANNEL))
   Poke PHBUF0(_CHANNEL),CN
   Gosub SIGN2
   CN#=(CN2*0.6)+PHBUF#(_CHANNEL)
   CN2=Int(CN#)
   PHBUF#(_CHANNEL)=CN#-CN2
   If CN<0 and CN2<0
      CN=(CN+CN2)-((CN*CN2)/-127)
   Else If CN>0 and CN2>0
      CN=(CN+CN2)-((CN*CN2)/127)
   Else 
      CN=CN+CN2
   End If 
   Gosub UNSIGN
   Poke PHBUF0(_CHANNEL),CN
   Poke FX,CN
   Inc FX
   Inc PHBUF0(_CHANNEL)
   If PHBUF0(_CHANNEL)>PHBUF1(_CHANNEL)+PHAN
      PHBUF0(_CHANNEL)=PHBUF1(_CHANNEL)
   End If 
Until FX>FXE
Return 
'
PHDRW:
PHAN=FXN
FXSN=PHAN
Return 
'
_ECHO:
If Not REALTIME
   Inc PASS
   If PASS<2
      WTXT$="Echo"
      Gosub ECHO_WIN
      _ECHON=_EFFN
      If _ECHON<1 or A=27
         Gosub FLSHSCR
         K$=""
         A=0
         Return 
      End If 
   End If 
Else 
   _ECHON=200
End If 
_ECHOP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
FX=FX+_ECHON
Repeat 
   CN=Peek(FX)
   CN2=Peek(FX-_ECHON)
   Gosub SIGN2
   CN=(CN+CN2)/1.8
   Gosub UNSIGN
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
_REVERB:
Gosub SETREALTIME
If _SHOW
   Inc PASS
   If PASS<2
      Gosub SET_PBANK
      If FX_LENGTH<2
         Goto FLSHSCR
      End If 
      Gosub FXBUFFER
      For FXBC=1 To 4
         RVBUF0(FXBC)=Start(_CURRENT-FXBC)
         RVBUF1(FXBC)=RVBUF0(FXBC)
      Next FXBC
      CHAIN$(1)="_REVERBP"
      Gosub _OPENFXWIN
      FXN=RVN : FXSN=RVN : FXS$="%" : Gosub FXDRW
      FXRUN$="REDRW"
      Gosub _RUNFXWIN
   End If 
   If Not REQ
      Return 
   End If 
   Gosub FXBUFFERC
End If 
_REVERBP:
Gosub SET_PBANK
If FX_LENGTH<2 or _CURRENT=-1 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   CN2=Peek(RVBUF0(_CHANNEL))
   Poke RVBUF0(_CHANNEL),CN
   Gosub SIGN2
   CN#=CN2*RVV#
   CN2=Int(CN#)
   If CN<0 and CN2<0
      CN=(CN+CN2)-((CN*CN2)/-127)
   Else If CN>0 and CN2>0
      CN=(CN+CN2)-((CN*CN2)/127)
   Else 
      CN=CN+CN2
   End If 
   Gosub UNSIGN
   Poke RVBUF0(_CHANNEL),CN
   Poke FX,CN
   Inc FX
   Inc RVBUF0(_CHANNEL)
   If RVBUF0(_CHANNEL)>RVBUF1(_CHANNEL)+(RVN*100)
      RVBUF0(_CHANNEL)=RVBUF1(_CHANNEL)
   End If 
Until FX>FXE
Return 
'
REDRW:
RVN=FXN/2
FXSN=RVN
Return 
'
_TREMOLO:
Gosub SETREALTIME
If _SHOW
   Inc PASS
   If PASS<2
      Gosub SET_PBANK
      If FX_LENGTH<2
         Goto FLSHSCR
      End If 
      FREQ=22050
      For FXBC=1 To 4
         TBUF(FXBC)=0
      Next FXBC
      FX_LENGTH2=Length(PBANK)
      CHAIN$(1)="_TREMOLOP"
      Gosub _OPENFXWIN
      FXN=TREMN : FXSN=TREMN : FXS$="%" : Gosub FXDRW
      FXRUN$="TRDRW"
      Gosub _RUNFXWIN
   End If 
   If Not REQ
      Return 
   End If 
End If 
_TREMOLOP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN2#=(Pi#*2*TREMN#)/FREQ
   CN3#=Sin(CN2#*(TBUF(_CHANNEL)))
   CN=Peek(FX)
   Gosub SIGN
   CN#=CN*CN3#
   CN=Int(CN#)
   Gosub UNSIGN
   Poke FX,CN
   Inc FX
   Inc TBUF(_CHANNEL)
   If TBUF(_CHANNEL)>FX_LENGTH2
      TBUF(_CHANNEL)=0
   End If 
Until FX>FXE
Return 
'
TRDRW:
TREMN=FXN
TREMN#=TREMN/32.0
FXSN=TREMN
Return 
'
_COMPRESSOR:
Gosub SETREALTIME
If _SHOW
   Inc PASS
   If PASS<2
      Gosub SET_PBANK
      If FX_LENGTH<2
         Goto FLSHSCR
      End If 
      Gosub OMSET
      FX2=P_START
      _ENV#=0.0
      CHAIN$(1)="_COMPRESSORP"
      Gosub _OPENFXBIGWIN
      Gosub DIACOMP
      FXRUN$=""
      Gosub _RUNFXWIN
   End If 
   If Not REQ
      Return 
   End If 
End If 
_COMPRESSORP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
If _RMS<22 Then _RMS=22
Repeat 
   SUMM#=0
   COMI=0
   Repeat 
      If FX2+COMI+_OFFSET<P_START+P_LENGTH
         CN#=Peek(FX2+COMI+_OFFSET)
      Else 
         FX2=P_START
         CN#=0
      End If 
      Gosub FLOAT
      SUMM#=SUMM#+(CN#*CN#)
      Inc COMI
   Until COMI>_RMS
   _RMS#=Sqr(SUMM#/_RMS)
   If _RMS#>_ENV#
      _THETA#=_ATT#
   Else 
      _THETA#=_REL#
   End If 
   _ENV#=(1.0-_THETA#)*_RMS#+_THETA#*_ENV#
   _GAIN#=1.0
   If(_ENV#>_THRESHOLD#)
      _GAIN#=_GAIN#-(_ENV#-_THRESHOLD#)*_SLOPE#
   End If 
   CN=Peek(FX)
   Gosub FLOAT
   CN=Int((CN#*_GAIN#)*127.0)
   Gosub UNSIGN
   Poke FX,CN
   Inc FX : Inc FX2
Until FX>FXE
Return 
'  
OMSET:
_THRESHOLD#=_THRESHOLDN#*0.01
_SLOPE#=_SLOPEN#*0.01
_LOOKAHEAD#=_LOOKAHEADN#*0.001
_WINDOW#=_WINDOWN#*0.001
_ATTACK#=_ATTACKN#*0.001
If _ATTACK#<=0 Then _ATTACK#=0.001
_RELEASE#=_RELEASEN#*0.001
If _RELEASE#<=0 Then _RELEASE#=0.001
_ATT#=Exp(-1.0/(FREQ*_ATTACK#))
_REL#=Exp(-1.0/(FREQ*_RELEASE#))
_OFFSET=Int(FREQ*_LOOKAHEAD#)
_RMS=Int(FREQ*_WINDOW#)
Return 
'  
'
'
'***************************************************************************** 
'*bitwise********************************************************************* 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'   :::::::.   :::  ::::::::::.::    .   .:: :::   .::::::. .,:::::: 
'    ;;;'';;'  ;;;  ;;;;;;;'''';;,  ;;  ;;;' ;;;  ;;;`    `;;;;;'''' 
'    [[[__[[\. [[[      [[     '[[, [[, [['  [[[  '[==/[[[[, [[cccc
'    $$""""Y$$ $$$,     $$       Y$c$$$c$P   $$$,   '''    $ $$""""
'   _88o,,od8Po88888    88,       "88"888   o88888,88b    dP 888oo,_ 
'   ""YUMMMP" MMM"MM    MMM        "M "M"   MMM"MM  "YMmMY"  """"YUM 
'
'
'
_ROTATELEFT:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   Rol.b 1,CN
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
_ROTATERIGHT:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   Ror.b 1,CN
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
_SHIFTLEFT:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   Rol.b 1,CN
   Bset 0,CN
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
_SHIFTRIGHT:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
_MSB=False
Repeat 
   CN=Peek(FX)
   _MSB=Btst(7,CN)
   Ror.b 1,CN
   If _MSB
      Bset 7,CN
   Else 
      Bclr 7,CN
   End If 
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
_SHIFTLEFT16BIT:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Deek(FX)
   Rol.b 1,CN
   Bset 0,CN
   Doke FX,CN
   FX=FX+2
Until FX>FXE
Return 
'
_SHIFTRIGHT16BIT:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
_MSB=False
Repeat 
   CN=Deek(FX)
   _MSB=Btst(15,CN)
   Ror.w 1,CN
   If _MSB
      Bset 15,CN
   Else 
      Bclr 15,CN
   End If 
   Doke FX,CN
   FX=FX+2
Until FX>FXE
Return 
'  
'
'
'***************************************************************************** 
'*convert********************************************************************* 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'     .,-::::::    ...     ::.    :::.:::      .::..,:::::::::::::..  :::::::::: 
'   ,;;;'````'  .;;;;;;;.  ;;;;,  `;;;';;,   ,;;;' ;;;;'''';;;;``;;;; ;;;;;;;''' 
'   [[[        ,[[     \[[, [[[[[. '[[ \[[  .[[/    [[cccc \[[[,/[[['     [['    
'   $$$        $$$,     $$$ $$$ "Y$c$$  Y$c.$$"     $$"""" "$$$$$$c       $$ 
'   `88bo,__,o,"888,_ _,88P888    Y88    Y88P       888oo,_,888b "88bo    88,
'     "YUMMMMMP  "YMMMMMP" MM     YM      MP        """"YUM"MMMM   "W"    MMM
'
'
'
_8BITUNSIGNEDTO8BIT:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   Poke FX,Peek(FX)-128
   Inc FX
Until FX>FXE
Return 
'  
'_16BITTO8BIT: 
'_OCTAVEUP:
'  
_16BITTO8BITFLIP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
FX_LENGTH2=Length(PBANK)/2
Trap Reserve As Work WBANK,FX_LENGTH2
If Errtrap Then Goto _NOMEMORY
CN=0
FX2=FX
FXE=FXE-2
Repeat 
   CN3=Varptr(CN)
   CN2=CN3+1
   Poke CN2,Peek(FX) : Inc FX
   Poke CN3,Peek(FX) : Inc FX
   CN=Int(Deek(CN3)/256.0)
   Poke FX2,CN
   Inc FX2
Until FX>FXE
Copy FX_START,FX_START+FX_LENGTH2 To Start(WBANK)
Bank Swap PBANK,WBANK
Gosub _CLEARWORK
Gosub _RESIZED
Return 
'
_32BITTO8BIT:
If Not MATH Then Goto _NOMATH
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
FX_LENGTH2=Length(PBANK)/4
Trap Reserve As Work WBANK,FX_LENGTH2
If Errtrap Then Goto _NOMEMORY
CN=0 : CN#=0
FX2=FX
FXE=FXE-4
Repeat 
   CN3=Varptr(CN)
   CN2=Varptr(CN#)
   Poke CN3+3,Peek(FX) : Inc FX
   Poke CN3+2,Peek(FX) : Inc FX
   Poke CN3+1,Peek(FX) : Inc FX
   Poke CN3,Peek(FX) : Inc FX
   Dreg(0)=CN
   CN=Lib Call(1,-108)
   Loke CN2,Leek(CN3)
   CN=Int(CN#*127.0)
   Poke FX2,CN
   Inc FX2
Until FX>FXE
Copy FX_START,FX_START+FX_LENGTH2 To Start(WBANK)
Bank Swap PBANK,WBANK
Gosub _CLEARWORK
Gosub _RESIZED
Return 
'
_32BITTO16BIT:
If Not MATH Then Goto _NOMATH
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
FX_LENGTH2=Length(PBANK)/2
Trap Reserve As Work WBANK,FX_LENGTH2
If Errtrap Then Goto _NOMEMORY
CN=0 : CN#=0
FX2=0
FXE=FXE-2
Repeat 
   CN3=Varptr(CN)
   CN2=Varptr(CN#)
   Poke CN3+3,Peek(FX) : Inc FX
   Poke CN3+2,Peek(FX) : Inc FX
   Poke CN3+1,Peek(FX) : Inc FX
   Poke CN3,Peek(FX) : Inc FX
   Dreg(0)=CN
   CN=Lib Call(1,-108)
   Loke CN2,Leek(CN3)
   CN=Int(CN#*32767.0)
   Doke FX_START+FX2,CN
   Add FX2,2
Until FX>FXE
Copy FX_START,FX_START+FX_LENGTH2 To Start(WBANK)
Bank Swap PBANK,WBANK
Gosub _CLEARWORK
Gosub _RESIZED
Return 
'
_DEINTERLEAVE:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Trap Reserve As Work WBANK,FX_LENGTH/2
If Errtrap Then Goto _NOMEMORY
FX_START2=Start(WBANK)
FX_LENGTH2=Length(WBANK)
FX2=0
Repeat 
   Poke FX_START+FX2,Peek(FX)
   Inc FX
   Poke FX_START2+FX2,Peek(FX)
   Inc FX
   Inc FX2
Until FX>FXE
Copy FX_START2,FX_START2+FX_LENGTH2 To FX_START+FX_LENGTH2
Gosub _CLEARWORK
Return 
'
_DEINTERLEAVE16BIT:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Trap Reserve As Work WBANK,FX_LENGTH/2
If Errtrap Then Goto _NOMEMORY
FX_START2=Start(WBANK)
FX_LENGTH2=Length(WBANK)
FX2=0
Repeat 
   Loke FX_START+FX2,Leek(FX)
   Add FX,2
   Loke FX_START2+FX2,Leek(FX)
   Add FX,2 : Add FX2,2
Until FX>FXE
Copy FX_START2,FX_START2+FX_LENGTH2 To FX_START+FX_LENGTH2
Gosub _CLEARWORK
Return 
'  
'
'
'***************************************************************************** 
'*process********************************************************************* 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'   ::::::::. :::::::..      ...       .,-::::::.,:::::: .::::::.  .::::::.
'   `;;```.;;;;;;;``;;;;  .;;;;;;;.  ,;;;'````' ;;;;'''';;;`    `;;;;`    `; 
'   `]]nnn]]' \[[[,/[[[' ,[[     \[[,[[[         [[cccc '[==/[[[[,'[==/[[[[, 
'    $$$""    "$$$$$$c   $$$,     $$$$$$         $$""""   '''    $  '''    $ 
'    888o     ,888b "88bo"888,_ _,88P`88bo,__,o, 888oo,_,88b    dP,88b    dP 
'    YMMMb    "MMMM   "W"  "YMMMMMP"   "YUMMMMMP """"YUM  "YMmMY"   "YMmMY"
'
'
'
_REVERSE:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Trap Reserve As Work WBANK,FX_LENGTH
If Errtrap Then Goto _NOMEMORY
Gosub _UNDOSET
FX2=FX_START+FX_LENGTH
Repeat 
   Dec FX2
   CN=Peek(FX2)
   Poke Start(WBANK)-FX_START+FX,CN
   Inc FX
Until FX>FXE
Copy Start(WBANK),Start(WBANK)+Length(WBANK) To FX_START
Gosub _CLEARWORK
Return 
'
_INVERT:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Gosub _UNDOSET
Repeat 
   CN=Peek(FX)
   Gosub SIGN
   CN=-CN
   Gosub UNSIGN
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
'
'
'***************************************************************************** 
'*utils*********************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'    ...    ::::::::::::: :::    :::     .::::::.  
'   ';;     ;;;;;;;;;;''' ;;;    ;;;    ;;;`    `; 
'   [['     [[[    [[     [[[    [[[    '[==/[[[[, 
'   $$      $$$    $$     $$$,   $$'      '''    $ 
'   88    .d888    88,   o88888o88oo,.__,88b    dP 
'    "YmmMMMM""    MMM   MMM"MM"""YUMMMM  "YMmMY"  
'
'  
'
T0NEG:
RX=216 : RY=59 : C0L=_WHITE
WTXT$=_CHOICES$ : WX=RX-5 : WY=RY-15 : WX2=RX+212 : WY2=RY+109 : C0L=_WHITE : Gosub WIND0W
Restore TBUT
For I=1 To _TB
   Read BTXT1$,BX,BY,BZN,E$
   Add BX,RX : Add BY,RY : Gosub BUTTON
Next I
Gosub DIAT0NE
Gosub T0SET
Do 
   E$=""
   Gosub GVAL
   If Z=48 and M<>0
      If Not KDOWN
         BX=270 : BY=89 : Gosub HIGHLIGHT
         N=0
         T$=""
         KDOWN=True
      End If 
      If C>0
         Gosub PIANO
         If KEYC<>-1
            T0NEV#=KEYF/100.0
            Gosub T0SET
            ROT#(10)=(((T0NEV#-5)*4.8)/(FREQ/8))+8.5
            Gosub DIAT0NE
         End If 
      End If 
   Else If M=1
      Restore TBUT
      For I=1 To _TB
         Read BTXT1$,BX,BY,BZN,E$
         If Z=BZN
            Add BX,RX : Add BY,RY : Gosub PRESS
            Gosub _UNDOSET
            Gosub E$
            If M0DE=2
               _RST=RST : _RFIN=RFIN
               RST=RST+P_LENGTH : RFIN=RFIN+P_LENGTH
               Gosub E$
               RST=_RST : RFIN=_RFIN
            Else If M0DE=3
               _RST=RST : _RFIN=RFIN
               For RI=0 To 2
                  RST=RST+P_LENGTH : RFIN=RFIN+P_LENGTH
                  Gosub E$
               Next RI
               RST=_RST : RFIN=_RFIN
            End If 
            E$=""
            Exit 
         End If 
      Next I
      If E$=""
         Exit 
      Else 
         Gosub DRWDIALS
      End If 
   Else If A=27
      Exit 
   Else 
      If C=78 or C=47
         T0NEV#=T0NEV#+1
         Gosub T0SET
      End If 
      If C=79 or C=45
         T0NEV#=T0NEV#-1
         Gosub T0SET
      End If 
   End If 
   If KDOWN and M=0
      BX=270 : BY=89 : Gosub HIGHLIGHT
      KDOWN=False
   End If 
Loop 
Goto T0NEC
'
T0NEEXIT:
Pop 
T0NEC:
Reset Zone 48
For I=58 To 64
   Reset Zone I
Next I
Gosub WIND0WC
WTXT$=""
If F$=""
   F$=_UNNAMED$ : Gosub SETFILENAME
End If 
If A<>27 and E$="" and Length(PBANK)>0
   RENDERING=True
   Gosub _DRAW
   Gosub FRESHSEL
   RENDERING=False
End If 
Return 
'  
T0SET:
T0NEN=(T0NEV#/3)-2
Ink _WHITE,_SHADOW
Text RX+165,RY-4,Space$(5)
Text RX+200-((Len(Str$(T0NEV#))+3)*8),RY-4,Space$(2)+Str$(T0NEV#)+"hz"
Return 
'
T0NESET:
If Length(PBANK)=0 Then Trap Reserve As Work PBANK,FREQ*2
Return 
'
T0NESIN:
Gosub T0NESET
PH#=0.0
FM#=0.4
If Errtrap Then Goto _NOMEMORY
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
N#=(Pi#*2*T0NEV#)/FREQ
Repeat 
   CN=T0NEA*Sin(N#*(FX-FX_START))
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
T0NESQR:
Gosub T0NESET
If Errtrap Then Goto _NOMEMORY
SAWN=0
SAWMUL#=1.0
T0NESYN:
Repeat 
   Gosub SET_PBANK
   If FX_LENGTH<2 Then Goto FLSHSCR
   N#=((Pi#*2*(T0NEV#*SAWMUL#))/FREQ)
   Repeat 
      If SAWN>0
         CN=Peek(FX)
      Else 
         CN=0
      End If 
      CN2=T0NEA*(Sin(N#*(FX-FX_START)))
      If SAWN>0
         Poke FX,CN+Int(CN2/SAWMUL#)
      Else 
         Poke FX,CN2
      End If 
      Inc FX
   Until FX>FXE
   SAWMUL#=SAWMUL#+2
   Inc SAWN
Until SAWN>16
Return 
'  
T0NESAW:
Gosub T0NESET
If Errtrap Then Goto _NOMEMORY
SAWN=0
SAWMUL#=0.0
Goto T0NESYN
'  
T0NECOS:
Gosub T0NESET
If Errtrap Then Goto _NOMEMORY
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
N#=(Pi#*2*T0NEV#)/FREQ
Repeat 
   CN=T0NEA*Cos(N#*(FX-FX_START))
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
T0NETRI:
Gosub T0NESET
If Errtrap Then Goto _NOMEMORY
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
N#=(Pi#*2.0*T0NEV#)/FREQ
CN#=127
CN2#=(N#*T0NEA)/2.0
Repeat 
   CN3#=T0NEA*Cos(N#*(FX-FX_START))
   If CN3#>0
      CN#=CN#+CN2#
   Else If CN3#<0
      CN#=CN#-CN2#
   Else 
      CN#=127
   End If 
   Poke FX,Int(CN#-127)
   Inc FX
Until FX>FXE
Return 
'
T0NEPLS:
Gosub T0NESET
If Errtrap Then Goto _NOMEMORY
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
N#=(Pi#*2*T0NEV#)/FREQ
Repeat 
   CN=T0NEA*Sin(N#*(FX-FX_START))
   Gosub SIGN
   If CN>0
      CN=T0NEA
   Else 
      CN=-T0NEA
   End If 
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
_NOISEWHITE:
Gosub T0NESET
If Errtrap Then Goto _NOMEMORY
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Randomize Timer
Repeat 
   CN=Rnd(255)-127
   Poke FX,CN
   Inc FX
Until FX>FXE
If F$=""
   F$=_UNNAMED$ : Gosub SETFILENAME
End If 
Return 
'
_NOISEDITHER:
Gosub T0NESET
If Errtrap Then Goto _NOMEMORY
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Randomize Timer
Repeat 
   CN=Rnd(2)-1
   Poke FX,CN
   Inc FX
Until FX>FXE
If F$=""
   F$=_UNNAMED$ : Gosub SETFILENAME
End If 
Return 
'
_NOISECRYPTO:
On Error Goto MATHTR4P
AA=0 : BB=0 : CC=0
ISA=$9E3779B9 : ISB=ISA : ISC=ISA : ISD=ISA : ISE=ISA : ISF=ISA : ISG=ISA : ISH=ISA
N=0
T$=""
_EXIT=False
Gosub _OPENFXWIN
REALTIME=False
TXT1$="Passphrase:"
Gosub _RUNFXTEXTWIN
If T$="" Then REQ=False
If REQ
   Gosub T0NESET
   If Errtrap
      Goto _NOMEMORY
   End If 
   Gosub SET_PBANK
   If FX_LENGTH<2
      Goto FLSHSCR
   End If 
   ISN=0
   For RANDCNT=0 To 255
      MM(RANDCNT)=0
      If ISN>Len(T$)
         ISN=0
      End If 
      RANDRSL(RANDCNT)=Asc(Mid$(T$,ISN,1))
      Inc ISN
   Next RANDCNT
   For ISI=0 To 3
      Gosub IMIX
   Next ISI
   For ISI=0 To 255 Step 8
      ISA=ISA+RANDRSL(ISI) : ISB=ISB+RANDRSL(ISI+1) : ISC=ISC+RANDRSL(ISI+2) : ISD=ISD+RANDRSL(ISI+3)
      ISE=ISE+RANDRSL(ISI+4) : ISF=ISF+RANDRSL(ISI+5) : ISG=ISG+RANDRSL(ISI+6) : ISH=ISH+RANDRSL(ISI+7)
      Gosub IMIX
      MM(ISI)=ISA : MM(ISI+1)=ISB : MM(ISI+2)=ISC : MM(ISI+3)=ISD
      MM(ISI+4)=ISE : MM(ISI+5)=ISF : MM(ISI+6)=ISG : MM(ISI+7)=ISH
   Next ISI
   Gosub ISAAC
   Repeat 
      ISN=RANDRSL(RANDCNT)
      RANDCNT=RANDCNT+1
      If RANDCNT>255
         Gosub ISAAC
         RANDCNT=0
      End If 
      ISN=(ISN mod 255)
      Poke FX,ISN
      Inc FX
   Until FX>FXE
End If 
If F$=""
   F$=_UNNAMED$ : Gosub SETFILENAME
End If 
On Error Proc TR4P
Return 
'
ISAAC:
XV=0 : YV=0
CC=CC+1
BB=BB+CC
For IV=0 To 255
   XV=MM(IV)
   BIT1=IV : BIT2=3 : Gosub BITWISEAND
   TAA13=AA : TAA6=AA : TAA2=AA : TAA16=AA
   Rol.l 13,TAA13 : Ror.l 6,TAA6 : Rol.l 2,TAA2 : Ror.l 16,TAA16
   If BIT3=0
      AA=AA xor TAA13
   Else If BIT3=1
      AA=AA xor TAA6
   Else If BIT3=2
      AA=AA xor TAA2
   Else If BIT3=3
      AA=AA xor TAA16
   End If 
   BIT1=IV+128 : BIT2=255 : Gosub BITWISEAND
   AA=MM(BIT3)+AA
   Ror.l 2,XV
   BIT1=XV : BIT2=255 : Gosub BITWISEAND
   YV=MM(BIT3)+AA+BB
   Rol.l 10,YV
   MM(IV)=YV
   BIT1=YV : BIT2=255 : Gosub BITWISEAND
   BB=MM(BIT3)+XV
   RANDRSL(IV)=BB
Next IV
Return 
'
IMIX:
Rol.l 11,ISB
Ror.l 2,ISC
Rol.l 8,ISD
Ror.l 16,ISE
Rol.l 10,ISF
Ror.l 4,ISG
Rol.l 8,ISH
Ror.l 9,ISA
ISA=ISA xor ISB : ISD=ISD+ISA : ISB=ISB+ISC
ISB=ISB xor ISC : ISE=ISE+ISB : ISC=ISC+ISD
ISC=ISC xor ISD : ISF=ISF+ISC : ISF=ISF+ISC
ISD=ISD xor ISE : ISG=ISG+ISD : ISE=ISE+ISF
ISE=ISE xor ISE : ISH=ISH+ISE : ISF=ISF+ISG
ISF=ISF xor ISG : ISA=ISA+ISF : ISG=ISG+ISH
ISG=ISG xor ISH : ISB=ISB+ISG : ISH=ISH+ISA
ISH=ISH xor ISA : ISC=ISC+ISH : ISA=ISA+ISB
Return 
'
BITWISEAND:
BIT3=0
For I=0 To 31
   B1=Btst(I,BIT1)
   B2=Btst(I,BIT2)
   If B1=True and B2=True
      Bset I,BIT3
   Else 
      Bclr I,BIT3
   End If 
Next I
Return 
'  
_NOISESIN:
Gosub T0NESET
If Errtrap Then Goto _NOMEMORY
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
CN=1
CN#=1
Repeat 
   CN#=Sin(CN*CN#)
   CN2=Int(CN#*127)
   Inc CN
   Poke FX,CN2
   Inc FX
   If CN>14000
      CN=1
   End If 
Until FX>FXE
If F$=""
   F$=_UNNAMED$ : Gosub SETFILENAME
End If 
Return 
'
_NOISEFILL:
Gosub T0NESET
If Errtrap Then Goto _NOMEMORY
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Randomize Timer
Repeat 
   CN=Rnd(255)-127
   CN2=Rnd(BSIZE-1)+1
   If FX+CN2>FXE
      CN2=FXE-FX
   End If 
   FX2=FX
   S_LENGTH2=FX2+CN2
   Repeat 
      Poke FX2,CN
      Inc FX2
   Until FX2>S_LENGTH2
   FX=FX+CN2
   If FX=>FXE
      Inc FX
   End If 
Until FX>FXE
If F$=""
   F$=_UNNAMED$ : Gosub SETFILENAME
End If 
Return 
'
_TGLBGREC:
If BGREC
   BGREC=False
   Close 3
   If M0DE=2
      Close 4
   End If 
   If M0DE=3 or M0DE=4
      Close 5 : Close 6
   End If 
   MENS$(4,3,0)=" Record Output   "
   Colour _HIGHLIGHT,PC0L
Else 
   If Length(PBANK)=0
      Goto FLSHSCR
   End If 
   PF$=F$
   If M0DE=2
      WTXT$="as Stereo"
   Else If M0DE=3
      WTXT$="as Quad"
   Else If M0DE=4
      WTXT$="4 Track"
   Else 
      WTXT$=""
   End If 
   WTXT$="Record "+WTXT$+": raw"
   Gosub FREQUEST
   T$=F$
   F$=PF$
   If Not FRQ
      Return 
   End If 
   If Exist(T$)
      Gosub _OVERWRITE
      If Not REQ
         Return 
      End If 
   End If 
   If M0DE=1
      Open Out 3,T$
   Else If M0DE=2
      Open Out 3,T$+"-L"
      Open Out 4,T$+"-R"
   Else If M0DE=3 or M0DE=4
      Open Out 3,T$+"-1"
      Open Out 4,T$+"-2"
      Open Out 5,T$+"-3"
      Open Out 6,T$+"-4"
   End If 
   MENS$(4,3,0)=" Stop Recording  "
   BGREC=True
   PC0L=Colour(_HIGHLIGHT)
   Colour _HIGHLIGHT,$F00
End If 
BGRECTOTAL=-1
Return 
'  
'
'
'***************************************************************************** 
'*direct********************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'   ::::::-.   :::  :::::::..  .,::::::  .,-:::::::::::::::: 
'   ;;,   `';, ;;;  ;;;;``;;;; ;;;;'''',;;;'````' ;;;;;;;''' 
'   `[[     [[ [[[  \[[[,/[[['  [[cccc [[[            [[ 
'    $$,    $$ $$$, "$$$$$$c    $$"""" $$$            $$ 
'    888_,o8P'o88888,888b "88bo 888oo,_`88bo,__,o,    88,
'   "MMMMP"`  MMM"MM"MMMM   "W" """"YUM  "YUMMMMMP    MMM
'
'
'
_DIRECT:
_DIRECT=True
Gosub NUDGEPOS
RENDERING=True
Screen Open 2,SCR_W,128,2,Hires
Palette $0,_PANEC,,,,,,,,,,,,,,,,$444,$500,$111
Flash Off 
I#=-90 : DD#=1.5
Repeat 
   Screen Display 2,128,Int(I#),320,128
   I#=I#+DD#
   DD#=DD#+3.25
   Gosub TASK
Until I#>DCT_Y
Screen Display 2,128,DCT_Y,320,128
Ink _WHITE
¯LOOP:
T$="" : N=0
Print Dir$;"> ";
Repeat 
   Gosub GVAL
   If A>0
      If A=30
         T$=_REPEAT$
         N=PN
      Else 
         T$=T$+K$
         If A<>27
            Screen 0
            If A=13
               _TOAST$=" "
            Else 
               _TOAST$=K$
            End If 
            Gosub _TOAST
            Screen 2
         End If 
         Inc N
      End If 
      Locate 0, : Print Dir$;"> ";T$;
   End If 
Until A=13 or A=27
If A=27 Then Goto _DIRECTC
Print 
Dec N : PN=N
T$=Upper$(Mid$(T$,0,N))
_REPEAT$=T$
Restore CMD
For I=1 To 13
   Read CMD$,CMDL,CMDG$
   If Left$(T$,CMDL)=CMD$
      T$=Mid$(T$,CMDL+2,35)
      Gosub CMDG$
      CMDL=True
      Exit 
   End If 
Next I
If Not CMDL
   Screen Hide 2 : Screen 0
   Trap Gosub T$
   Screen Show 2 : Screen 2
   If Errtrap
      Print "Unknown command/subroutine: ";T$
   End If 
End If 
Goto ¯LOOP
'
¯EXIT:
Pop 
_DIRECTC:
I#=DCT_Y
Repeat 
   Screen Display 2,128,Int(I#),320,128
   Gosub TASK
   I#=I#-DD#
Until I#<-90
_DIRECT=False
RENDERING=False
Screen Close 2
Screen 0
Return 
'
¯CDDD:
T$="/"
¯CD:
If T$=""
   Print Dir$ : Print 
Else If Exist(T$)
   Dir$=T$
   PROGDIR$=Dir$
Else 
   Goto ¯CANTFIND
End If 
Return 
'
¯MD:
If T$=""
   Gosub ¯BADARGS
Else If Exist(T$)
   Print T$;" exists"
Else 
   Mkdir T$
End If 
Return 
'
¯DIR:
If T$=""
   Goto ¯D
Else If Exist(T$)
   PPROGDIR$=Dir$ : Dir$=T$
   Gosub ¯D
   Dir$=PPROGDIR$ : PROGDIR$=PPROGDIR$
Else 
   Goto ¯CANTFIND
End If 
Return 
'
¯D:
D$=Dir First$("")
Repeat 
   Print D$;
   Print 
   D$=Dir Next$
Until D$=""
Return 
'
¯DEL:
If T$=""
   Goto ¯BADARGS
Else If Exist(T$)
   Kill T$
Else 
   Goto ¯CANTFIND
End If 
Return 
'
¯CLS:
Cls 
Return 
'
¯RX:
If Not REXX
   Print "Arexx: not active"
Else If T$=""
   Goto ¯BADARGS
Else If Exist("sys:rexxc/rx")
   Exec 'sys:rexxc/rx '+T$
Else 
   T$="RX"
   Gosub ¯CANTFIND
End If 
Return 
'
¯HELP14:
Restore H14
For I=1 To 15
   Read T$
   Print T$
Next I
Return 
'  
¯HELPSUBS:
Print "Macro Subroutines: ";
For M1=0 To _M1
   For M2=0 To _M2
      For M3=0 To _M3
         If Mid$(MENG$(M1,M2,M3),0,1)="_"
            Print MENG$(M1,M2,M3);" ";
         End If 
      Next M3
   Next M2
Next M1
Print : Print : Print "Note the unscore prefix"
Return 
'
¯HELP:
Restore HLP
For I=1 To 5
   Read T$
   Print T$
Next I
Return 
'
¯CANTFIND:
Print "Cannot find ";T$
Return 
'
¯BADARGS:
Print "Bad Args."
Return 
'
'
'
'***************************************************************************** 
'*help************************************************************************ 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'     ::   .: .,::::::  :::    ::::::::. 
'    ,;;   ;;,;;;;''''  ;;;    `;;```.;;;
'   ,[[[,,,[[[ [[cccc   [[[    `]]nnn]]' 
'   "$$$"""$$$ $$""""   $$'     $$$""
'    888   "88 888oo,_o88oo,.__ 888o 
'    MMM    YM """"YUM"""YUMMMM YMMMb
'
'
'
_SHORTCUTS:
WTXT$=_CHOICES$ : WX=94 : WY=20 : WX2=546 : WY2=182 : C0L=_WHITE : Gosub WIND0W
Pen _BLACK : Paper _WHITE
Locate 15,5
Restore CUT
For I=0 To 14
   Read T$
   Print T$
   Locate 15,
Next I
Gosub WIND0WWAITC
Return 
'
_OPTIONS:
RX=105
RY=36
WTXT$=_CHOICES$ : WX=98 : WY=RY : WX2=542 : WY2=148 : C0L=_PANE : Gosub WIND0W
Gosub OPTBUTTONS
Do 
   RX=105
   RY=36
   Gosub GVAL
   Exit If K$=Chr$(27)
   E$=""
   If M=1
      Restore OBUT
      For I=1 To _OB
         Read BTXT1$,BTXT2$,BX,BY,BZN,E$
         If Z=BZN
            Add BX,RX : Add BY,RY : Gosub PRESS
            Gosub E$
            Gosub _TGLSETTING
            Gosub OPTBUTTONS
            Exit 
         End If 
      Next I
      If E$=""
         Exit 
      End If 
   End If 
Loop 
Goto _OPTIONSC
'
_OPTIONSEXIT:
Pop 
_OPTIONSC:
For I=59 To 75
   Reset Zone I
Next I
Gosub SETZ0NES
Gosub MAGICWAND
Gosub WIND0WC
Gosub NUDGEPOS
Return 
'  
OPTBUTTONS:
Restore OBUT
For I=1 To _OB
   Read BTXT1$,BTXT2$,BX,BY,BZN,E$
   C0L=_WHITE
   If I<_OB
      If SETTING$(I+6)<>_FALSE$
         Swap BTXT1$,BTXT2$
      Else 
         C0L=_PANE
      End If 
   End If 
   Add BX,RX : Add BY,RY : Gosub BUTTON
Next I
Return 
'  
_TGLSETTING:
If I<_OB
   If SETTING$(I+6)<>_FALSE$
      SETTING$(I+6)=_FALSE$
   Else 
      SETTING$(I+6)="-1"
   End If 
End If 
Return 
'
_TGLFILTER:
If SETTING$(7)<>_FALSE$
   Led Off 
Else 
   Led On 
End If 
Return 
'
_TGLMON:
If MONHZ#=50.0
   MONHZ#=60.0 : CLOCK=3579545
Else 
   MONHZ#=50.0 : CLOCK=3546895
End If 
Return 
'
_TGL1991:
If SETTING$(9)<>_FALSE$ and MENS$(1,0,0)<>""
   _PANEC=$F00
   _PANES=$E00
   Palette $0,_PANEC,$FFF,$FF0,$0,$F55,$FFF,$FF0
Else 
   _PANEC=$599
   _PANES=$488
   Palette $0,_PANEC,$DDD,$566,$111,$377,$FFF,$E70,$F0,$30,$520,$975,$C12,$123,$AEE,$1B,,$DDD,$E11,$111
End If 
Gosub _RAINRESTORE
Return 
'
_TGLDEBUG:
If _DEBUG
   _DEBUG=False
Else 
   _DEBUG=True
End If 
Return 
'  
_TGLNETSYNC:
If Not BSD
   SETTING$(11)=_FALSE$
   Pop : Goto _NOBSD
End If 
If NETWORK
   NETWORK=False
   Gosub SOCK_CLOSE
Else 
   NETWORK=True
   Gosub SOCK_OPENCONNECTION
End If 
PKTCOUNT=0
Return 
'
_TGLLOWRES:
SB=Screen Base
If SCR_R=Hires
   Doke SB+72,Deek(SB+72) xor Hires
   SCR_R=Lowres
Else 
   Doke SB+72,Deek(SB+72) or Hires
   SCR_R=Hires
   Screen Offset 0,0,0
End If 
Return 
'
_TGLPREVIEW:
If _PREVIEW
   _PREVIEW=False
Else 
   _PREVIEW=True
End If 
Return 
'
_TGLSTEP:
If _STEP=1
   Inc _STEP
Else 
   Dec _STEP
End If 
Return 
'
_TGLAREXX:
If Not REXX
   SETTING$(20)=_FALSE$
   Pop : Goto _NOREXX
Else If Not OCTAMED
   SETTING$(20)=_FALSE$
   Pop : Goto _NOMED
End If 
Return 
'
_TGLVST:
If Not BSD Then Return 
If SETTING$(22)<>_FALSE$
   Gosub SOCK_CLOSEVST
Else 
   Gosub SOCK_OPENVST
End If 
Return 
'
_ABOUT:
WTXT$="FxBox" : WX=149 : WY=26 : WX2=490 : WY2=120 : C0L=_WHITE : Gosub WIND0W
Text WX+4+48,WY+10,"powered by" : Paste Bob WX+141,WY,2
Pen _BLACK : Paper _WHITE
Locate ,6
Centre "Version 1.13 © 1991-2025 Marc Williams"
Locate ,7
Centre "Benchmarking: *"
If _DOSVER<40
   T$="1.3"
Else If _DOSVER=40
   T$="3.1"
Else T$="v"+Str$(_DOSVER)-" "
End If 
Locate ,8
Centre _CPU$+" Cpu, Amiga OS "+T$
T$="Chip:"+Str$((Chip Free/1024))-" "+"K"
Ink _WHITE,_SHADOW
Text WX2-Text Length(T$)-3,WY+10,T$
Gosub HEADER
Locate ,9
If REXX and Arexx Exist("FXBOX_REXX")
   Centre "Arexx Port: "+"FXBOX_REXX"
Else 
   Centre "Arexx: not active"
End If 
Locate ,10
If OCTAMED
   If SETTING$(20)<>_FALSE$
      Centre "Octamed Sync: active"
   Else 
      Centre "Octamed Sync: disabled"
   End If 
Else 
   Centre "Octamed Sync: not active"
End If 
Locate ,11
If NETWORK and BSD
   Centre "Net Sync: "+Left$(_ADDR$,Len(_ADDR$))+":"+Str$(_PORT)-" "
Else 
   Centre "Net Sync: not active"
End If 
I=0
BTIME=Timer
ETIME=BTIME+MONHZ#
Repeat 
   Inc I
Until Timer>ETIME
Locate ,7
Centre "Benchmark:"+Str$(I/1E+06)+" DSP MIPS"
Gosub WIND0WWAITC
Return 
'
'    
'
'*****************************************************************************   
'*macros********************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'    .        :    :::.       .,-:::::::::::::..      ...      .::::::.
'    ;;,.    ;;;   ;;`;;    ,;;;'````' ;;;;``;;;;  .;;;;;;;.  ;;;`    `; 
'    [[[[, ,[[[[, ,[[ '[[,  [[[        \[[[,/[[[' ,[[     \[[,'[==/[[[[, 
'    $$$$$$$$"$$$c$$$cc$$$c $$$        "$$$$$$c   $$$,     $$$  '''    $ 
'   888 Y88" 888o 888   888,`88bo,__,o,,888b "88bo"888,_ _,88P,88b    dP 
'   MM  M'  "MMMM YMM   ""`   "YUMMMMMP"MMMM   "W"  "YMMMMMP"   "YMmMY"
'
'
'
MACRO:
_CHOICES$=MACROS$(_M2SEL)
_TOAST$=_CHOICES$+" "
Gosub _TOAST
D$=MACRODIR$+_CHOICES$+".asc"
If Exist(D$)
   MACRO=True
   Gosub _UNDOSET
   PM0DE=M0DE
   M0DE=1
   Trap Open In 1,D$
   If Errtrap
      Goto _FILEERROR
   End If 
   N=Lof(1) : Close 1 : TXT1$=Space$(N)
   Bload D$,Varptr(TXT1$) : PX=1
   Repeat 
      AX=Instr(TXT1$,Chr$(10),PX)
      If AX
         E$=Mid$(TXT1$,PX,AX-PX)
         _TOAST$=E$+" "
         PASS=0
         Trap Gosub E$
         If Errtrap
            TXT1$="Macro failed" : TXT2$='"'+E$+'"'
            Gosub _ERROR
            Goto FAIL
         End If 
      End If 
      PX=AX+1
      Gosub GVAL
   Until A=13 or A=27 or PX>=N or Length(PBANK)<3
   FAIL:
   M0DE=PM0DE
   MACRO=False
   PASS=0
   Gosub _RANGENONE
   FI=Length(PBANK)
   Gosub POS_SET
   RENDERING=True
   Gosub _DRAW
   RENDERING=False
   PASS=0
   Gosub _SHOWALL
Else 
   _TOAST$=D$
End If 
Return 
'
_MACROMENU:
If Exist("macros")
   MENS$(7,0,0)="Macros    "
   Dir$="macros"
   MACRODIR$=Dir$
   D$=Dir First$("**")
   TCOUNT=1
   If D$<>""
      Repeat 
         For I=Len(D$)-9 To 0 Step -1
            If Mid$(D$,I,1)<>" "
               Exit 
            End If 
         Next I
         D$=Upper$(Mid$(D$,2,1))+Mid$(D$,3,I-6)
         MACROS$(TCOUNT)=D$
         MENS$(7,TCOUNT,0)=Space$(20)
         Mid$(MENS$(7,TCOUNT,0),2)=D$
         MENG$(7,TCOUNT,0)="MACRO"
         MENFX(7,TCOUNT,0)=False
         Inc TCOUNT
         D$=Dir Next$
      Until D$="" or TCOUNT>_MR
   End If 
   TCOUNT=0
   Dir$=PROGDIR$
End If 
Return 
'  
'
'
'***************************************************************************** 
'*sys************************************************************************* 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'    .::::::. -:.     ::-.: .::::::. 
'   ;;;`    `;';;.   ;;;;'';;;`    `;
'   '[==/[[[[,   '[[,[[['  '[==/[[[[,
'     '''    $     c$$"      '''    $
'   ,88b    dP   ,8P"`     ,88b    dP
'     "YMmMY"   mM"          "YMmMY" 
'
'
'
SIGN3:
If CN3>127 Then CN3=CN3-256
SIGN2:
If CN2>127 Then CN2=CN2-256
SIGN:
If CN>127 Then CN=CN-256
Return 
'
UNSIGN2:
If CN2<0 Then CN2=CN2+256
UNSIGN:
Gosub CHECKCLIP
If CN<0 Then CN=CN+256
Return 
'
FLOAT2:
If CN2>127 Then CN2=CN2-256
CN2#=CN2/127.0
FLOAT:
If CN>127 Then CN=CN-256
CN#=CN/127.0
Return 
'
UNFLOAT:
CN=Int(CN#*127.0)
Gosub CHECKCLIP
If CN<0 Then CN=CN+256
Return 
'
CHECKCLIP:
If CN>127 Then CN=127
If CN<-127 Then CN=-127
Return 
'  
UNCHECKCLIP:
If CN>255 Then CN=255
If CN<0 Then CN=0
Return 
'  
SET_PBANK:
If Length(PBANK)=0
   FX_LENGTH=0
   P_LENGTH=0
   Return 
End If 
If REALTIME
   FX=P_SWP
   FX_START=FX
   FX_LENGTH=BSIZE
   FXE=FX+BSIZE-1
Else 
   FX_START=Start(PBANK)+RST
   FX_LENGTH=RL
   If RL>Length(PBANK)-RST or RST+RL=0
      FX_LENGTH=Length(PBANK)-RST
   End If 
   If RL<2
      FX_START=Start(PBANK)
      FX_LENGTH=Length(PBANK)
   End If 
   FX=FX_START
   FXE=FX_START+FX_LENGTH-1
End If 
P_START=Start(PBANK)
P_LENGTH=Length(PBANK)
If M0DE=2
   P_LENGTH=P_LENGTH/2
Else If M0DE=3
   P_LENGTH=P_LENGTH/4
End If 
Return 
'
_ERASEALL:
BTXT1$="Clear" : TXT1$="Clear all the" : TXT2$="samples?" : Gosub _REQUEST
If Not REQ Then Return 
Gosub _STOP
BANKNAME$="" : F$="" : PF$="" : _REPEAT$=""
For B=1 To 10
   Mid$(MENS$(5,B,0),7)=Space$(16)
Next B
For B=1 To _FL
   FB$(B)="" : FPATH$(B)=""
Next B
Gosub _CLEARUNDO
For B=5 To 256
   Erase B
Next B
B=1
If M0DE=4
   PBANK=B+7
Else 
   PBANK=5
End If 
Gosub SET_PBANK
Gosub _DRAW
Gosub HEADER
Return 
'  
SETHZ:
If _AMIHZ
   HZPERIOD=CLOCK/FREQ
   FREQ=CLOCK/HZPERIOD
   BSIZE=Int(FREQ/MONHZ#)
Else 
   BSIZE=Int(FREQ/MONHZ#)
   FREQ=BSIZE*MONHZ#
   HZPERIOD=CLOCK/FREQ
End If 
Doke $DFF0A6,HZPERIOD
Doke $DFF0B6,HZPERIOD
Doke $DFF0C6,HZPERIOD
Doke $DFF0D6,HZPERIOD
Gosub DRWTIME
ROT#(0)=(((FREQ-601)/13.3)/(256+184))+8.5
_AMIHZ=True
Return 
'
_SWAPMENU:
B=_M2SEL
If PB=B Then Return 
Goto _SWAPBANK
'
_SWAPPREV:
Dec B
If B<1
   B=1
End If 
Goto _SWAPBANK
'
_SWAPNEXT:
Inc B
If B>255
   B=255
End If 
Goto _SWAPBANK
'
_SWAPFKEY:
B=C-79
_SWAPBANK:
If PB=B
   If M0DE=4
      PBANK=PB+7
   End If 
   Return 
End If 
Gosub _RANGENONE
If M0DE<>4
   PBANK=5
   Bank Swap PB+7,PBANK
   Bank Swap PBANK,B+7
Else 
   PBANK=B+7
End If 
PB=B
F$=FB$(B)
_TOAST$=Str$(B)
P_LENGTH=Length(PBANK)
If P_LENGTH>0
   P_START=Start(PBANK)
Else 
   Gosub _CLEARPLAYBUFFER
End If 
FI=P_LENGTH
Gosub SET_PBANK
If M0DE=4
   Gosub _RAINSET
   If C=0
      Gosub NUDGEPOS
   End If 
Else 
   If M0DE=2
      FI=FI/2
   Else If M0DE=3
      FI=FI/4
   End If 
   RENDERING=True
   Gosub _RANGEPXCLEAR
   Gosub _DRAW
   RENDERING=False
   Gosub _RAINRESTORE
End If 
Gosub HEADER
Gosub DRWTIME
Gosub MAGICWAND
Return 
'
FLSHSCR:
Colour _PANE,Colour(_HIGHLIGHT)
If Not BGPLYING
   Gosub TASK : Gosub TASK
   Goto FLSHSCRC
Else 
   _TOAST$="!"
End If 
Return 
'
FLSHSCRC:
Colour _PANE,_PANEC
Return 
'
FXBUFFER:
For FXBC=1 To 4
   Trap Reserve As Work _CURRENT,_SIZE
   If Errtrap
      _CURRENT=-1
      Goto _NOMEMORY
   End If 
   Inc _CURRENT
Next FXBC
Return 
'
FXBUFFERC:
For FXBC=4 To 1 Step -1
   Dec _CURRENT
   Erase(_CURRENT)
Next FXBC
Return 
'
GFXSET:
GFXX=Xgr : GFXY=Ygr
Return 
'
GFXRESTORE:
Gr Locate GFXX,GFXY
Return 
'  
PATSET:
If SCR_D>4 Then Return 
Set Pattern 2
Return 
'  
PATRESTORE:
If SCR_D>4 Then Return 
Set Pattern 0
Return 
'
TASK:
If BGPLYING Then Return 
Multi Wait 
Return 
'
TIME_CAL:
If T_LENGTH>0
   DIV#=FREQ
   DIV#=((DIV#/T_LENGTH)*60)*4
   If DIV#<32
      DIV#=FREQ
      DIV#=T_LENGTH/DIV#
      T$=" Secs"
      If DIV#>60
         ADV#=DIV#
         DIV#=DIV#/60
         DIV#=Int(DIV#)
         T$=" Mins"+Str$(Int(ADV#-(DIV#*60)))+T$
      End If 
      If DIV#>60
         ADV#=DIV#
         DIV#=DIV#/60
         DIV#=Int(DIV#)
         T$=" Hrs"+Str$(Int(ADV#-(DIV#*60)))+T$
      End If 
      
   Else If DIV#>320
      DIV#=FREQ
      DIV#=(T_LENGTH/DIV#)*1000
      T$=" Ms"
   Else 
      T$=" Bpm"
   End If 
Else 
   DIV#=0
End If 
Return 
'    
_CLIOUT:
Dreg(1)=Doscall(-60)
If Dreg(1)
   Restore MSG
   For I=0 To 18
      Read T$
      T$=T$+Chr$($A)
      Dreg(2)=Varptr(T$) : Dreg(3)=Len(T$)
      R=Doscall(-48)
   Next I
End If 
Return 
'
'
'
'***************************************************************************** 
'*mouse*********************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'    .        :      ...      ...    ::: .::::::. .,:::::: 
'    ;;,.    ;;;  .;;;;;;;.  ';;     ;;;;;;`    `;;;;;'''' 
'    [[[[, ,[[[[,,[[     \[[,[['     [[['[==/[[[[, [[cccc  
'    $$$$$$$$"$$$$$$,     $$$$$      $$$  '''    $ $$""""  
'   888 Y88" 888o"888,_ _,88P88    .d888,88b    dP 888oo,_ 
'   MM  M'  "MMMM  "YMMMMMP"  "YmmMMMM""  "YMmMY"  """"YUM 
'
'
'
SETZ0NES:
If CON#=0 Then Return 
If XR=XR2 or RL=0
   Set Zone 73,0,HDR_H To SCR_W,WVE_H+HDR_H
   For I=74 To 77
      Reset Zone I
   Next I
Else If XR>1 and XR2>0
   Set Zone 73,0,HDR_H To XR-1,WVE_H+HDR_H
   Set Zone 74,XR,RNG_T+HDR_H To XR+12,RNG_B+HDR_H
   If XR+24<XR2
      Set Zone 75,XR+12,HDR_H To XR2-12,WVE_H+HDR_H
   Else 
      Reset Zone 75
   End If 
   If XR2>12 and XR2<SCR_W
      Set Zone 76,XR2-12,RNG_T+HDR_H To XR2+1,RNG_B+HDR_H
   Else 
      If((RFIN/CON#)-(FIN/CON#))=0
         If XR<614
            Set Zone 75,XR+12,HDR_H To 626,WVE_H+HDR_H
         Else 
            Reset Zone 75
         End If 
         Set Zone 76,627,RNG_T+HDR_H To SCR_W,RNG_B+HDR_H
      Else 
         Reset Zone 76
      End If 
   End If 
   Set Zone 77,0,HDR_H To SCR_W,WVE_H+HDR_H
Else If XR=0 and XR2>0 and XR2<25
   Reset Zone 73
   Set Zone 74,0,RNG_T+HDR_H To 6,RNG_B+HDR_H
   Reset Zone 75
   Set Zone 76,6,RNG_T+HDR_H To 12,RNG_B+HDR_H
   Set Zone 77,0,HDR_H To SCR_W,WVE_H+HDR_H
Else If XR=0 and XR2>24 and XR2<SCR_W-2
   Reset Zone 73
   If(RST/CON#)-(ST/CON#)=0
      Set Zone 74,0,RNG_T+HDR_H To 12,RNG_B+HDR_H
      Set Zone 75,12,HDR_H To XR2-12,WVE_H+HDR_H
   Else 
      Reset Zone 74
      Set Zone 75,0,HDR_H To XR2-12,WVE_H+HDR_H
   End If 
   Set Zone 76,XR2-12,RNG_T+HDR_H To XR2+1,RNG_B+HDR_H
   Set Zone 77,0,HDR_H To SCR_W,WVE_H+HDR_H
Else If XR2>0
   Reset Zone 73
   Set Zone 74,0,RNG_T+HDR_H To 12,RNG_B+HDR_H
   Set Zone 75,13,HDR_H To 628,WVE_H+HDR_H
   If((RFIN/CON#)-(FIN/CON#))<1
      Set Zone 76,628,RNG_T+HDR_H To SCR_W,RNG_B+HDR_H
   Else 
      Reset Zone 76
      If(RST/CON#)-(ST/CON#)=0
         Set Zone 75,13,HDR_H To SCR_W,WVE_H+HDR_H
      Else 
         Set Zone 75,0,HDR_H To SCR_W,WVE_H+HDR_H
      End If 
   End If 
   Set Zone 77,0,HDR_H To SCR_W,WVE_H+HDR_H
Else 
   Set Zone 73,0,HDR_H To SCR_W,WVE_H+HDR_H
   For I=74 To 77
      Reset Zone I
   Next I
End If 
Return 
'
TESTMOVE:
PX=X Screen(X Mouse)
PY=Y Screen(Y Mouse)
MK=Mouse Key
TEST:
Gosub GVAL
If C>0 or MK<>M or CY<>PY or CX<>PX Then Return 
Goto TEST
'
MUP:
Gosub TASK
M=Mouse Key
If M=0 Then Return 
Goto MUP
'
GVAL:
Gosub TASK
M=Mouse Key
Z=Mouse Zone
If M=4
   M=0
Else If M=5 or Key Shift=80
   M=1
Else If Key Shift=160
   M=2
End If 
K$=Inkey$
C=Scancode
A=Asc(K$)
If(Key Shift=64 or Key Shift=80)
   If C=76
      Y Mouse=Y Mouse-1
   Else If C=77
      Y Mouse=Y Mouse+1
   Else If C=78
      X Mouse=X Mouse+1
   Else If C=79
      X Mouse=X Mouse-1
   End If 
End If 
CX=X Screen(X Mouse)
CY=Y Screen(Y Mouse)
If M=2 and RENDERING=False and _DIRECT=False
   Paper _SHADOW : Pen _BLACK
   If Not _MENUDO
      _MENUDO=True
      _M1SEL=0 : _M2SEL=0 : _M3SEL=0
      Gosub NUDGEPOS
      Gosub _RANGEPXCLEAR
      
   End If 
   If _MENUSUB
      If CY<8 or(CX>MENX(_M1SEL-1,0,0)-8 and CX<MENX(_M1SEL-1,0,0)+Text Length(MENS$(_M1SEL,1,0))-40 and CY/8<>_M2SEL)
         _MENUSUB=False
         If SUBH>0
            Screen Copy 1,SUBX,SUBY,SUBX+SUBW,SUBY+SUBH To 0,SUBX,HDR_H+SUBY
         End If 
         Goto MDO
      End If 
      If _MENUSUB
         _M3SEL=CY/8-_M2SEL+1
         If _M3SEL>_M3
            _M3SEL=0
         End If 
         _L2=(MENX(M1-1,0,0)/8+Text Length(MENS$(M1,_M2SEL,0))/8)-4
         SUBX=(_L2*8)
         SUBY=(_M2SEL*8)-3
         For M3=1 To _M3
            If MENS$(_M1SEL,_M2SEL,M3)<>""
               Locate _L2,_M2SEL+M3-1
               If _M3SEL=M3
                  Paper _PANE
               Else 
                  Paper _SHADOW
               End If 
               Print MENS$(_M1SEL,_M2SEL,M3)+Chr$(10)+Chr$(13)
               SUBW=Text Length(MENS$(_M1SEL,_M2SEL,M3))
            Else 
               Exit 
            End If 
         Next M3
      End If 
      SUBH=(M3-1)*8
      If _M3SEL<0 or _M3SEL>_M3
         _M3SEL=0
      End If 
      Return 
   End If 
   MDO:
   If _MENUON and _MENUDO
      If CY<12
         _M1SEL=0
         For M1=_M1 To 1 Step -1
            If CX>=MENX(M1-1,0,0) and CX<=MENX(M1,0,0)
               _M1SEL=M1
               Exit 
            End If 
         Next M1
      End If 
      If M1>_M1
         M1=0
         Return 
      End If 
      If _PM1SEL<>_M1SEL
         Gosub CLEARMENU
         SUBH=0
      End If 
      _PM1SEL=_M1SEL
      _M2SEL=CY/8
      If _M2SEL>_M2
         _M2SEL=0
      End If 
      _M3SEL=0
      _L1=(MENX(M1,0,0)/8)-(Text Length(MENS$(M1,0,0))/8)
      For M2=1 To _M2
         Locate _L1,M2
         If M1>0
            If CX<MENX(M1-1,0,0)+Text Length(MENS$(M1,1,0))
               If MENS$(M1,M2,0)<>""
                  If _M2SEL=M2 and Mid$(MENS$(M1,M2,0),0,1)<>"-"
                     Paper _PANE
                     For M3=1 To _M3
                        If MENS$(M1,M2,M3)<>""
                           _MENUSUB=True
                        End If 
                     Next M3
                  Else 
                     Paper _SHADOW
                  End If 
                  Print MENS$(M1,M2,0)
               End If 
            End If 
         End If 
      Next M2
   End If 
   If Not _MENUON
      Ink _SHADOW
      Bar 0,8 To SCR_W,HDR_H-1
      Locate 0,0
      T$=""
      For M1=1 To _M1
         T$=T$+MENS$(M1,0,0)
      Next M1
      Print T$;Space$(80-Len(T$))
      _MENUON=True
   End If 
Else If _MENUON
   If MENG$(_M1SEL,_M2SEL,_M3SEL)<>""
      _CHOICE=True
      _CHOICES$=MENS$(_M1SEL,_M2SEL,_M3SEL)
      _CHOICEG$=MENG$(_M1SEL,_M2SEL,_M3SEL)
   End If 
   _MENUON=False : _MENUDO=False : _MENUSUB=False
   Gosub CLEARMENU
   Gosub HEADER
Else If M=3 and BGPLYING
   Gosub _FULLSTOP
   Every Off 
   Gosub MUP
Else If SCR_R=Lowres
   Screen Offset 0,X Mouse-128,
Else If M=1 and CY<HDR_H and _DIRECT
   DCT_Y=Y Mouse+1
   Screen Display 2,128,DCT_Y,320,256
Else If _TOAST$<>""
   Gosub _TOAST
Else If _TOASTWAIT=0
   If Key Shift=1 or Key Shift=4 or Key Shift=5
      Colour 1,_PANES
   Else 
      Colour 1,_PANEC
   End If 
End If 
Return 
'
'
'
'***************************************************************************** 
'*choice********************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'     .,-::::::  ::   .:     ...      :::    .,-::::::.,:::::: 
'   ,;;;'````'  ,;;   ;;, .;;;;;;;.   ;;;  ,;;;'````' ;;;;'''' 
'   [[[        ,[[[,,,[[[,[[     \[[, [[[  [[[         [[cccc  
'   $$$        "$$$"""$$$$$$,     $$$ $$$, $$$         $$""""  
'   `88bo,__,o, 888   "88"888,_ _,88Po88888`88bo,__,o, 888oo,_ 
'     "YUMMMMMP MMM    YM  "YMMMMMP" MMM"MM  "YUMMMMMP """"YUM 
'
'
'
MCHOOSE:
_CHOICE=False
PASS=0
If RL=0 and(_M1SEL=3 and _M2SEL<>2 and _M2SEL<>7) and _M1SEL<>1 : Rem Not resample or convert menu and not file menu     
   RL=P_LENGTH
   _CHOICE=3
End If 
If _CHOICEG$="_UNDO"
   _REPEAT$=""
Else 
   _REPEAT$=_CHOICEG$
End If 
Gosub _CHOICEG$
If MENFX(_M1SEL,_M2SEL,_M3SEL) and RL>1
   If M0DE=2
      _RST=RST : _RFIN=RFIN
      RST=RST+P_LENGTH : RFIN=RFIN+P_LENGTH
      Gosub _CHOICEG$
      RST=_RST : RFIN=_RFIN
   Else If M0DE=3
      _RST=RST : _RFIN=RFIN
      For RI=0 To 2
         RST=RST+P_LENGTH : RFIN=RFIN+P_LENGTH
         Gosub _CHOICEG$
      Next RI
      RST=_RST : RFIN=_RFIN
   End If 
End If 
PASS=0
If MENFX(_M1SEL,_M2SEL,_M3SEL)
   If _CHOICE=3
      RL=0
      _CHOICE=False
      Gosub POS_CAL
   End If 
   If REQ or FX=>FXE
      RENDERING=True
      Gosub _DRAW
      Gosub FRESHSEL
      Gosub _RANGEPXCLEAR
      RENDERING=False
   Else 
      _REPEAT$=""
   End If 
   _TOAST$=_REPEAT$
End If 
Return 
'
M0DEMENU:
_M3SEL=_M3SEL-1
If _M3SEL=M0DE Then Return 
If BGREC
   Gosub _TGLBGREC
End If 
If OSCILLO
   Gosub _TGLOSCILLO
End If 
If _M3SEL=4 and M0DE<>4
   Bank Swap 5,B+7
   PBANK=B+7
   Gosub _RAINSET
Else If M0DE=4 and _M3SEL<>4
   Bank Swap B+7,5
   PBANK=5
   Gosub _RAINRESTORE
End If 
M0DE=_M3SEL
If M0DE=1
   _TOAST$="Mono"
   FI=Length(PBANK)
Else If M0DE=2
   _TOAST$="Stereo"
   FI=Length(PBANK)/2
Else If M0DE=3
   _TOAST$="Quad"
   FI=Length(PBANK)/4
Else 
   _TOAST$="Multi"
End If 
Gosub SET_PBANK
Gosub _RANGENONE
RENDERING=True
Gosub _RANGEPXCLEAR
Gosub _DRAW
Gosub SETCORDS
RENDERING=False
Gosub DRWTIME
If SETTING$(22)<>_FALSE$ Then Gosub SOCK_SENDCUP
Return 
'
RATEMENU:
FREQ=Val(_CHOICES$-" ")
_AMIHZ=False
Gosub SETHZ
Gosub DIAMAIN
Return 
'
_14BIT:
Volume PAULA(4),1
Volume PAULA(3),1
Return 
'
CLEARMENU:
RENDERING=True
Gosub _SHOWWAVE
Gosub FRESHSEL
RENDERING=False
Ink _SHADOW
Bar 0,8 To SCR_W,HDR_H-1
Return 
'
BCHOOSE:
PASS=0
If Z=0 and Length(5)=0
   Goto FLSHSCR
Else If Z=0
   Return 
Else If Z=58
   Gosub _TGLOSCILLO
   Return 
Else If Z=59
   Gosub _TGLOSCILLOMODE
   Return 
End If 
If Z<=_BU
   PZN=Z
   Gosub PRESSBUT
End If 
If Z=8 and PLYING
   Gosub MUP
   Goto _STOP
Else If Z=6
   Goto _PASTE
Else If P_LENGTH=0 and M0DE<>4
   Goto FLSHSCR
Else If Z=7
   Pop : Goto _PLAYALL
Else If Z=8
   Pop : Goto _PLAYRANGE
Else If Z=9
   Pop : Goto _PLAYDISPLAY
End If 
On Z-69 Goto LEFTWAND,RIGHTWAND,MOVEWAND,RANGE,SELLEFT,RANGE,SELRIGHT,RANGE
MZ=Z
If MZ<37
   Gosub BUTG$(MZ)
   If(MZ=4 or MZ=5 or MZ=6 or MZ=10 or MZ=11) and RL>1
      If M0DE=2
         _RST=RST
         _RFIN=RFIN
         RST=RST+P_LENGTH
         RFIN=RFIN+P_LENGTH
         Gosub BUTG$(MZ)
         RST=_RST
         RFIN=_RFIN
      Else If M0DE=3
         _RST=RST
         _RFIN=RFIN
         For RI=0 To 2
            RST=RST+P_LENGTH
            RFIN=RFIN+P_LENGTH
            Gosub BUTG$(MZ)
         Next RI
         RST=RST
         RFIN=_RFIN
      End If 
   End If 
End If 
Return 
'
KCHOOSE:
PASS=0
If(Key Shift=68 or Key Shift=64)
   If C<5
      _M3SEL=C+1 : Goto M0DEMENU
   Else If C=16
      Goto _QUIT
   Else If C=19
      Goto _REVERT
   Else If C=24
      Goto _OPEN
   Else If C=33
      Goto _SAVEAS
   Else If C=34
      Goto _DIRECT
   Else If C=49
      Goto _UNDO
   Else If C=50
      Goto _CUT
   Else If C=51
      Goto _COPY
   Else If C=52
      Goto _PASTE
   End If 
Else If C=11
   Goto _SWAPPREV
Else If C=12
   Goto _SWAPNEXT
Else If C=64
   Goto _STOP
Else If C=68
   Goto _TGLLP
Else If C=69
   Goto _QUIT
Else If C>79 and C<90
   Goto _SWAPFKEY
Else If C=122 or C=123
   If CY>HDR_H and CY<HDR_H+WVE_H and P_LENGTH>0 and SETTING$(19)<>_FALSE$
      If C=122
         If XD<XD2
            Add XD,_WHEEL
            If XD2>0
               Add XD2,-_WHEEL
            End If 
            Goto WREFRSH
         End If 
      Else If C=123
         PXD=XD : PXD2=XD2
         If XD>0
            Add XD,-_WHEEL
         End If 
         If XD<0
            XD=0
         End If 
         If XD2<SCR_W
            Add XD2,_WHEEL
         End If 
         If XD2>SCR_W
            XD2=SCR_W
         End If 
         If PXD<>XD or PXD2<>XD2
            Goto WREFRSH
         End If 
      End If 
   End If 
Else If Key Shift<>%1000000
   If P_LENGTH=0
      Goto FLSHSCR
   End If 
   Gosub PIANO
   If KEYC<>-1
      _TOAST$=KEYS$
      FREQ=KEYF
      Gosub SETHZ
      Gosub DIAMAIN
      If RL>0
         Gosub NUDGEPOS
      End If 
      If RL>1
         Pop : Goto _PLAYRANGE
      Else If DISPPLY
         Pop : Goto _PLAYDISPLAY
      Else 
         Pop : Goto _PLAYALL
      End If 
   End If 
End If 
Return 
'
PIANO:
If Key Shift=4
   Restore KLO
Else 
   Restore KHI
End If 
Repeat 
   Read KEYC,KEYS$,KEYF
   If KEYC=C
      Return 
   End If 
Until KEYC=-1
Return 
'
ZCHOOSE:
If PZ=74
   Gosub UNR0LLLEFT
   PZ=0
Else If PZ=76
   Gosub UNR0LLRIGHT
   PZ=0
End If 
If Z=74
   Gosub R0LLLEFT
   PZ=Z
Else If Z=76
   Gosub R0LLRIGHT
   PZ=Z
End If 
Return 
'
'
'
'***************************************************************************** 
'*windows********************************************************************* 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'.::    .   .:: :::  ::.    :::.::::::-.      ...     .::    .   .:: .::::::.  
'';;,  ;;  ;;;' ;;;  ;;;;,  `;;;;;,   `';, .;;;;;;;.  ';;,  ;;  ;;;';;;`    `; 
' '[[, [[, [['  [[[   [[[[[. '[[`[[     [[,[[     \[[, '[[, [[, [[' '[==/[[[[, 
'   Y$c$$$c$P   $$$,  $$$ "Y$c$$ $$,    $$$$$,     $$$   Y$c$$$c$P    '''    $ 
'    "88"888   o88888888    Y88  888_,o8P'"888,_ _,88P    "88"888   ,88b    dP 
'     "M "M"   MMM"MMMM     YM  "MMMMP"`    "YMMMMMP"      "M "M"     "YMmMY"  
'
'
'
WIND0W:
Gosub NUDGEPOS
RENDERING=True
Ink C0L-1
Bar WX-5,WY-4 To WX2+5,WY2+4
Ink _DARKBLUE
Box WX-5,WY-4 To WX2+5,WY2+4
Ink C0L
Bar WX,WY To WX2,WY2
Ink _SHADOW
Bar WX+1,WY+1 To WX2-1,WY+13
Ink C0L-1
Box WX+1,WY+1 To WX2-1,WY2-1
Ink _WHITE,_SHADOW
Text WX+4,WY+10,WTXT$
Return 
'
WIND0WWAITC:
C0L=_WHITE
BTXT1$="Ok" : BX=270 : BY=WY2-17 : BZN=50 : Gosub BUTTONGRAY
Do 
   Gosub GVAL
   Exit If K$=Chr$(27) or A=13
   If Z=50 and M=1
      Gosub PRESS
      Exit 
   End If 
Loop 
Reset Zone 50
Gosub _SHOWWAVE
Gosub FRESHSEL
WIND0WC:
Gosub _SHOWWAVE
If _CHOICE<>3
   Gosub FRESHSEL
End If 
RENDERING=False
Gosub _RANGEPXCLEAR
Return 
'
FREQUEST:
If _AMIVER<3 Then Gosub _STOP
FRQ=False
WX=100 : WY=21 : WX2=540 : WY2=174 : C0L=_WHITE : Gosub WIND0W
Ink _SHADOW
Draw 104,156 To 420,156
Set Zone 40,402,40 To 424,48
Set Zone 41,402,144 To 424,154
Set Zone 43,110,157 To 420,173
C0L=_WHITE
BX=432
BTXT1$="Ok" : BY=40 : BZN=50 : Gosub BUTTONGRAY
BTXT1$="Parent" : BY=54 : BZN=51 : Gosub BUTTONGRAY
BTXT1$="Volumes" : BY=68 : BZN=52 : Gosub BUTTONGRAY
DEVBUT:
For I=1 To 5
   BY=BY+14 : Inc BZN
   BTXT1$=DEVS$(I) : Gosub BUTTONGRAY
Next I
BTXT1$="Cancel" : BY=159 : BZN=58 : Gosub BUTTONGRAY
Gosub GDR
Gosub DRWDR
CR$=""
Gosub DRWFILE
Repeat 
   Gosub TESTMOVE
   If(C=123 or(K$=Chr$(31)) or(Z=41 and M=1)) and FTOTAL>15
      Inc FPOS
      If C=123
         FPOS=FPOS+4
      End If 
      If FPOS>FTOTAL-16
         FPOS=FTOTAL-16
      End If 
      Gosub DRWDR
      Gosub MUP
   Else If(C=122 or(K$=Chr$(30)) or(Z=40 and M=1)) and FTOTAL>15
      Dec FPOS
      If C=122
         FPOS=FPOS-4
      End If 
      If FPOS<0
         FPOS=0
      End If 
      Gosub DRWDR
      Gosub MUP
   Else If K$<>""
      For I=0 To FTOTAL
         If Upper$(Mid$(FILES$(I),2,1))=Upper$(K$)
            If FPOS<>I-1
               FPOS=I-1
               If FPOS>FTOTAL-16
                  FPOS=FTOTAL-16
               End If 
               Gosub DRWDR
               Exit 
            End If 
         End If 
      Next I
   End If 
   If PZN<>Z
      Gosub DRWDR : Rem Filename Rollover Rollout
      PZN=Z
   End If 
   If M=1
      PZN=Z
      If Z=50
         BY=40 : Gosub PRESS : Rem Ok 
         FRQ=True
         Exit 
      Else If Z=2 or Z=3 or Z=4 or Z=8 or Z=9 or Z=10 or Z=43
         I=Len(F$)
         Repeat 
            If A>32 and A<123
               F$=F$+K$
               Inc I
            End If 
            If C=65
               Dec I
               F$=Mid$(F$,0,I)
            End If 
            Ink _BG
            CR$="_"
            Gosub DRWFILE
            Gosub TESTMOVE
         Until A=13 or A=27 or M=1
         If A=27
            Exit 
         End If 
         CR$=""
         Gosub DRWFILE
      Else If Z=42 and FTOTAL>15
         DY=Y Screen(Y Mouse)
         Repeat 
            Gosub TESTMOVE
            FPOS=((DY-50)/SLISIZE#)*14
            DY=CY
            If FPOS<0
               FPOS=0
            End If 
            If FPOS>FTOTAL-16
               FPOS=FTOTAL-16
            End If 
            Gosub DRWDR
         Until M=0
      Else If Z=51
         BY=54 : Gosub PRESS : Rem Parent 
         Parent 
         Gosub GDR
         FPOS=0
         Gosub DRWDR
      Else If Z=52
         BY=68 : Gosub PRESS : Rem Volumes
         Gosub VLUMES
         FPOS=0
         Gosub DRWDR
      Else If Z>52 and Z<58
         BY=68+((Z-52)*14) : Gosub PRESS
         Trap Dir$=DEVS$(Z-52)
         If Errtrap
            Gosub FLSHSCR
         Else 
            Gosub GDR
            FPOS=0
            Gosub DRWDR
         End If 
      Else If Z=58 or Z=5 or Z=11
         BY=159 : Gosub PRESS : Rem Cancel 
         FRQ=False
         Exit 
      Else If Z>58 and Z<74
         Gosub CHOFN
      End If 
   Else If A=27
      Exit 
   End If 
Until FRQ
For I=40 To 75
   Reset Zone I
Next I
Gosub MAGICWAND
If F$="" Then FRQ=False
Gosub WIND0WC
Return 
'  
CHOFN:
Paper _WHITE : Pen _GRAY
TVDL$=FILES$(FPOS+Z-58)
For I=Len(TVDL$) To 0 Step -1
   If Mid$(TVDL$,I,1)<>" "
      Exit 
   End If 
Next I
If TVDL$<>""
   TVDC$=Left$(TVDL$,1)
   If I=0
      TVDF$=Mid$(TVDL$,2,Len(TVDL$))
   Else 
      TVDF$=Mid$(TVDL$,2,I-1)
   End If 
   If TVDC$="*" or TVDC$="!" or TVDC$="?"
      If TVDC$="!"
         DEVS$(5)=TVDF$
      End If 
      Trap Dir$=TVDF$
      If Errtrap
         T$=WTXT$
         TXT1$="Error Opening Device" : TXT2$="" : Gosub _ERROR
         WTXT$=T$
         Dir$=PROGDIR$
         Pop : Goto FREQUEST
      Else 
         Gosub MUP
         Gosub GDR
         FPOS=0
         Gosub DRWFILE
         Gosub DRWDR
      End If 
   Else 
      F$=TVDF$
      If T$=F$ : Rem Double Click 
         FRQ=True
      Else 
         T$=F$
         Gosub DRWFILE
      End If 
      Gosub MUP
   End If 
End If 
Return 
'
DRWFILE:
Ink _BLACK,_WHITE
Text 120,167,Space$(37)
FOFF=Len(F$)-37
If FOFF<0 Then FOFF=0
Text 120,167,Mid$(F$,FOFF+1,Len(F$)-FOFF)+CR$
Return 
'  
GDR:
Gosub CLRFILES
Set Dir 100,""
D$=Dir First$("")
Repeat 
   If Left$(D$,1)<>"*"
      FILEL(TCOUNT)=Val(Right$(D$,8))
      If FILEL(TCOUNT)>1000000
         For I=Len(D$)-8 To 0 Step -1
            If Mid$(D$,I,1)<>" "
               Exit 
            End If 
         Next I
         Trap Open In 1,Mid$(D$,2,I-1)
         If Not Errtrap
            FILEL(TCOUNT)=Lof(1)
            Close 1
         End If 
      End If 
   End If 
   FILES$(TCOUNT)=Left$(D$,31)
   D$=Dir Next$
   Inc TCOUNT
Until FILES$(TCOUNT-1)=""
FTOTAL=TCOUNT
Return 
'  
CLRFILES:
TCOUNT=FPOS
For I=1 To _FR
   FILES$(I)=""
   FILEL(I)=0
Next I
Gosub DRWCLR
TCOUNT=1
Return 
'  
VLUMES:
Gosub CLRFILES
D$=Dev First$("d:")-" " : T$="!" : Gosub VTYPE
D$=Dev First$("a:")-" " : T$="?"
VTYPE:
FILES$(TCOUNT)=T$+D$
Repeat 
   Inc TCOUNT
   D$=Dev Next$-" "
   FILES$(TCOUNT)=T$+D$
Until FILES$(TCOUNT)=T$
FTOTAL=TCOUNT
Return 
'
DRWDR:
Pen _BLACK
TCOUNT=FPOS
For I=5 To 18
   N=I+54
   Locate 13,I
   Inc TCOUNT
   If Left$(FILES$(TCOUNT),1)="*"
      T$=Zone$("(Dir)"+Mid$(FILES$(TCOUNT),2)+Space$(3),N)
   Else If Left$(FILES$(TCOUNT),1)="!"
      T$=Zone$("(Dev)"+Mid$(FILES$(TCOUNT),2)+Space$(34-Len(FILES$(TCOUNT))),N)
   Else If Left$(FILES$(TCOUNT),1)="?"
      T$=Zone$(" "+Mid$(FILES$(TCOUNT),2)+Space$(34-Len(FILES$(TCOUNT))),N)
   Else 
      If FILEL(TCOUNT)=0
         If Len(FILES$(TCOUNT))>1
            T$=Zone$(FILES$(TCOUNT)+"0B",N)
         Else 
            T$=Zone$(Space$(38),N)
         End If 
      Else If FILEL(TCOUNT)<1000
         T$=Str$(FILEL(TCOUNT))-" "+"B"
         T$=Zone$(FILES$(TCOUNT)+Space$(7-Len(T$))+T$,N)
      Else If FILEL(TCOUNT)<1000000
         T$=Str$(FILEL(TCOUNT)/1000)-" "+"K"
         T$=Zone$(FILES$(TCOUNT)+Space$(7-Len(T$))+T$,N)
      Else 
         T$=Str$(FILEL(TCOUNT)/1000000)-" "+"M"
         T$=Zone$(FILES$(TCOUNT)+Space$(7-Len(T$))+T$,N)
      End If 
   End If 
   If TCOUNT=(FPOS+Z-58) and Len(FILES$(TCOUNT))>1
      Paper _PANE
   Else 
      Paper _WHITE
   End If 
   Print T$
Next I
If FTOTAL<14
   SLISIZE#=1.0
Else 
   SLISIZE#=FTOTAL/16.0
End If 
SLISIZE#=95.0/SLISIZE#
SLIPOS#=(SLISIZE#*FPOS)/16.0
Ink _BG
Bar 408,48 To 423,143
Ink _GRAY
Bar 410,48+SLIPOS# To 421,48+SLIPOS#+SLISIZE#
Set Zone 42,410,49+SLIPOS# To 421,48+SLIPOS#+SLISIZE#
Paper _WHITE : Pen _BLACK
Locate 51,5 : Print Chr$(147);Chr$(148)
Locate 51,18 : Print Chr$(149);Chr$(150)
Return 
'
DRWCLR:
For I=5 To 18
   Locate 13,I
   Print Space$(38)
Next I
Return 
'
_REQUEST:
RX=200 : RY=59
WTXT$="Request" : WX=RX : WY=RY-14 : WX2=RX+239 : WY2=104 : C0L=_WHITE : Gosub WIND0W
Ink _BG,_WHITE
Text RX+120-(Text Length(TXT1$)*128)/256,RY+11,TXT1$
Text RX+120-(Text Length(TXT2$)*128)/256,RY+21,TXT2$
C0L=_WHITE
BX=RX+16 : BY=RY+30 : BZN=48 : Gosub BUTTONGRAY
KT$=Lower$(Left$(BTXT1$,1))
BTXT1$="Cancel" : BX=RX+124 : BZN=49 : Gosub BUTTONGRAY
Do 
   Gosub TESTMOVE
   If(M=1 and Z=48) or K$=KT$ or A=13
      BX=RX+16 : Gosub PRESS
      REQ=True
      Exit 
   Else If(M=1 and Z=49) or K$="c" or A=27
      BX=RX+124 : Gosub PRESS
      REQ=False
      Exit 
   End If 
Loop 
Gosub WIND0WC
Reset Zone 48 : Reset Zone 49
Return 
'
_ERROR:
Gosub FLSHSCR
_NOTICE:
RX=216 : RY=59
WTXT$="Notice" : WX=RX-5 : WY=RY-14 : WX2=429 : WY2=104 : C0L=_WHITE : Gosub WIND0W
Ink _BG,_WHITE
Text RX+104-(Text Length(TXT1$)*128)/256,RY+11,TXT1$
Text RX+104-(Text Length(TXT2$)*128)/256,RY+21,TXT2$
Gosub WIND0WWAITC
Return 
'
_NOMATH:
TXT1$="mathtrans.library" : TXT2$="is not available" : Goto _ERROR
'  
_NOCOPY:
TXT1$="Need something in" : TXT2$="the copy buffer" : Goto _ERROR
'
_NOUNDO:
TXT1$="Nothing in the" : TXT2$="undo buffer" : Goto _ERROR
'
_WRONGUNDO:
TXT1$="Undo buffer from" : TXT2$="a different waveform" : Goto _ERROR
'
_NOMEMORY:
TXT1$="Not enough memory" : TXT2$="to complete" : Goto _ERROR
'
_NOBSD:
TXT1$="BSD Library not found" : TXT2$="or not connected" : Goto _ERROR
'
_NOREXX:
TXT1$="Arexx server not" : TXT2$="found or not responding" : Goto _ERROR
'
_NOMED:
TXT1$="Octamed arexx port" : TXT2$="not available" : Goto _ERROR
'
_NOTEXIST:
TXT1$="The file does" : TXT2$="not exist" : Goto _ERROR
'
_FILEERROR:
TXT1$="Error opening file" : TXT2$=F$ : Goto _ERROR
'
_OVERWRITE:
BTXT1$="Ok" : TXT1$="File exists" : TXT2$="Overwrite?" : Goto _REQUEST
'  
ECHO_WIN:
WX=98 : WY=26 : WX2=536 : WY2=122 : C0L=_WHITE : Gosub WIND0W
Ink _PANE,_WHITE
Paper _WHITE
Pen _GRAY
Locate ,6 : Centre " 2nd:"+Str$(Length(PBANK)/2)+" 3rd:"+Str$(Length(PBANK)/3)+" 4th:"+Str$(Length(PBANK)/4)+" 5th:"+Str$(Length(PBANK)/5)
Locate ,7 : Centre " 6th:"+Str$(Length(PBANK)/6)+" 7th:"+Str$(Length(PBANK)/7)+" 8th:"+Str$(Length(PBANK)/7)+" 9th:"+Str$(Length(PBANK)/9)
Locate ,8 : Centre " 12th:"+Str$(Length(PBANK)/12)+" 16th:"+Str$(Length(PBANK)/16)+" 24th:"+Str$(Length(PBANK)/24)+" 32nd:"+Str$(Length(PBANK)/32)
Locate ,9 : Centre " 48th:"+Str$(Length(PBANK)/48)+" 64th:"+Str$(Length(PBANK)/64)+" 96th:"+Str$(Length(PBANK)/96)+" 128th:"+Str$(Length(PBANK)/128)
_EFFN=0
T$=""
Repeat 
   If A>47 and A<58
      T$=T$+K$
      Inc _EFFN
   End If 
   If C=65 and _EFFN>0
      Dec _EFFN
      T$=Mid$(T$,0,_COUNT)
   End If 
   Ink _BG,_WHITE
   Text 226,89,"bytes:"+T$+"_"+" "
   Gosub GVAL
Until A=13 or A=27
_EFFN=Val(T$)
Return 
'  
_OPENFXBIGWIN:
REALTIME=True
_REPEAT$=CHAIN$(1)
RX=216 : RY=59 : C0L=_WHITE
WTXT$=_CHOICES$ : WX=RX-5 : WY=RY-15 : WX2=RX+212 : WY2=RY+94 : C0L=_WHITE : Gosub WIND0W
BTXT1$="Ok" : BX=RX+2 : BY=RY+79 : BZN=60 : Gosub BUTTON
BTXT1$="Cancel" : BX=RX+108 : BZN=61 : Gosub BUTTON
Return 
'
_OPENFXSMALLWIN:
REALTIME=True
_REPEAT$=CHAIN$(1)
FXRUN$=""
RX=216 : RY=59 : C0L=_GRAY
WTXT$=_CHOICES$ : WX=RX-5 : WY=RY-15 : WX2=RX+207+5 : WY2=RY+25 : C0L=_WHITE : Gosub WIND0W
BTXT1$="Ok" : BX=RX+2 : BY=RY+10 : BZN=60 : Gosub BUTTON
BTXT1$="Cancel" : BX=RX+108 : BZN=61 : Gosub BUTTON
Return 
'
_OPENFXWIN:
REALTIME=True
_REPEAT$=CHAIN$(1)
RX=216 : RY=59 : C0L=_GRAY
WTXT$=_CHOICES$ : WX=RX-5 : WY=RY-15 : WX2=RX+207+5 : WY2=RY+45 : C0L=_WHITE : Gosub WIND0W
BTXT1$="Ok" : BX=RX+2 : BY=RY+30 : BZN=60 : Gosub BUTTON
BTXT1$="Cancel" : BX=RX+108 : BZN=61 : Gosub BUTTON
Return 
'
_CLOSEFXWIN:
Gosub DIAMAIN
Reset Zone 60
Reset Zone 61
Return 
'
_RUNFXWIN:
Do 
   If Z=60 and M=1
      BX=RX+2 : Gosub PRESS
      REQ=True
      Exit 
   Else If Z=61 and M=1 or A=27
      BX=RX+108 : Gosub PRESS
      REQ=False
      Exit 
   Else If Z=62 and M=1 and FXRUN$<>""
      Repeat 
         Gosub FXSET
         Gosub FXRUN$
         Gosub FXDRW
      Until M=0
   Else If M=1
      Gosub DRWDIALS
   End If 
   Gosub GVAL
Loop 
Gosub MUP
Gosub _CLOSEFXWIN
Gosub WIND0WC
REALTIME=False : CHAIN$(1)="" : _CHANNEL=1
If REQ
   Gosub _UNDOSET
End If 
Return 
'
_RUNFXTEXTWIN:
T$="" : _EXIT=False
Repeat 
   If A>33 and A<127
      T$=T$+K$
      N=N+1
   End If 
   If CK=65 and N>0
      N=N-1
      T$=Mid$(T$,0,N)
   End If 
   Ink _BLACK,_WHITE
   Text X+340-Text Length(TXT1$),Y+72,TXT1$+T$+"_ "
   Repeat 
      Gosub GVAL
      If Z=60 and M=1 or A=13
         BX=RX+2 : Gosub PRESS
         REQ=True
         _EXIT=True
      Else If Z=61 and M=1 or A=27
         BX=RX+108 : Gosub PRESS
         REQ=False
         _EXIT=True
      End If 
   Until _EXIT or C<>0
Until _EXIT
Gosub _CLOSEFXWIN
Gosub WIND0WC
Return 
'
FXDRW:
Ink _WHITE,_SHADOW
Text RX+151,RY-4,Space$(7)
Text RX+200-(Len(Str$(FXSN))*8),RY-4,Str$(FXSN)-" "+FXS$
Cls _BG,RX,RY+6 To RX+207,RY+20
Cls _GRAY,RX+4+FXN-4,RY+6 To RX+4+FXN+4-1,RY+20
Set Zone 62,RX+4+FXN-4,RY+6 To RX+4+FXN+4-1,RY+20
Return 
'
FXSET:
Gosub TESTMOVE
FXN=X Screen(X Mouse)-224
If FXN=<0
   FXN=0
Else If FXN>199
   FXN=200
End If 
Return 
'  
SETREALTIME:
If REALTIME
   _SHOW=False
Else 
   _SHOW=True
End If 
If MACRO
   _SHOW=False
End If 
Return 
'  
'
'
'***************************************************************************** 
'*buttons********************************************************************* 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
' :::::::.   ...    :::::::::::::::::::::::    ...     ::.    :::. .::::::.  
'  ;;;'';;' ';;     ;;;;;;;;;;''';;;;;;;''' .;;;;;;;.  ;;;;,  `;;;;;;`    `; 
'  [[[__[[\.[['     [[[    [[        [[    ,[[     \[[, [[[[[. '[['[==/[[[[, 
'  $$""""Y$$$$      $$$    $$        $$    $$$,     $$$ $$$ "Y$c$$  '''    $ 
' _88o,,od8P88    .d888    88,       88,   "888,_ _,88P888    Y88 ,88b    dP 
' ""YUMMMP"  "YmmMMMM""    MMM       MMM     "YMMMMMP" MM     YM    "YMmMY"  
'
'
'
ALLBUTTONS:
For BZN=1 To _BU
   BTXT1$=BUTS$(BZN) : BX=BUTX(BZN) : BY=BUTY(BZN)
   Gosub BUTTON
Next BZN
Gosub _LPBUTTON
Gosub _LPMIXBUTTON
Return 
'
BUTTONGRAY:
Cls _GRAY,BX-4,BY-2 To BX+BUT_W+1,BY+BUT_H
Goto DRWBUTTON
BUTTON:
Cls _BLACK,BX-3,BY-2 To BX+BUT_W,BY+BUT_H
DRWBUTTON:
Gosub PATSET
Ink C0L+4,_GRAY
Bar BX-2,BY-1 To BX+BUT_W-2,BY+BUT_H-2
Gosub PATRESTORE
Cls C0L,BX,BY To BX+BUT_W-3,BY+BUT_H-2
Ink _BLACK,C0L
Text BX+(98-(Text Length(BTXT1$)))/2,BY+BUT_H-5,BTXT1$
Set Zone BZN,BX-2,BY-1 To BX+BUT_W-2,BY+BUT_H-2
Return 
'
PRESSBUT:
BX=BUTX(PZN) : BY=BUTY(PZN)
PRESS:
For PRB=0 To 1
   Gosub HIGHLIGHT
   Gosub MUP
Next PRB
Return 
'
HIGHLIGHT:
Gr Writing %10
Bar BX-3,BY-2 To BX+BUT_W-1,BY+BUT_H-1
Gr Writing %1
Return 
'
_TGLLP:
If _LP
   _LP=False
Else 
   _LP=True
End If 
_LPBUTTON:
If _LP
   C0L=_WHITE
Else 
   C0L=_PANE
End If 
BTXT1$="Loop" : BZN=13 : BX=BUTX(BZN) : BY=BUTY(BZN)
Gosub BUTTON
Return 
'
_TGLLPMIX:
If _LPMIX
   _LPMIX=False
Else 
   _LPMIX=True
End If 
_LPMIXBUTTON:
If _LPMIX
   C0L=_WHITE
Else 
   C0L=_PANE
End If 
BTXT1$="Mix Loop" : BZN=14 : BX=BUTX(BZN) : BY=BUTY(BZN)
Gosub BUTTON
Return 
'
_REPEAT:
If _REPEAT$=""
   TXT1$="No subroutine to" : TXT2$="repeat" : Goto _ERROR
Else 
   PASS=0
   Gosub _UNDOSET
   REQ=True
   _CHOICE=True
   _CHOICEG$=_REPEAT$
   _TOAST$=_REPEAT$ : Gosub _TOAST
End If 
Return 
'  
'
'
'***************************************************************************** 
'*gadgets********************************************************************* 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'    .,-:::::/    :::.     ::::::-.   .,-:::::/  .,:::::::::::::::: .::::::. 
'   ;;-'````'     ;;`;;    ;;,   `';,;;-'````'   ;;;;'''';;;;;;;''';;;`    `;
'   [[   [[[[[[/ ,[[ '[[,  `[[     [[[[   [[[[[[/ [[cccc     [[    '[==/[[[[,
'   $$c.    "$$ c$$$cc$$$c  $$,    $$$$c.    "$$  $$""""     $$      '''    $
'   `Y8bo,,,o88  888   888, 888_,o8P'`Y8bo,,,o88  888oo,_    88,   ,88b    dP
'     `'YMUP"YMM YMM   ""` "MMMMP"`    `'YMUP"YMM """"YUM    MMM     "YMmMY" 
'
'
'
_SCROLL:
If SETTING$(21)<>_FALSE$ Then Scroll 2
Return 
'
_RAINBOW:
If _AMIVER>2
   Set Rainbow 0,_PANE,WVE_H+1,"","",""
End If 
Return 
'
_RAINSET:
If _AMIVER>2
   WVE_D=WVE_H/4
   BBARS=0 : CBARS=0
   Repeat 
      Inc BBARS
      CCOLS=CBARS
      Repeat 
         If B=BBARS
            Rain(0,CCOLS)=Colour(_PANE)+$111
         Else 
            Rain(0,CCOLS)=Colour(_PANE)
         End If 
         Inc CCOLS
      Until CCOLS>CBARS+WVE_D
      Add CBARS,WVE_D
   Until CBARS>WVE_D*3
   Rainbow 0,0,56,WVE_H
   C0L=PC0L
End If 
Return 
'  
_RAINRESTORE:
RNG_T=0 : RNG_B=WVE_H
If _AMIVER>2
   If BBARS=0
      Return 
   End If 
   CBARS=0
   Repeat 
      Rain(0,CBARS)=_PANEC
      Inc CBARS
   Until CBARS>WVE_H-1
   Rainbow 0,0,56,WVE_H
End If 
Return 
'
_TOASTWAITER:
If _TOASTWAIT>0
   Inc _TOASTWAIT
   If _TOASTWAIT>5
      Gosub FLSHSCRC
      _TOASTWAIT=0
   End If 
End If 
Return 
'
_TOAST:
If _TOAST$="!"
   _TOASTWAIT=1
   _TOAST$=""
Else 
   _T=Len(_TOAST$)
   Repeat 
      Scroll 1
      Dec _T
   Until _T=0
   Ink _SHADOW,_PANE
   Text TST_W-Text Length(_TOAST$),TST_T,_TOAST$
   _TOAST$=""
End If 
Return 
'
DIAMAIN:
I=0
DIA_X=120
DIA_Y=WVE_H+25
DIA_W=33
DIA_C=0
Repeat 
   Gosub DIALS
   Inc I : Inc DIA_C
Until I>1
Return 
'  
DIARES:
I=2
DIA_X=228
DIA_Y=HDR_H+52
DIA_W=104
DIA_C=0
Ink _GRAY,_WHITE
Text X+267,Y+77,"Freq.        Q."
Repeat 
   Gosub DIALS
   Inc I : Inc DIA_C
Until I>3
Return 
'  
DIACOMP:
I=4
DIA_X=228
DIA_Y=HDR_H+52
DIA_W=104
DIA_C=0
Ink _GRAY,_WHITE
Text X+267,Y+77,"Thres.       Slope"
Text X+267,Y+100,"Window       Ahead"
Text X+267,Y+123,"Attack       Re."
Repeat 
   Gosub DIALS
   If I=5 or I=7
      DIA_Y=DIA_Y+23
      DIA_C=DIA_C-2
   End If 
   Inc I : Inc DIA_C
Until I>9
Return 
'  
DIAT0NE:
I=10
DIA_X=228
DIA_Y=HDR_H+52
DIA_W=104
DIA_C=0
Ink _GRAY,_WHITE
Text X+267,Y+77,"Freq.        Amp."
Repeat 
   Gosub DIALS
   Inc I : Inc DIA_C
Until I>11
Return 
'
DIALS:
Paste Bob DIA_X+(DIA_W*DIA_C),DIA_Y,1
ROTX(I)=DIA_X+14+(DIA_W*DIA_C) : ROTY(I)=DIA_Y+8
ROTX2(I)=ROTX(I)+16 : ROTY2(I)=ROTY(I)+10
STRTX=ROTX(I) : STRTY=ROTY(I)
DESTX=STRTX+7.0*Cos(ROT#(I)) : DESTY=STRTY+5.0*Sin(ROT#(I))
Ink _SHADOW
Draw STRTX,STRTY To DESTX,DESTY
STRTX=STRTX+3.5*Cos(ROT#(I)) : STRTY=STRTY+2.5*Sin(ROT#(I))
Ink _BLACK
Draw STRTX,STRTY To DESTX,DESTY
Return 
'
DIALSET:
DY=Y Screen(Y Mouse)
CY=DY
Repeat 
   Gosub TESTMOVE
   If Key Shift=1 or Key Shift=4 or Key Shift=5
      _INC#=0.01
   Else 
      _INC#=0.1
   End If 
   If CY<DY
      ROT#(_DIAL)=ROT#(_DIAL)+(_INC#*(DY-CY))
      If ROT#(_DIAL)>13.3
         ROT#(_DIAL)=13.3
      End If 
      I=_DIAL
   Else If CY>DY
      ROT#(_DIAL)=ROT#(_DIAL)-(_INC#*(CY-DY))
      If ROT#(_DIAL)<8.5
         ROT#(_DIAL)=8.5
      End If 
      I=_DIAL
   End If 
   DY=CY
   If _DIAL=1
      Volume PAULA(7),Int((ROT#(_DIAL)-8.5)*13.3)
      Gosub DIAMAIN
   Else If _DIAL=0
      FREQ=(((ROT#(_DIAL)-8.5)*13.3)*(256+184))+601
      _AMIHZ=False
      Gosub DIAMAIN
      Gosub SETHZ
      If RENDERING
         Gosub DRWHZ
      End If 
   Else If _DIAL=3
      _RQ#=(ROT#(_DIAL)-8.5)/4.8
      Gosub RESET
      Gosub DIARES
   Else If _DIAL=2
      RESN=Int(((ROT#(_DIAL)-8.5)/4.8)*200.0)
      Gosub RESET
      Gosub DIARES
   Else If _DIAL=4
      _THRESHOLDN#=((ROT#(_DIAL)-8.5)/4.8)*100.0
      Gosub OMSET
      Gosub DIACOMP
   Else If _DIAL=5
      _SLOPEN#=((ROT#(_DIAL)-8.5)/4.8)*100.0
      Gosub OMSET
      Gosub DIACOMP
   Else If _DIAL=6
      _WINDOWN#=((ROT#(_DIAL)-8.5)/4.8)
      Gosub OMSET
      Gosub DIACOMP
   Else If _DIAL=7
      _LOOKAHEADN#=((ROT#(_DIAL)-8.5)/4.8)*100.0
      Gosub OMSET
      Gosub DIACOMP
   Else If _DIAL=8
      _ATTACKN#=((ROT#(_DIAL)-8.5)/4.8)*10.0
      Gosub OMSET
      Gosub DIACOMP
   Else If _DIAL=9
      _RELEASEN#=((ROT#(_DIAL)-8.5)/4.8)*500.0
      Gosub OMSET
      Gosub DIACOMP
   Else If _DIAL=10
      T0NEV#=Int((((ROT#(_DIAL)-8.5)/4.8)*(FREQ/8))+5)
      Gosub T0SET
      Gosub DIAT0NE
   Else If _DIAL=11
      T0NEA=((ROT#(_DIAL)-8.5)/4.8)*127
      Gosub DIAT0NE
   End If 
Until M=0
Return 
'
DRWDIALS:
For _DIAL=0 To 1
   If Fn DIALZONE(_DIAL)
      Gosub DIALSET
      Exit 
   End If 
Next _DIAL
If CHAIN$(1)="_RESONANTP"
   For _DIAL=2 To 3
      If Fn DIALZONE(_DIAL)
         Gosub DIALSET
         Exit 
      End If 
   Next _DIAL
Else If CHAIN$(1)="_COMPRESSORP"
   For _DIAL=4 To 9
      If Fn DIALZONE(_DIAL)
         Gosub DIALSET
         Exit 
      End If 
   Next _DIAL
Else If WTXT$-" "="ToneGenerator"
   For _DIAL=10 To 11
      If Fn DIALZONE(_DIAL)
         Gosub DIALSET
         Exit 
      End If 
   Next _DIAL
End If 
Return 
'  
_PROBAR:
If REALTIME or FX>=FXE Then Return 
If FX>FX_START and FX_LENGTH>0
   PRO#=FX-FX_START
   PRO=Int((PRO#/FX_LENGTH)*128)
   If PPRO<>PRO
      A=Asc(Inkey$)
      If A=27
         FX=FXE
         Return 
      End If 
      M=Mouse Key
      If M=3 and PLYING
         Gosub _STOP
         Gosub MUP
      End If 
      If PRO<2
         Ink _BLACK
         Bar 256,72 To 256+126,77
      Else 
         Cls _GRAY,256,72 To 256+PRO,78
      End If 
   End If 
   PPRO=PRO
End If 
Return 
'
_GNOME:
Cls _HIGHLIGHT,GNO_X,GNO_Y To GNO_W,GNO_H
Return 
'
_GNOMEC:
Cls _PANE,GNO_X,GNO_Y To GNO_W,GNO_H
Return 
'
LEV_OUT:
Scroll 3
Return 
'
DRW_LEV:
If RENDERING Then Return 
If Length(PBANK)=0 Then Return 
If _MENUDO or _DIRECT Then Return 
If M0DE=4
   If PBANK-7>0 and PBANK-7<5
      OSC_START=Start(PBANK)+OFFSET(PBANK-7)
   Else 
      Return 
   End If 
Else 
   OSC_START=Start(PBANK)+OFFSET(1)
End If 
PI=0
If OSCILLO
   Gosub OSC_BCK
   Ink _WHITE
   OI=0
   If M0DE=1 or M0DE=4
      '  
      '********************      
      For PI=0 To 256
         OSC_X=Peek(OSC_START+OI)
         If OSC_X>127
            OSC_X=OSC_X-256
         End If 
         Plot PI+OSC_W-128,(OSC_X/2)+77
         Add OI,2
      Next PI
   Else 
      '  
      '********************
      For PI=0 To 512
         OSC_X=Peek(OSC_START+PI)
         If OSC_X>127
            OSC_X=OSC_X-256
         End If 
         OSC_Y=Peek(OSC_START+P_LENGTH+PI)
         If OSC_Y>127
            OSC_Y=OSC_Y-255
         End If 
         Gosub DRW_OSC
      Next PI
   End If 
End If 
If SETTING$(14)=_FALSE$ Then Return 
If _AMIVER>4
   '  
   '********************          
   'RMS LEVEL METER 
   LMC=BSIZE
   If M0DE=2
      LMC=LMC*2
   Else If M0DE=3
      LMC=LMC*4
   End If 
   SUMM#=0.0
   For PI=0 To LMC
      LMN#=Peek(OSC_START+PI)
      If LMN#>127
         LMN#=LMN#-256
      End If 
      LMN#=LMN#/127.0
      SUMM#=SUMM#+(LMN#*LMN#)
   Next PI
   LML=-Int(Sqr(SUMM#/LMC)*16.0)
Else 
   '  
   '********************          
   'PEAK LEVEL METER
   LML=0
   For PI=0 To LMC Step 10
      LMN=(Peek(OSC_START+PI)*32)/256
      If LMN>15
         LMN=LMN-32
      Else 
         LMN=-LMN
      End If 
      If LMN<LML
         LML=LMN
      End If 
   Next PI
End If 
Gosub LEV_OUT
Ink _HIGHLIGHT
DRWLEV:
Gosub GFXSET
Bar LEV_X,LEV_Y+LML To LEV_W,LEV_Y+1
Gosub GFXRESTORE
Ink _WHITE
Return 
'
OSC_BCK:
C0L=_BLACK
T$="x" : OSC_BZN=58 : OSC_BX=OSC_W+132 : OSC_BY=14 : Gosub OSC_TAB
T$=Str$(OSCMODE)-" " : OSC_BZN=59 : OSC_BY=32 : Gosub OSC_TAB
Ink C0L
Bar OSC_W-128,13 To OSC_W+128,141
Return 
'
OSC_TAB:
Cls C0L,OSC_BX,OSC_BY To OSC_BX+23,OSC_BY+16
Ink _GRAY,C0L
Text OSC_BX+8,OSC_BY+10,T$
Set Zone OSC_BZN,OSC_BX,OSC_BY To OSC_BX+23,OSC_BY+16
Return 
'
DRW_OSC:
If OSCMODE=1
   Plot OSC_Y+OSC_W,-(OSC_X/2)+77
Else If OSCMODE=2
   Plot OSC_X+OSC_W,-(OSC_Y/2)+77
Else If OSCMODE=3
   OSC_N=((PI+128)/2)+127
   If OSC_N<OSC_W+128
      Plot OSC_N,(OSC_X/2)+77
      Plot OSC_N,(OSC_Y/2)+77
   End If 
Else If OSCMODE=4
   Plot -OSC_Y+OSC_W,(OSC_X/2)+77
Else If OSCMODE=5
   Plot -OSC_X+OSC_W,(OSC_Y/2)+77
End If 
Return 
'
_TGLOSCILLO:
Gosub MUP
Gosub NUDGEPOS
RENDERING=True
If OSCILLO
   OSCILLO=False
   Reset Zone 58
   Reset Zone 59
   Gosub _SHOWWAVE
   Gosub FRESHSEL
Else 
   OSCILLO=True
   Gosub OSC_BCK
End If 
Gosub NUDGEPOS
RENDERING=False
Return 
'
_TGLOSCILLOMODE:
Gosub MUP
Inc OSCMODE
If OSCMODE>5
   OSCMODE=1
End If 
Gosub OSC_BCK
Return 
'
'
'
'***************************************************************************** 
'*network********************************************************************* 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'   ::.    :::..,::::::::::::::::.::    .   .::    ...     :::::::..  ::::::  .  
'   ;;;;,  `;;;;;;;'''';;;;;;;'''';;,  ;;  ;;;' .;;;;;;;.  ;;;;``;;;; ```;;; .;;,  
'    [[[[[. '[[ [[cccc     [[     '[[, [[, [[' ,[[     \[[,\[[[,/[[['    [[[[[/' 
'    $$$ "Y$c$$ $$""""     $$       Y$c$$$c$P  $$$,     $$$"$$$$$$c     _$$$$, 
'   888    Y88  888oo,_    88,       "88"888   "888,_ _,88P,888b "88bo "888"88o, 
'   MM     YM   """"YUM    MMM        "M "M"     "YMMMMMP" "MMMM   "W" MMM "MMP""  
'
'   BSDSocket.library Procedures originally by Internext Software (John Bintz) 
'
SOCK_OPENCONNECTION:
Dreg(0)=2
Dreg(1)=2
Dreg(2)=0
SOCKET=Lib Call(2,-$1E)
Areg(0)=Varptr(_ADDR$)
HOSTINFO=Lib Call(2,-$D2)
HOSTADDRESS=Leek(Leek(Leek(HOSTINFO+16)))
T$=Chr$(32)+Chr$(2)+String$(Chr$(0),14)
Doke Varptr(T$)+2,Deek(Varptr(_PORT)+2)
Loke Varptr(T$)+4,Leek(Varptr(HOSTADDRESS))
Dreg(0)=SOCKET
Areg(0)=Varptr(T$)
Dreg(1)=Len(T$)
CONNECT=Lib Call(2,-$36)
Gosub SOCK_SETIO
If CONNECT=-1
   TXT1$="Failed socket" : TXT2$="" : Gosub _NOTICE
   Gosub SOCK_CLOSE
   SOCKET=-1
End If 
Return 
'
SOCK_SETIO:
IOC_FIONBIO=($80000000 or(4*65536) or 126 or(Asc("f")*256))
IOC_FIOASYNC=($80000000 or(4*65536) or 125 or(Asc("f")*256))
NBIO=1
Dreg(0)=SOCKET : Dreg(1)=IOC_FIONBIO : Areg(0)=Varptr(NBIO)
NOBLOCK=Lib Call(2,-$72)
NBIO=1
Dreg(0)=SOCKET : Dreg(1)=IOC_FIOASYNC : Areg(0)=Varptr(NBIO)
NOBLOCK=Lib Call(2,-$72)
Return 
'
SOCK_SENDSTRING:
Dreg(0)=SOCKET
Areg(0)=Varptr(MSG$)
Dreg(1)=32
Dreg(2)=0
NBYTES=Lib Call(2,-$42)
Return 
'
SOCK_CLOSE:
If SOCKET<>-1
   Dreg(0)=SOCKET
   NBYTES=Lib Call(2,-$78)
End If 
Return 
'  
SOCK_OPENVST:
Dreg(0)=2
Dreg(1)=2
Dreg(2)=0
SOCKVST=Lib Call(2,-$1E)
Areg(0)=Varptr(_ADDR$)
HOSTINFO=Lib Call(2,-$D2)
HOSTADDRESS=Leek(Leek(Leek(HOSTINFO+16)))
T$=Chr$(32)+Chr$(2)+String$(Chr$(0),14)
Doke Varptr(T$)+2,Deek(Varptr(_PORTVST)+2)
Loke Varptr(T$)+4,Leek(Varptr(HOSTADDRESS))
Dreg(0)=SOCKVST
Areg(0)=Varptr(T$)
Dreg(1)=Len(T$)
CONNECT=Lib Call(2,-$36)
Gosub SOCK_SETIOVST
If CONNECT=-1
   TXT1$="VST network socket" : TXT2$="failed!" : Gosub _NOTICE
   Gosub SOCK_CLOSEVST
   SOCKET=-1
End If 
Return 
'
SOCK_SETIOVST:
IOC_FIONBIO=($80000000 or(4*65536) or 126 or(Asc("f")*256))
IOC_FIOASYNC=($80000000 or(4*65536) or 125 or(Asc("f")*256))
NBIO=1
Dreg(0)=SOCKVST : Dreg(1)=IOC_FIONBIO : Areg(0)=Varptr(NBIO)
NOBLOCK=Lib Call(2,-$72)
NBIO=1
Dreg(0)=SOCKVST : Dreg(1)=IOC_FIOASYNC : Areg(0)=Varptr(NBIO)
NOBLOCK=Lib Call(2,-$72)
Return 
'
SOCK_SENDCUP:
VCH=M0DE
If VCH=3 Then VCH=4
VCH$=Str$(VCH)-" "
Dreg(0)=SOCKVST
Areg(0)=Varptr(VCH$)
Dreg(1)=1
Dreg(2)=0
NBYTES=Lib Call(2,-$42)
Return 

SOCK_SENDP_BUF:
Dreg(0)=SOCKVST
Areg(0)=P_BUF
Dreg(1)=BSIZE*VCH
Dreg(2)=0
NBYTES=Lib Call(2,-$42)
Return 
'  
SOCK_CLOSEVST:
If SOCKVST<>-1
   Dreg(0)=SOCKVST
   NBYTES=Lib Call(2,-$78)
End If 
Return 
'
'
'
'***************************************************************************** 
'*init************************************************************************ 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'    :::  ::.    :::. :::  ::::::::::  
'    ;;;  ;;;;,  `;;; ;;;  ;;;;;;;'''  
'    [[[   [[[[[. '[[ [[[      [[      
'    $$$,  $$$ "Y$c$$ $$$,     $$      
'   o88888888    Y88 o88888    88,     
'   MMM"MMMM     YM  MMM"MM    MMM     
'
'
'
_INIT:
Reserve As Chip Work 3,FBSIZE
Reserve As Chip Work 4,FBSIZE
P_STARTB1=Start(3) : P_STARTB2=Start(4)
PROGDIR$=Dir$ : PPROGDIR$=PROGDIR$
Trap Lib Open 1,"mathtrans.library",0
If Errtrap Then MATH=False
Trap Lib Open 2,"dos.library",_DOSVER
If Errtrap Then Dec _DOSVER
Lib Close 2
Trap Lib Open 2,"bsdsocket.library",0
If Errtrap
   BSD=False
Else 
   S_NULL$=Space$(1) : Poke Varptr(S_NULL$),0
   S_VALU$=Space$(4) : Loke Varptr(S_VALU$),0
End If 
If Exist("fxbox.cfg")
   Trap Open In 1,"fxbox.cfg"
   If Errtrap
      Goto RS
   End If 
   N=Lof(1) : Close 1 : T$=Space$(N)
   Bload "fxbox.cfg",Varptr(T$)
   PX=1 : I=0 : CX=0
   Repeat 
      CX=Instr(T$,Chr$(44),PX)
      AX=Instr(T$,Chr$(10),PX)
      If CX and CX<AX
         AX=CX
      End If 
      If AX
         SETTING$(I)=Mid$(T$,PX,AX-PX)
      End If 
      PX=AX+1 : Inc I
   Until PX>=N
   If I<_OP
      Restore OPT
      For I=1 To 6
         Read T$
      Next I
      For I=7 To _OP
         Read SETTING$(I)
      Next I
   End If 
Else 
   RS:
   Restore OPT
   For I=1 To _OP
      Read SETTING$(I)
   Next I
End If 
For I=1 To 4
   DEVS$(I)=SETTING$(I)
Next I
_ADDR$=SETTING$(5)
_PORT=Val(SETTING$(6))
_PORTVST=_PORT+2
CN=Deek(Leek(4)+296)
For I=0 To 3
   If Btst(I,CN) Then _CPU$=Str$(I+1)+"0"
Next I
_CPU$=Right$(_CPU$,2)
If _CPU$="00"
   _AMIVER=1
Else If _CPU$="20"
   _AMIVER=3
Else 
   _AMIVER=5
End If 
_CPU$="680"+_CPU$
If Fast Free>0 Then Inc _AMIVER
If _AMIVER<5
   If _AMIVER>2
      SCR_D=8
   Else 
      SCR_D=4
   End If 
   _PREVIEW=False
   SETTING$(13)=_FALSE$
   SETTING$(14)=_FALSE$
   SETTING$(15)=_FALSE$
   SETTING$(16)=_FALSE$
   SETTING$(17)=_FALSE$
   SETTING$(18)="-1"
   SETTING$(19)=_FALSE$
   SETTING$(21)=_FALSE$
   _STEP=2
End If 
If SCR_D=4
   _HIGHLIGHT=_GRAY
   _BLACK=_BG
   _SHADOW=_GRAY
End If 
If SCR_D<=8
   _GREEN=_WHITE
   _DARKGREEN=_BLACK
End If 
If Ntsc
   BUT_H=11 : SCR_H=200
   Gosub _TGLMON
End If 
'
'
'
'***************************************************************************** 
'*screen********************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'    .::::::.   .,-:::::::::::::..  .,::::::.,::::::::.    :::.  
'   ;;;`    `;,;;;'````' ;;;;``;;;; ;;;;'''';;;;'''';;;;,  `;;;  
'   '[==/[[[[,[[[        \[[[,/[[['  [[cccc  [[cccc  [[[[[. '[[  
'     '''    $$$$        "$$$$$$c    $$""""  $$""""  $$$ "Y$c$$  
'   ,88b    dP`88bo,__,o,,888b "88bo 888oo,_ 888oo,_888    Y88   
'     "YMmMY"   "YUMMMMMP"MMMM   "W" """"YUM """"YUMMM     YM    
'
'
'
Screen Open 1,SCR_W,WVE_H,SCR_D,SCR_R
Flash Off : Curs Off 
Screen Hide 
Screen Open 0,SCR_W,SCR_H,SCR_D,SCR_R
Flash Off : Curs Off 
Gosub _TGL1991
Limit Mouse 128,44 To 448,300
Def Scroll 1,TST_X+8,TST_Y To TST_W+1,TST_H+1,-8,0
Def Scroll 2,TST_X,TST_Y To TST_W+1,TST_H+1,-1,0
Def Scroll 3,LEV_X,LEV_Y-17 To LEV_W+2,LEV_Y+1,0,1
Reserve Zone 79
Restore AUD
For I=1 To 7
   Read PAULA(I)
Next I
Restore BUT
For I=1 To _BU
   Read BUTS$(I),BUTX(I),BUTY(I),BUTG$(I)
   BUTY(I)=SCR_H-BUTY(I)
Next I
Gosub _RAINBOW
Auto View On : Amos To Front 
'
'
'
'***************************************************************************** 
'*menu************************************************************************ 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'    .        :  .,::::::::.    :::. ...    :::  
'    ;;,.    ;;; ;;;;'''';;;;,  `;;;';;     ;;;  
'    [[[[, ,[[[[, [[cccc  [[[[[. '[[[['     [[[  
'    $$$$$$$$"$$$ $$""""  $$$ "Y$c$$$$      $$$  
'   888 Y88" 888o 888oo,_888    Y88 88    .d888    
'   MM  M'  "MMMM """"YUMMM     YM   "YmmMMMM""    
'
'
'
MENS$(1,0,0)="File    "
MENS$(1,1,0)=" New           " : MENG$(1,1,0)="_NEW"
MENS$(1,2,0)=" Open          " : MENG$(1,2,0)="_OPEN"
MENS$(1,3,0)=" Open As Raw   " : MENG$(1,3,0)="_OPENASRAW"
MENS$(1,4,0)=" Revert        " : MENG$(1,4,0)="_REVERT"
MENS$(1,5,0)=" Save As       " : MENG$(1,5,0)="_SAVEAS"
MENS$(1,6,0)=" Save As Bank  " : MENG$(1,6,0)="_SAVEASBANK"
MENS$(1,7,0)="---------------"
MENS$(1,8,0)=" Mode     >    "
MENS$(1,8,1)="    "
MENS$(1,8,2)=" Mono    " : MENG$(1,8,2)="M0DEMENU"
MENS$(1,8,3)=" Stereo  " : MENG$(1,8,3)=MENG$(1,8,2)
MENS$(1,8,4)=" Quad    " : MENG$(1,8,4)=MENG$(1,8,2)
MENS$(1,8,5)=" Multi   " : MENG$(1,8,5)=MENG$(1,8,2)
MENS$(1,8,6)=" 14bit   " : MENG$(1,8,6)="_14BIT"
MENS$(1,9,0)=" Rate     >    "
MENS$(1,9,1)="    "
MENS$(1,9,2)=" 8000   " : MENG$(1,9,2)="RATEMENU"
MENS$(1,9,3)=" 11025  " : MENG$(1,9,3)=MENG$(1,9,2)
MENS$(1,9,4)=" 12000  " : MENG$(1,9,4)=MENG$(1,9,2)
MENS$(1,9,5)=" 16000  " : MENG$(1,9,5)=MENG$(1,9,2)
MENS$(1,9,6)=" 22050  " : MENG$(1,9,6)=MENG$(1,9,2)
MENS$(1,9,7)=" 24000  " : MENG$(1,9,7)=MENG$(1,9,2)
MENS$(1,9,8)=" 32000  " : MENG$(1,9,8)=MENG$(1,9,2)
MENS$(1,9,9)=" 44100  " : MENG$(1,9,9)=MENG$(1,9,2)
MENS$(1,9,10)=" 48000  " : MENG$(1,9,10)=MENG$(1,9,2)
MENS$(1,9,11)=" 96000  " : MENG$(1,9,11)=MENG$(1,9,2)
MENS$(1,10,0)="---------------"
MENS$(1,11,0)=" Quit          " : MENG$(1,11,0)="_QUIT"
MENS$(2,0,0)="Edit    "
MENS$(2,1,0)=" Cut            " : MENG$(2,1,0)="_CUT"
MENS$(2,2,0)=" Crop           " : MENG$(2,2,0)="_CROP"
MENS$(2,3,0)=" Copy           " : MENG$(2,3,0)="_COPY"
MENS$(2,4,0)=" Paste          " : MENG$(2,4,0)="_PASTE"
MENS$(2,5,0)=" Mix       >    "
MENS$(2,5,1)="    "
MENS$(2,5,2)=" Mix         " : MENG$(2,5,2)="_MIX" : MENFX(2,5,2)=True
MENS$(2,5,3)=" Add         " : MENG$(2,5,3)="_ADD" : MENFX(2,5,3)=True
MENS$(2,5,4)=" Subtract    " : MENG$(2,5,4)="_SUBTRACT" : MENFX(2,5,4)=True
MENS$(2,5,5)=" Modulate    " : MENG$(2,5,5)="_MODULATE" : MENFX(2,5,5)=True
MENS$(2,5,6)=" Interleave  " : MENG$(2,5,6)="_INTERLEAVE" : MENFX(2,5,6)=True
MENS$(2,5,7)=" Xor         " : MENG$(2,5,7)="_XOR" : MENFX(2,5,7)=True
MENS$(2,6,0)="----------------"
MENS$(2,7,0)=" Frame     >    "
MENS$(2,7,1)="    "
MENS$(2,7,2)=" Sample Left   " : MENG$(2,7,2)="_SAMPLELEFT" : MENFX(2,7,2)=True
MENS$(2,7,3)=" Sample Right  " : MENG$(2,7,3)="_SAMPLERIGHT" : MENFX(2,7,3)=True
MENS$(2,7,4)=" Beat Left     " : MENG$(2,7,4)="_BEATLEFT" : MENFX(2,7,4)=True
MENS$(2,7,5)=" Beat Right    " : MENG$(2,7,5)="_BEATRIGHT" : MENFX(2,7,5)=True
MENS$(2,8,0)=" Size           " : MENG$(2,8,0)="_SIZE"
MENS$(2,9,0)="----------------"
MENS$(2,10,0)=" Range All      " : MENG$(2,10,0)="_RANGEALL"
MENS$(2,11,0)=" Range Display  " : MENG$(2,11,0)="_RANGEDISPLAY"
MENS$(2,12,0)=" Range None     " : MENG$(2,12,0)="_RANGENONE"
MENS$(2,13,0)="----------------"
MENS$(2,14,0)=" Clear Copy     " : MENG$(2,14,0)="_CLEARCOPY"
MENS$(2,15,0)=" Swap Copy      " : MENG$(2,15,0)="_COPYSWAP"
MENS$(2,16,0)="----------------"
MENS$(2,17,0)=" Undo           " : MENG$(2,17,0)="_UNDO"
MENS$(3,0,0)="Process    "
MENS$(3,1,0)=" Volume    >    "
MENS$(3,1,1)="    "
MENS$(3,1,2)=" Volume     " : MENG$(3,1,2)="_VOLUME" : MENFX(3,1,2)=True
MENS$(3,1,3)=" Fade In    " : MENG$(3,1,3)="_FADEIN" : MENFX(3,1,3)=True
MENS$(3,1,4)=" Fade Out   " : MENG$(3,1,4)="_FADEOUT" : MENFX(3,1,4)=True
MENS$(3,1,5)=" Half       " : MENG$(3,1,5)="_HALF" : MENFX(3,1,5)=True
MENS$(3,1,6)=" Double     " : MENG$(3,1,6)="_DOUBLE" : MENFX(3,1,6)=True
MENS$(3,1,7)=" Silence    " : MENG$(3,1,7)="_SILENCE" : MENFX(3,1,7)=True
MENS$(3,1,8)=" Maximize   " : MENG$(3,1,8)="_MAXIMIZE" : MENFX(3,1,8)=True
MENS$(3,1,9)=" Expand     " : MENG$(3,1,9)="_EXPAND" : MENFX(3,1,9)=True
MENS$(3,1,10)=" Contract   " : MENG$(3,1,10)="_CONTRACT" : MENFX(3,1,10)=True
MENS$(3,1,11)=" DC Offset  " : MENG$(3,1,11)="_DCOFFSET" : MENFX(3,1,11)=True
MENS$(3,2,0)=" Resample  >    "
MENS$(3,2,1)="    "
MENS$(3,2,2)=" by Rate      " : MENG$(3,2,2)="_RESAMPLE" : MENFX(3,2,2)=True
MENS$(3,2,3)=" by Size      " : MENG$(3,2,3)="_RESIZE" : MENFX(3,2,3)=True
MENS$(3,2,4)=" by BPM       " : MENG$(3,2,4)="_REBPM" : MENFX(3,2,4)=True
MENS$(3,2,5)=" Octave Up    " : MENG$(3,2,5)="_OCTAVEUP" : MENFX(3,2,5)=True
MENS$(3,2,6)=" Octave Down  " : MENG$(3,2,6)="_OCTAVEDOWN" : MENFX(3,2,6)=True
MENS$(3,2,7)=" Note Up      " : MENG$(3,2,7)="_NOTEUP" : MENFX(3,2,7)=True
MENS$(3,2,8)=" Note Down    " : MENG$(3,2,8)="_NOTEDOWN" : MENFX(3,2,8)=True
MENS$(3,2,9)=" Fine Up      " : MENG$(3,2,9)="_FINEUP" : MENFX(3,2,9)=True
MENS$(3,2,10)=" Fine Down    " : MENG$(3,2,10)="_FINEDOWN" : MENFX(3,2,10)=True
MENS$(3,3,0)=" Filter    >    "
MENS$(3,3,1)="    "
MENS$(3,3,2)=" High Pass    " : MENG$(3,3,2)="_HIGHPASS" : MENFX(3,3,2)=True
MENS$(3,3,3)=" Low Pass     " : MENG$(3,3,3)="_LOWPASS" : MENFX(3,3,3)=True
MENS$(3,3,4)=" Band Pass    " : MENG$(3,3,4)="_BANDPASS" : MENFX(3,3,4)=True
MENS$(3,3,5)=" Resonant     " : MENG$(3,3,5)="_RESONANT" : MENFX(3,3,5)=True
MENS$(3,3,6)=" Smooth       " : MENG$(3,3,6)="_SMOOTH" : MENFX(3,3,6)=True
MENS$(3,3,7)=" Wave Shaper  " : MENG$(3,3,7)="_WAVESHAPER" : MENFX(3,3,7)=True
MENS$(3,3,8)=" Bezier       " : MENG$(3,3,8)="_BEZIER" : MENFX(3,3,8)=True
MENS$(3,3,9)=" Parabolic    " : MENG$(3,3,9)="_PARABOLIC" : MENFX(3,3,9)=True
MENS$(3,4,0)=" Distort   >    "
MENS$(3,4,1)="    "
MENS$(3,4,2)=" Tube        " : MENG$(3,4,2)="_TUBE" : MENFX(3,4,2)=True
MENS$(3,4,3)=" Saturation  " : MENG$(3,4,3)="_SATURATION" : MENFX(3,4,3)=True
MENS$(3,4,4)=" Overdrive   " : MENG$(3,4,4)="_OVERDRIVE" : MENFX(3,4,4)=True
MENS$(3,4,5)=" Alias       " : MENG$(3,4,5)="_ALIAS" : MENFX(3,4,5)=True
MENS$(3,4,6)=" Fold        " : MENG$(3,4,6)="_FOLD" : MENFX(3,4,6)=True
MENS$(3,5,0)=" Effects   >    "
MENS$(3,5,1)="    "
MENS$(3,5,2)=" Phase        " : MENG$(3,5,2)="_PHASE" : MENFX(3,5,2)=True
MENS$(3,5,3)=" Simple Echo  " : MENG$(3,5,3)="_ECHO" : MENFX(3,5,3)=True
MENS$(3,5,4)=" Reverb       " : MENG$(3,5,4)="_REVERB" : MENFX(3,5,4)=True
MENS$(3,5,5)=" Tremolo      " : MENG$(3,5,5)="_TREMOLO" : MENFX(3,5,5)=True
MENS$(3,5,6)=" Compressor   " : MENG$(3,5,6)="_COMPRESSOR" : MENFX(3,5,6)=True
MENS$(3,6,0)=" Bitwise   >    "
MENS$(3,6,1)="    "
MENS$(3,6,2)=" Rotate Left        " : MENG$(3,6,2)="_ROTATELEFT" : MENFX(3,6,2)=True
MENS$(3,6,3)=" Rotate Right       " : MENG$(3,6,3)="_ROTATERIGHT" : MENFX(3,6,3)=True
MENS$(3,6,4)=" Shift Left         " : MENG$(3,6,4)="_SHIFTLEFT" : MENFX(3,6,4)=True
MENS$(3,6,5)=" Shift Right        " : MENG$(3,6,5)="_SHIFTRIGHT" : MENFX(3,6,5)=True
MENS$(3,6,6)=" Shift Left  16bit  " : MENG$(3,6,6)="_SHIFTLEFT16BIT" : MENFX(3,6,6)=True
MENS$(3,6,7)=" Shift Right 16bit  " : MENG$(3,6,7)="_SHIFTRIGHT16BIT" : MENFX(3,6,7)=True
MENS$(3,7,0)=" Convert   >    "
MENS$(3,7,1)="    "
MENS$(3,7,2)=" Unsigned 8bit to Signed  " : MENG$(3,7,2)="_8BITUNSIGNEDTO8BIT" : MENFX(3,7,2)=True
MENS$(3,7,3)=" 16bit to 8bit            " : MENG$(3,7,3)="_16BITTO8BIT" : MENFX(3,7,3)=True
MENS$(3,7,4)=" 16bit to 8bit Flip       " : MENG$(3,7,4)="_16BITTO8BITFLIP" : MENFX(3,7,4)=True
MENS$(3,7,5)=" 32bit Float to 8bit      " : MENG$(3,7,5)="_32BITTO8BIT" : MENFX(3,7,5)=True
MENS$(3,7,6)=" 32bit Float to 16bit     " : MENG$(3,7,6)="_32BITTO16BIT" : MENFX(3,7,6)=True
MENS$(3,7,7)=" Deinterleave 8bit        " : MENG$(3,7,7)="_DEINTERLEAVE" : MENFX(3,7,7)=True
MENS$(3,7,8)=" Deinterleave 16bit       " : MENG$(3,7,8)="_DEINTERLEAVE16BIT" : MENFX(3,7,8)=True
MENS$(3,8,0)="----------------"
MENS$(3,9,0)=" Reverse        " : MENG$(3,9,0)="_REVERSE" : MENFX(3,9,0)=True
MENS$(3,10,0)=" Invert         " : MENG$(3,10,0)="_INVERT" : MENFX(3,10,0)=True
MENS$(4,0,0)="Utilities    "
MENS$(4,1,0)=" Tone Generator  " : MENG$(4,1,0)="T0NEG"
MENS$(4,2,0)=" Noise      >    "
MENS$(4,2,1)="    "
MENS$(4,2,2)=" White   " : MENG$(4,2,2)="_NOISEWHITE" : MENFX(4,2,2)=True
MENS$(4,2,3)=" Dither  " : MENG$(4,2,3)="_NOISEDITHER" : MENFX(4,2,3)=True
MENS$(4,2,4)=" Crypto  " : MENG$(4,2,4)="_NOISECRYPTO" : MENFX(4,2,4)=True
MENS$(4,2,5)=" Sin()   " : MENG$(4,2,5)="_NOISESIN" : MENFX(4,2,5)=True
MENS$(4,2,6)=" Fill    " : MENG$(4,2,6)="_NOISEFILL" : MENFX(4,2,6)=True
MENS$(4,3,0)=" Record Output   " : MENG$(4,3,0)="_TGLBGREC"
MENS$(4,4,0)=" Direct Mode     " : MENG$(4,4,0)="_DIRECT"
If _AMIVER>4
   MENS$(4,5,0)=" Oscilloscope    " : MENG$(4,5,0)="_TGLOSCILLO"
End If 
MENS$(5,0,0)="Memory    "
MENS$(5,1,0)=" F1 -                 " : MENG$(5,1,0)="_SWAPMENU"
MENS$(5,2,0)=" F2 -                 " : MENG$(5,2,0)=MENG$(5,1,0)
MENS$(5,3,0)=" F3 -                 " : MENG$(5,3,0)=MENG$(5,1,0)
MENS$(5,4,0)=" F4 -                 " : MENG$(5,4,0)=MENG$(5,1,0)
MENS$(5,5,0)=" F5 -                 " : MENG$(5,5,0)=MENG$(5,1,0)
MENS$(5,6,0)=" F6 -                 " : MENG$(5,6,0)=MENG$(5,1,0)
MENS$(5,7,0)=" F7 -                 " : MENG$(5,7,0)=MENG$(5,1,0)
MENS$(5,8,0)=" F8 -                 " : MENG$(5,8,0)=MENG$(5,1,0)
MENS$(5,9,0)=" F9 -                 " : MENG$(5,9,0)=MENG$(5,1,0)
MENS$(5,10,0)=" F10 -                " : MENG$(5,10,0)=MENG$(5,1,0)
MENS$(5,11,0)="----------------------"
MENS$(5,12,0)=" Previous             " : MENG$(5,12,0)="_SWAPPREV"
MENS$(5,13,0)=" Next                 " : MENG$(5,13,0)="_SWAPNEXT"
MENS$(5,14,0)="----------------------"
MENS$(5,15,0)=" Erase All            " : MENG$(5,15,0)="_ERASEALL"
MENS$(6,0,0)="Help   "
MENS$(6,1,0)=" Shortcuts  " : MENG$(6,1,0)="_SHORTCUTS"
MENS$(6,2,0)=" Options    " : MENG$(6,2,0)="_OPTIONS"
MENS$(6,3,0)=" About      " : MENG$(6,3,0)="_ABOUT"
Gosub _MACROMENU
For M1=1 To _M1
   MENX(M1,0,0)=Text Length(MENS$(M1,0,0))+MENX(M1-1,0,0)
Next M1
If Arexx Exist("REXX")
   If Arexx Exist("OCTAMED_REXX")
      OCTAMED=True
      SETTING$(20)="-1"
   End If 
   Arexx Open "FXBOX_REXX"
   REXX=True
End If 
If BSD and SETTING$(22)<>_FALSE$
   Gosub SOCK_OPENVST
End If 
If BSD and SETTING$(11)<>_FALSE$
   Gosub SOCK_OPENCONNECTION
End If 
_UNNAMED$="Unnamed"
_TOAST$="³^°¬"
Gosub _DRAW
Gosub HEADER
Gosub ALLBUTTONS
Gosub MAGICWAND
Gosub SETHZ
Gosub DIAMAIN
I#=-181 : DD#=0
Repeat 
   Screen Display 0,128,Int(I#),320,256
   Gosub TASK
   I#=I#+DD#
   DD#=DD#+0.75
Until I#>44
Return 
'
'
'
'***************************************************************************** 
'*error*********************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'
'   .,:::::::::::::..  :::::::..      ...     :::::::..
'   ;;;;'''';;;;``;;;; ;;;;``;;;;  .;;;;;;;.  ;;;;``;;;; 
'    [[cccc \[[[,/[[[' \[[[,/[[[' ,[[     \[[,\[[[,/[[[' 
'    $$"""" "$$$$$$c   "$$$$$$c   $$$,     $$$"$$$$$$c 
'    888oo,_,888b "88bo,888b "88bo"888,_ _,88P,888b "88bo
'    """"YUM"MMMM   "W""MMMM   "W"  "YMMMMMP" "MMMM   "W"
'
'
'
Procedure TR4P
   Shared _BG,_PANE,_WHITE,_GRAY
   BUT_W=101 : BUT_H=13
   Sam Loop Off 
   PLYING=False
   Every Off 
   If Errn=97
      Resume Next : Rem File name too long   
   Else If Errn=23
      TXT2$="illegal function"
   Else If Errn=29
      TXT2$="overflow"
   Else If Errn=24
      TXT2$="not enough memory"
   Else If Errn=34
      TXT2$="type mismatch"
   Else If Errn=36
      TXT2$="bank not reserved"
   Else If Errn=20
      TXT2$="division by zero"
   Else If Errn=81
      TXT2$="file not found"
   Else If Errn=40
      TXT2$="unknown subroutine"
   Else If Errn=82
      TXT2$="file name invalid"
   Else If Errn=83
      TXT2$="disk not validated"
   Else If Errn=84
      TXT2$="disk write protected"
   Else If Errn=86
      TXT2$="device not available"
   Else If Errn=88
      TXT2$="disk is full"
   Else If Errn=89
      TXT2$="file delete protected"
   Else If Errn=90
      TXT2$="file write protected"
   Else If Errn=91
      TXT2$="file read protected"
   Else If Errn=92
      TXT2$="not an AmigaDOS Disk"
   Else If Errn=93
      TXT2$="drive is empty"
   Else If Errn=94
      TXT2$="of an I/O error"
   Else 
      TXT2$=Str$(Errn)
   End If 
   RX=216 : RY=59
   TXT1$="Can't do that because"
   WX=RX-5 : WY=RY-15 : WX2=RX+207+5 : WY2=RY+45
   Ink _GRAY
   Bar WX-5,WY-4 To WX2+5,WY2+4
   Ink _BG
   Box WX-5,WY-4 To WX2+5,WY2+4
   Ink _WHITE
   Bar WX,WY To WX2,WY2
   Ink _GRAY
   Bar WX+1,WY+1 To WX2-1,WY+13
   Box WX+1,WY+1 To WX2-1,WY2-1
   Ink _WHITE,_GRAY
   Text WX+4,WY+10,"Error"
   Ink _BG,_WHITE
   Text RX+103-(Text Length(TXT1$)*128)/256,RY+11,TXT1$
   Text RX+103-(Text Length(TXT2$)*128)/256,RY+21,TXT2$
   BX=RX+2+54 : BY=RY+30
   BTXT1$="Ok"
   Cls _BG,BX-3,BY-2 To BX+BUT_W,BY+BUT_H
   Cls _WHITE,BX-2,BY-1 To BX-2+BUT_W,BY+BUT_H-1
   Cls _GRAY,BX,BY To BX+BUT_W-3,BY+BUT_H-2
   Ink _BG,_GRAY
   Text BX+(98-(Text Length(BTXT1$)))/2,BY+BUT_H-5,BTXT1$
   Do 
      Exit If Mouse Key=0
      Multi Wait 
   Loop 
   Do 
      Exit If Mouse Key=1
      Multi Wait 
   Loop 
   Do 
      Exit If Mouse Key=0
      Multi Wait 
   Loop 
   Resume Next 
End Proc
'  
MATHTR4P:
'math overflow 
Resume Next 
'
'
'
'***************************************************************************** 
'*data************************************************************************ 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'   ::::::-.    :::.     ::::::::::  :::.        
'   ;;,   `';,  ;;`;;    ;;;;;;;'''  ;;`;;       
'   `[[     [[ ,[[ '[[,      [[     ,[[ '[[,     
'    $$,    $$c$$$cc$$$c     $$    c$$$cc$$$c    
'    888_,o8P' 888   888,    88,    888   888,   
'   "MMMMP"`   YMM   ""`     MMM    YMM   ""`    
'
'
'
AUD:
Data %1,%10,%100,%1000,%1001,%110,%1111
'
OPT:
Data "DF0:","DH0:","DH1:","RAM:","192.168.1.11","7000"
Data "0","-1","-1","0"
Data "0","-1","-1","-1"
Data "-1","-1","-1","0"
Data "-1","0","-1","0"
'
KLO:
Data 49,"C-1",4181
Data 33,"C#1",4430
Data 50,"D-1",4697
Data 34,"D#1",4971
Data 51,"E-1",5279
Data 52,"E-1",5593
Data 36,"F#1",5926
Data 53,"G-1",6279
Data 37,"G#1",6653
Data 54,"A-1",7046
Data 38,"A#1",7457
Data 55,"B-1",7901
Data 16,"C-2",8363
Data 2,"C#2",8860
Data 17,"D-2",9395
Data 3,"D#2",9943
Data 18,"E-2",10559
Data 19,"F-2",11186
Data 5,"F#2",11852
Data 20,"G-2",12559
Data 6,"G#2",13306
Data 21,"A-2",14092
Data 7,"A#2",14914
Data 69,"B-2",15838
'
KHI:
Data 49,"C-2",8363
Data 33,"C#2",8860
Data 50,"D-2",9395
Data 34,"D#2",9943
Data 51,"E-2",10559
Data 52,"F-2",11186
Data 36,"F#2",11852
Data 53,"G-2",12559
Data 37,"G#-2",13306
Data 54,"A-2",14092
Data 38,"A#2",14914
Data 55,"B-2",15838
Data 16,"C-3",16726
Data 2,"C#3",17720
Data 17,"D-3",18839
Data 3,"D#3",19886
Data 18,"E-3",21056
Data 19,"F-3",22372
Data 5,"F#3",23705
Data 20,"G-3",25031
Data 6,"G#3",26515
Data 21,"A-3",28185
Data -1,"",-1
'
BUT:
Data "Range Disp",8,31,"_RANGEDISPLAY"
Data "Show Range",113,31,"_SHOWRANGE"
Data "Show All",218,31,"_SHOWALL"
Data "Cut",323,31,"_CUT"
Data "Copy",428,31,"_COPY"
Data "Paste",533,31,"_PASTE"
Data "Play All",8,15,"_PLAYALL"
Data "Play Range",113,15,"_PLAYRANGE"
Data "Play Display",218,15,"_PLAYDISPLAY"
Data "Mix",323,15,"_MIXBUT"
Data "Repeat",428,15,"_REPEAT"
Data "Range None",533,15,"_RANGENONE"
Data "Loop",218,50,"_TGLLP"
Data "Mixloop",323,50,"_TGLLPMIX"
'
OBUT:
Data "Filter","Filter",8,23,59,"_TGLFILTER"
Data "60Hz","50Hz",113,23,60,"_TGLMON"
Data "1991","2025",218,23,61,"_TGL1991"
Data "Debug","Debug On",323,23,62,"_TGLDEBUG"
Data "Net Sync","Net Sync On",8,40,63,"_TGLNETSYNC"
Data "Lowres","Hires",113,40,64,"_TGLLOWRES"
Data "Position","Position",218,40,65,"MUP"
Data "Level Meter","Level Meter",323,40,66,"MUP"
Data "Metronome","Metronome",8,57,67,"MUP"
Data "Realtime","Realtime",113,57,68,"_TGLPREVIEW"
Data "Zoom Draw","Zoom Draw",218,57,69,"MUP"
Data "Graph","Graph Low",323,57,70,"_TGLSTEP"
Data "Wheel Zoom","Wheel Zoom",8,74,71,"MUP"
Data "Arexx Sync","Arexx Sync",113,74,72,"_TGLAREXX"
Data "Scroller","Scroller",218,74,73,"MUP"
Data "VST","VST On",323,74,74,"_TGLVST"
Data "Ok","",165,95,75,"_OPTIONSEXIT"
'
TBUT:
Data "Piano",54,30,48,""
Data "Square",2,46,60,"T0NESQR"
Data "Sine",108,46,61,"T0NESIN"
Data "Pulse",2,62,58,"T0NEPLS"
Data "Cosine",108,62,59,"T0NECOS"
Data "Triangle",2,78,63,"T0NETRI"
Data "Sawtooth",108,78,62,"T0NESAW"
Data "Cancel",54,94,65,"T0NEEXIT"
'
CMD:
Data "CD..",4,"¯CDDD"
Data "CD",2,"¯CD"
Data "MD",2,"¯CD"
Data "DIR",3,"¯DIR"
Data "DEL",3,"¯DEL"
Data "CLS",3,"¯CLS"
Data "RX",2,"¯RX"
Data "HELP SUBS",9,"¯HELPSUBS"
Data "HELP 14BIT",10,"¯HELP14"
Data "HELP",4,"¯HELP"
Data "EXIT",4,"¯EXIT"
Data "QUIT",4,"¯QUIT"
Data "_PLAY",5,"¯BADARGS"
'
CUT:
Data "Function Key F1-F10   Change sample: 1-10"
Data "-/+                   Change sample: previous/next"
Data "Left Amiga 1 2 3 4 d  Mono Stereo Quad Multi Direct"
Data "Left Amiga o r s      Open Revert Save As"
Data "Left Amiga x c v z    Cut Copy Paste Undo"
Data "Esc                   Stop, close, quit or cancel"
Data "Space                 Stop playing"
Data "Both Mouse Keys       Panic stop audio"
Data "Return                Toggle looping on/off"
Data "Cursor Left/Right     Fine move magic wand"
Data "also Left Shift"
Data "Left Shift            Quantized range select"
Data "Left Shift            Fine move dials"
Data "Left Shift/Caps Lock  Realtime preview all channels"
Data "Caps Lock             Use low octave for the piano"
'
HLP:
Data "","DOS: Cd, Md, Dir, Del, Cls"
Data 'AREXX: Rx " address <FXBOX_REXX><COMMAND>"'
Data "Macro Subroutines: HELP SUBS"
Data "14bit Conversion Technique: HELP 14BIT"
'
H14:
Data "","Converting to 14bit:"
Data "Open As Raw"
Data "Change mode to Multi"
Data "32bit Float to 16bit (if necessary)"
Data "Deinterleave 16bit"
Data "Deinterleave 8bit"
Data "Quantized range select the half of sample bank 1 with the white noise"
Data "cut and paste into sample bank 4"
Data "Quantized range select the second half of sample bank 1"
Data "cut and paste into sample bank 2"
Data "Quantized range select the second half of sample bank 4"
Data "Cut and paste into sample bank 3"
Data "Bitwise shift right twice sample bank 3 and 4"
Data "Change mode to 14bit"
'
Data "$VER: fxbox 1.13"
'
