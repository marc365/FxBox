Set Buffer 80 : Rem                                                 *play
Set Stack 0 : Rem                                                   *position
'                                                                   *draw
On Error Proc TR4P : Rem                                            *zoom 
If Prg State=-1 : Rem                                               *select
   Break Off : Rem                                                  *file 
End If : Rem                                                        *edit 
'                                                                   *mix 
Request Off : Auto View Off : Led Off : Rem                         *volume
'                                                                   *resample
'********************************************************************filter*** 
'                                                                   *distort 
_M1=7 : _M2=16 : _M3=11 : _FL=247 : KX=46 : CH=8 : AR=9 : Rem       *effects 
_L1=0 : _L2=0 : _BU=12 : Rem                                        *bitwise
Dim _MENU$(_M1,_M2,_M3),_MENUG$(_M1,_M2,_M3) : Rem                  *convert
Dim _MENUX(_M1,_M2,_M3),_MENUFX(_M1,_M2,_M3) : Rem                  *process
Dim PAULA(7),VOL(4),OFFSET(4),LEFTOVER(4) : Rem                     *utils 
Dim ADV#(4),ADVPOS#(4),PXR(4),PXR2(4) : Rem                         *direct
Dim DEVS$(4),MACROS$(16),FILES$(600),FILEL(600) : Rem               *help
Dim FB$(_FL),FPATH$(_FL) : Rem                                      *macro
Dim BUTS$(_BU),BUTX(_BU),BUTY(_BU),BUTG$(_BU) : Rem                 *sys 
Dim KEYS$(KX),KEYN$(KX),KEYP(KX) : Rem                              *mouse
Dim D_START(4),D_LENGTH(4) : Rem                                    *choice 
Dim CHAIN$(CH) : Rem                                                *windows
Dim SETTING$(6) : Rem                                               *buttons 
Dim LEVELS#(AR) : Rem                                               *gadgets 
Dim AREAX(AR),AREAY(AR),AREAX2(AR),AREAY2(AR) : Rem                 *network 
'                                                                   *init
LEVELS#(0)=12.3 : LEVELS#(1)=13.3 : Rem                             *screen
'                                                                   *menu
CON#=0.0 : Rem                                                      *error
ADV#=0.0 : DIV#=0.0 : Rem                                           *data
RST#=0.0 : RFIN#=0.0 : ST#=0.0 : FIN#=0.0
N#=0.0 : N2#=0.0
CN=0 : CN2=0 : CN3=0
CN#=0.0 : CN2#=0.0 : CN3#=0.0
'
T$=""
M=0 : Z=0 : MZ=0 : A=0 : C=0 : I=0
X=0 : PX=0 : CX=0 : MK=0
BGPLYING=False
TGL=1 : M0DE=1
P_BUF=0 : P_SWP=0
P_STARTB1=0 : P_STARTB2=0 : BBUFF=0 : SBCOUNT=0
RNGEPLY=False : DISPPLY=False
PBANK=5 : STA=0 : FI=0 : L=0 : P_START=0 : P_LENGTH=0
_CHANNEL=1
_CURRENT=32767
M_LENGTH5=0 : NPCOUNT=1 : NPY=0 : WAND_H=0 : WAND_H2=0
'
_MENUON=False : _MENUDO=False : _MENUSUB=False
_M1SEL=0 : _PM1SEL=0 : _M2SEL=0 : _M3SEL=0 : M1=0 : M2=0 : M3=0
_CHOICE=False : _CHOICEG$="" : _CHOICES$=""
'
OSCMODE=1
'
_LPMIX=True
MACRO=False : REALTIME=False
_DIRECT=False : MATH=True
FIL=False
PAL=1
_LP=True
INFO=True
_DIAL=0 : _INC#=0
REXX=False : OCTAMED=False
NETWORK=False : BSD=True
BGREC=False : OSCILLO=False
PLYING=False : STPPED=True
_SCROLL=True
RENDERING=False
MIX=False
_SHOW=True
_ERASE=False
_DEBUG=False
_UPDATETIME=False
_AMIHZ=True
'
S=0 : NAMES=0 : NUMSAMPLES=0 : ENTRIES=0 : ENTSIZE=0
Dim PNTERS(63)
'
_BG=0 : _PANE=1 : _WHITE=2 : _GRAY=3 : _BLACK=4 : _SHADOW=5
_BRIGHT=6 : _HIGHLIGHT=7 : _GREEN=8 : _DARKGREEN=9 : _DARKBLUE=13
'_BROWN=10 : _TAN=11 : _RED=12 : _SKYBLUE=14 : _BLUE=15    
'
OSC_X=0 : OSC_Y=0
OSC_BZN=0 : OSC_BX=0 : OSC_BY=0
OSC_START=0
'
PRO=0 : PPRO=PRO
PRO#=0.0
'
BEAT=0 : PBEAT=0 : PWC=0 : PWC2=0
'
SOCKET=O : HOSTINFO=0 : HOSTADDRESS=0
IOC_FIONBIO=0 : IOC_FIOASYNC=0 : NBIO=0 : NOBLOCK=0 : NBYTES=0
_ADDR$="" : _PORT=0
'
PKTCOUNT=0
'
PZN=0 : PZB=0 : PRB=0 : BGRECTOTAL=0 : V=0
MFREE=0 : PAC=0
B_START=0 : B_LENGTH=0
PI=0 : 
BBARS=0 : CBARS=0 : CCOLS=0 : LF=0
SZ=0 : AC=0
P=0 : COUNT=0 : PPCOUNT=0 : PPY=0
S_START=0 : S_LENGTH=0
DA=0 : DC=0 : DCY=0
HZPERIOD=0
'
CX=0 : CY=0 : PX=0 : PY=0 : DY=0
'  
_SIZE=20480
'
BSIZE=0
B=1 : PB=1 : FBSIZE=8192 : BFREQ=22448
MONHZ#=0.0 : CLOCK=0
FXB_H=158 : TCOUNT=1
'
VN=60 : VN#=0.6
_DCOFFSETN=0
HIGHN=80 : HIGHCUTN=4000
RC#=0.0 : DT#=0.0 : ALPHA#=0.0
Dim HBUF(4)
LOWN=80 : LOWCUTN=4000
Dim LBUF(4)
RESN=45 : _RF#=0.225 : _RQ#=0.6666674 : _RFB#=1.52688
LEVELS#(2)=9.6
LEVELS#(3)=11.7
Dim RBUF0#(4),RBUF1#(4)
Dim SMOBUF(4)
ALIN=12 : ALIN2=12
TUBEN=96 : TUBEV#=1.04
SATN=120 : SATV#=1.2
FOLDN=4 : FOLDV#=0.015625
PHAN=0
Dim PHBUF#(4)
Dim PHBUF0(4),PHBUF1(4)
_EFFN=0 : _ECHON=0
RVN=20 : RVV#=0.6
Dim RVBUF0(4),RVBUF1(4)
TREMN=82 : TREMN#=2.5625
Dim TBUF(4)
COMN=0
_THRESHOLD#=50 : Rem percent
_SLOPE#=50 : Rem percent
_WINDOW#=1 : Rem milliseconds 
_LOOKAHEAD#=3 : Rem milliseconds 
_ATTACK#=0.1 : Rem milliseconds 
_RELEASE#=300 : Rem milliseconds 
_ATT#=0.0 : _REL#=0.0
_OFFSET=0 : _RMS=0
_MSB=False
'
T0NEN=146
XV=0 : YV=0 : AA=0 : BB=0 : CC=0
B1=0 : B2=0 : BIT1=0 : BIT2=0 : BIT3=0
TAA13=0 : TAA6=0 : TAA2=0 : TAA16=0
ISA=0 : ISB=0 : ISC=0 : ISD=0 : ISE=0 : ISF=0 : ISG=0 : ISH=0
Dim RANDRSL(255),MM(255)
'
FX=0 : FXE=0 : FX2=0 : FX3=0 : FXBC=0
FX_START=0 : FX_START2=0 : FX_START3=0 : FX_LENGTH=0 : FX_LENGTH2=0
_SELF=False
'
SCR_W=640 : SCR_W#=SCR_W : SCR_H=256 : SCR_R=Hires : SCR_D=8
WVE_H=0 : WVE_D=0 : HDR_H=12
TST_H=0 : TST_W=0
BUT_W=101 : BUT_H=13
RNG_T=0 : RNG_B=0
MSB=0
'
_AMIVER=0 : _DOSVER=40 : _CPU$=" 00"
'
XD=0 : PXD=0 : XD2=SCR_W : PXD2=0
CHRP=0 : CHR=0 : MK=0 : PZ=0
L=0 : S=0 : RST=0 : RFIN=0 : RL=0 : RPOS=0 : PRL=0
ST=0 : FIN=0 : XR=0 : XR2=0 : LXR=0 : LXR2=0
'
RX=0 : RY=0 : WX=0 : WX2=0 : WY=0 : WY2=0
BTXT1$="" : BTXT2$="" : TXT1$="" : TXT2$="" : WTXT$=""
BZN=0 : BX=0 : BY=0
REQ=False : FRQ=False
C0L=_PANE : PC0L=C0L
'
NX=0 : MX=0
'
PASS=0
_COUNT=0 : BN=0
R=0 : NN=0 : TDFC=0
BTIME=0 : ETIME=0
'
K$="" : S_NULL$="" : S_VALU$=""
MSG$="" : CR$="" : IN$="" : PIN$=""
D$="" : TDC$="" : TVDC$="" : TVDL$="" : TVDF$=""
FOFF=0
'
BANKNAME$="" : EVAL$=""
'
F$="" : FH$="" : PF$="" : PL=0 : FPOS=0 : FTOTAL=0
'
KDOWN=False
'
FREQ=BFREQ
_TOAST$="³^°¬"
_TOASTWAIT=0
CCOUNT=0 : CLENGTH=0 : CCOUNTN=0 : CLENGTHN=0
_UNNAMED$="<Unnamed>" : MACRODIR$=""
PROGDIR$=Dir$ : PPROGDIR$=PROGDIR$
'
'***************************************************************************** 
'
Gosub _CLIOUT
Gosub _TGLMON
Gosub _INIT
Every 2 Gosub _NOTPLAYING
Goto _MAIN
'
'
'
'***************************************************************************** 
'*play************************************************************************ 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'   ::::::::.   :::      :::.     -:.     ::-.:    
'   `;;```.;;;  ;;;      ;;`;;    ';;.   ;;;;''    
'   `]]nnn]]'   [[[     ,[[ '[[,     '[[,[[['      
'    $$$""      $$'    c$$$cc$$$c      c$$"        
'    888o     o88oo,.__ 888   888,   ,8P"`         
'    YMMMb    """YUMMMM YMM   ""`   mM"            
'
'  
'
_PLAYRANGE:
If RL>1
   STA=RST : FI=M_LENGTH5-RFIN
Else 
   Gosub FLSHSCR
   Goto _MAIN
End If 
DISPPLY=False
RNGEPLY=True
Goto _PLAY
'
_PLAYDISPLAY:
STA=ST : FI=M_LENGTH5-FIN
If STA>0 and FI>0
   If M0DE=2
      STA=STA/2
      FI=FI/2
   Else If M0DE=3
      STA=STA/4
      FI=FI/4
   End If 
End If 
RNGEPLY=False
DISPPLY=True
Goto _PLAY
'
_PLAYALL:
STA=0 : FI=0
DISPPLY=False
RNGEPLY=False
_PLAY:
BGPLYING=True : STPPED=False
PWC=1
Repeat 
   OFFSET(PWC)=STA
   PWC=PWC+1
Until PWC>4
TGL=1
_TOAST$="°"
If Not PLYING
   PLYING=True
   BBUFF=Max(BSIZE,257)
   Sam Loop On 
   Sam Raw PAULA(7),P_STARTB1,BBUFF,FREQ
   On M0DE Goto P,P2,P34,P34
   P2:
   Sam Swap PAULA(5) To P_STARTB1,BBUFF
   Sam Swap PAULA(6) To P_STARTB1+BBUFF,BBUFF
   Goto P
   P34:
   SBUFF=P_STARTB1
   PWC=1
   Repeat 
      Sam Swap PAULA(PWC) To SBUFF,BBUFF
      SBUFF=SBUFF+BBUFF
      Inc PWC
   Until PWC>4
   P:
   Every 1 Gosub _PLAYING
   If OCTAMED
      Exec 'rx "address OCTAMED_REXX PL_PLAYBLOCK"'
   End If 
   If NETWORK and BSD
      PKTCOUNT=0
      S_NULL$=Space$(1) : Poke Varptr(S_NULL$),0
      S_VALU$=Space$(4) : Loke Varptr(S_VALU$),0
      MSG$="/t_start"+S_NULL$+S_NULL$+S_NULL$+S_NULL$+",iff"+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$
      Gosub SOCK_SENDSTRING
      MSG$="/t_pulse"+S_NULL$+S_NULL$+S_NULL$+S_NULL$+",iff"+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_VALU$
      Loke Varptr(MSG$)+20,PKTCOUNT
   End If 
End If 
C0L=_WHITE
BTXT1$="Stop" : BZN=8 : BX=BUTX(BZN) : BY=BUTY(BZN) : Gosub BUTTON
BTXT1$="Play" : BZN=7 : BX=BUTX(BZN) : BY=BUTY(BZN) : Gosub BUTTON
Gosub POS_CAL
If STA+FI=0 Then FI=Length(PBANK)
_MAIN:
Gosub GVAL
If M=1
   'Mouse zone does not allow 640 
   If CX=SCR_W and CY>HDR_H and CY<WVE_H+HDR_H
      Z=73
   End If 
   If Z>0
      Gosub BCHOOSE
   End If 
Else If _CHOICE
   _CHOICE=False
   If _MENUFX(_M1SEL,_M2SEL,_M3SEL) and Length(PBANK)>0
      Gosub _UNDOSET
   End If 
   PASS=0
   If RL=0 and(_M1SEL=3 and _M2SEL<>2) and _M1SEL<>1 : Rem Not resample menu and not file menu    
      RL=M_LENGTH5
      _CHOICE=3
   End If 
   Gosub _CHOICEG$
   If _MENUFX(_M1SEL,_M2SEL,_M3SEL) and RL>1
      If M0DE=2
         _RST=RST
         _RFIN=RFIN
         RST=RST+M_LENGTH5
         RFIN=RFIN+M_LENGTH5
         Gosub _CHOICEG$
         RST=_RST
         RFIN=_RFIN
      Else If M0DE=3
         _RST=RST
         _RFIN=RFIN
         For RI=0 To 2
            RST=RST+M_LENGTH5
            RFIN=RFIN+M_LENGTH5
            Gosub _CHOICEG$
         Next RI
         RST=_RST
         RFIN=_RFIN
      End If 
   End If 
   PASS=0
   If _MENUFX(_M1SEL,_M2SEL,_M3SEL)
      If _CHOICE=3
         RL=0
         _CHOICE=False
         Gosub POS_SET
      End If 
      RENDERING=True
      Gosub _DRAW
      Gosub FRESHSEL
      RENDERING=False
      Gosub _UPDATEPOS
   End If 
   _M1SEL=0 : _M2SEL=0 : _M3SEL=0
Else If C>0
   Gosub KCHOOSE
Else If PZ<>Z
   If Z=74
      Gosub R0LLLEFT
      PZ=Z
   Else If Z=76
      Gosub R0LLRIGHT
      PZ=Z
   Else If PZ=74
      Gosub UNR0LLLEFT
      If PXR(1)>=0 and FI>OFFSET(1)
         Gosub CLEARPOS
      End If 
      PZ=0
   Else If PZ=76
      Gosub UNR0LLRIGHT
      If PXR(1)>=0 and FI>OFFSET(1)
         Gosub CLEARPOS
      End If 
      PZ=0
   End If 
End If 
If M=1
   For _DIAL=0 To 1
      If CX>AREAX(_DIAL)-14 and CX<AREAX2(_DIAL) and CY>AREAY(_DIAL)-9 and CY<AREAY2(_DIAL)
         Gosub DIALSET
         Exit 
      End If 
   Next _DIAL
   If CHAIN$(1)="_RESONANTP"
      For _DIAL=2 To 3
         If CX>AREAX(_DIAL)-14 and CX<AREAX2(_DIAL) and CY>AREAY(_DIAL)-9 and CY<AREAY2(_DIAL)
            Gosub DIALSET
            Exit 
         End If 
      Next _DIAL
   Else If CHAIN$(1)="_COMPRESSORP"
      For _DIAL=4 To AR
         If CX>AREAX(_DIAL)-14 and CX<AREAX2(_DIAL) and CY>AREAY(_DIAL)-9 and CY<AREAY2(_DIAL)
            Gosub DIALSET
            Exit 
         End If 
      Next _DIAL
   End If 
End If 
If Not PLYING
   If Not STPPED
      BGPLYING=False : RNGEPLY=False : DISPPLY=False
      C0L=_PANE
      BZN=8 : BTXT1$=BUTS$(BZN) : BX=BUTX(BZN) : BY=BUTY(BZN) : Gosub BUTTON
      BZN=7 : BTXT1$=BUTS$(BZN) : BX=BUTX(BZN) : BY=BUTY(BZN) : Gosub BUTTON
      Gosub _UPDATEPOS
      Gosub _RANGEPXCLEAR
      Gosub _GNOMEC
      STPPED=True
   End If 
End If 
'  
'********************
If REXX and Arexx
   MSG$=Upper$(Arexx$(0))
   Arexx Answer 0,"ok"
   Trap Gosub MSG$
   If Errtrap
      _TOAST$="Error:"+MSG$
   Else 
      _TOAST$=MSG$
   End If 
End If 
'********************
'
Goto _MAIN
'
_PLAYING:
If TGL=1
   P_BUF=P_STARTB2 : P_SWP=P_STARTB1 : TGL=2
Else 
   P_BUF=P_STARTB1 : P_SWP=P_STARTB2 : TGL=1
End If 
On M0DE Goto M1,M2,M34,M34
M1:
Sam Swap PAULA(7) To P_BUF,BSIZE
Goto SWPPED
M2:
Sam Swap PAULA(5) To P_BUF,BSIZE
Sam Swap PAULA(6) To P_BUF+BSIZE,BSIZE
Goto SWPPED
M34:
BBUFF=0 : SBCOUNT=1
Repeat 
   Sam Swap PAULA(SBCOUNT) To P_BUF+BBUFF,BSIZE
   BBUFF=BBUFF+BSIZE
   Inc SBCOUNT
Until SBCOUNT>4
SWPPED:
If M0DE=4
   If((RNGEPLY and RL<>0) or DISPPLY)
      If B<5
         If OFFSET(B)>FI or OFFSET(B)<STA
            If _LP
               OFFSET(B)=LEFTOVER(B)+STA
               LEFTOVER(B)=0
               _TOAST$="¯"
               Gosub _FLIPPOS
            Else 
               Goto _STOP
            End If 
         End If 
      End If 
   End If 
   BBUFF=0
   SBCOUNT=1
   Repeat 
      B_LENGTH=Length(SBCOUNT+7)
      If B_LENGTH>0
         B_START=Start(SBCOUNT+7)
         If OFFSET(SBCOUNT)>=B_LENGTH
            Copy B_START+LEFTOVER(SBCOUNT),B_START+LEFTOVER(SBCOUNT)+BSIZE To P_SWP+BBUFF
            If _LP
               OFFSET(SBCOUNT)=LEFTOVER(SBCOUNT)
               LEFTOVER(SBCOUNT)=0
               _TOAST$="°"
            Else 
               Goto _STOP
            End If 
         Else 
            If OFFSET(SBCOUNT)+BSIZE>B_LENGTH
               Copy B_START+OFFSET(SBCOUNT),B_START+B_LENGTH To P_SWP+BBUFF
               LEFTOVER(SBCOUNT)=BSIZE-(B_LENGTH-OFFSET(SBCOUNT))
               Copy B_START,B_START+LEFTOVER(SBCOUNT) To P_SWP+BBUFF+(BSIZE-LEFTOVER(SBCOUNT))
            Else 
               Copy B_START+OFFSET(SBCOUNT),B_START+OFFSET(SBCOUNT)+BSIZE To P_SWP+BBUFF
            End If 
         End If 
      End If 
      BBUFF=BBUFF+BSIZE
      Inc SBCOUNT
   Until SBCOUNT>4
Else If P_LENGTH>0
   If(OFFSET(1)+BSIZE>FI or OFFSET(1)<STA)
      If _LP
         Copy P_START+LEFTOVER(1),P_START+LEFTOVER(1)+BSIZE To P_SWP
         If M0DE=2 or M0DE=3
            Copy P_START+LEFTOVER(1)+P_LENGTH,P_START+LEFTOVER(1)+P_LENGTH+BSIZE To P_SWP+BSIZE
         End If 
         If M0DE=3
            Copy P_START+LEFTOVER(1)+P_LENGTH+P_LENGTH,P_START+LEFTOVER(1)+P_LENGTH+P_LENGTH+BSIZE To P_SWP+BSIZE+BSIZE
            Copy P_START+LEFTOVER(1)+P_LENGTH+P_LENGTH+P_LENGTH,P_START+LEFTOVER(1)+P_LENGTH+P_LENGTH+P_LENGTH+BSIZE To P_SWP+BSIZE+BSIZE+BSIZE
         End If 
         OFFSET(1)=STA+LEFTOVER(1)
         LEFTOVER(1)=0
         _TOAST$="°"
      Else 
         Goto _STOP
      End If 
   End If 
   If(OFFSET(1)+BSIZE>P_LENGTH)
      If OFFSET(1)>=P_LENGTH
         Copy P_START+LEFTOVER(1),P_START+LEFTOVER(1)+BSIZE To P_SWP
         If M0DE=2 or M0DE=3
            Copy P_START+LEFTOVER(1)+P_LENGTH,P_START+LEFTOVER(1)+P_LENGTH+BSIZE To P_SWP+BSIZE
         End If 
         If M0DE=3
            Copy P_START+LEFTOVER(1)+P_LENGTH+P_LENGTH,P_START+LEFTOVER(1)+P_LENGTH+P_LENGTH+BSIZE To P_SWP+BSIZE+BSIZE
            Copy P_START+LEFTOVER(1)+P_LENGTH+P_LENGTH+P_LENGTH,P_START+LEFTOVER(1)+P_LENGTH+P_LENGTH+P_LENGTH+BSIZE To P_SWP+BSIZE+BSIZE+BSIZE
         End If 
         If _LP
            OFFSET(1)=STA+LEFTOVER(1)
            LEFTOVER(1)=0
            _TOAST$="°"
         Else 
            Goto _STOP
         End If 
      Else 
         Copy P_START+OFFSET(1),P_START+P_LENGTH To P_SWP
         LEFTOVER(1)=BSIZE-(P_LENGTH-OFFSET(1))
         Copy P_START,P_START+LEFTOVER(1) To P_SWP+BSIZE-LEFTOVER(1)
         If M0DE=2 or M0DE=3
            Copy P_START+OFFSET(1)+P_LENGTH,P_START+P_LENGTH+P_LENGTH+LEFTOVER(1) To P_SWP+BSIZE
            Copy P_START+P_LENGTH,P_START+P_LENGTH+LEFTOVER(1) To P_SWP+BSIZE+BSIZE-LEFTOVER(1)
         End If 
         If M0DE=3
            Copy P_START+OFFSET(1)+P_LENGTH+P_LENGTH,P_START+P_LENGTH+P_LENGTH+P_LENGTH+LEFTOVER(1) To P_SWP+BSIZE+BSIZE
            Copy P_START+P_LENGTH+P_LENGTH,P_START+P_LENGTH+P_LENGTH+LEFTOVER(1) To P_SWP+BSIZE+BSIZE+BSIZE-LEFTOVER(1)
            Copy P_START+OFFSET(1)+P_LENGTH+P_LENGTH+P_LENGTH,P_START+P_LENGTH+P_LENGTH+P_LENGTH+P_LENGTH+LEFTOVER(1) To P_SWP+BSIZE+BSIZE+BSIZE
            Copy P_START+P_LENGTH+P_LENGTH+P_LENGTH,P_START+P_LENGTH+P_LENGTH+P_LENGTH+LEFTOVER(1) To P_SWP+BSIZE+BSIZE+BSIZE+BSIZE-LEFTOVER(1)
         End If 
      End If 
   Else 
      Copy P_START+OFFSET(1),P_START+OFFSET(1)+BSIZE To P_SWP
      If M0DE=2 or M0DE=3
         Copy P_START+OFFSET(1)+P_LENGTH,P_START+OFFSET(1)+BSIZE+P_LENGTH To P_SWP+BSIZE
      End If 
      If M0DE=3
         Copy P_START+OFFSET(1)+P_LENGTH+P_LENGTH+P_LENGTH,P_START+OFFSET(1)+BSIZE+P_LENGTH+P_LENGTH+P_LENGTH To P_SWP+BSIZE+BSIZE+BSIZE
         Copy P_START+OFFSET(1)+P_LENGTH+P_LENGTH,P_START+OFFSET(1)+BSIZE+P_LENGTH+P_LENGTH To P_SWP+BSIZE+BSIZE
      End If 
   End If 
End If 
'  
'********************
If REALTIME and _AMIVER>4
   SBCOUNT=0
   Repeat 
      If Not CHAIN$(SBCOUNT)=""
         _CHANNEL=1
         If M0DE=2
            Repeat 
               Gosub CHAIN$(SBCOUNT)
               P_SWP=P_SWP+BSIZE
               Inc _CHANNEL
            Until _CHANNEL>2
         Else If M0DE=3 or(M0DE=4 and Key Shift)
            Repeat 
               Gosub CHAIN$(SBCOUNT)
               P_SWP=P_SWP+BSIZE
               Inc _CHANNEL
            Until _CHANNEL>4
         Else 
            If M0DE=4
               P_SWP=P_SWP+(BSIZE*(B-1))
            End If 
            _CHANNEL=1
            Gosub CHAIN$(SBCOUNT)
         End If 
      End If 
      Inc SBCOUNT
   Until SBCOUNT>CH
End If 
'******************* 
'  
If _AMIVER>4
   Gosub _POSITION
   If TGL=1
      Gosub DRW_LEV
   Else 
      Gosub _PROBAR
      Scroll 6
   End If 
Else 
   If TGL=1
      If OSCILLO=False
         Gosub _POSITION
         Gosub _PROBAR
         Scroll 6
      End If 
   Else 
      Gosub DRW_LEV
   End If 
End If 
If _UPDATETIME
   Gosub DRWTIME
End If 
If P_LENGTH>0
   If M0DE=4
      SBCOUNT=1
      Repeat 
         OFFSET(SBCOUNT)=OFFSET(SBCOUNT)+BSIZE
         Inc SBCOUNT
      Until SBCOUNT>4
   Else 
      OFFSET(1)=OFFSET(1)+BSIZE
   End If 
   If _DEBUG
      If Sam Swapped(1) or Sam Swapped(2)
         _TOAST$="u" : Rem Buffer underrun
      End If 
   End If 
   If BGREC
      BBUFF=0 : SBCOUNT=1
      On M0DE Goto R1,R2,R34,R34
      R1:
      Ssave 3,P_BUF To P_BUF+BSIZE
      Goto CNT_REC
      R2:
      Repeat 
         Ssave SBCOUNT+2,P_BUF+BBUFF To P_BUF+BBUFF+BSIZE
         BBUFF=BBUFF+BSIZE
         Inc SBCOUNT
      Until SBCOUNT>2
      Goto CNT_REC
      R34:
      Repeat 
         Ssave SBCOUNT+2,P_BUF+BBUFF To P_BUF+BBUFF+BSIZE
         BBUFF=BBUFF+BSIZE
         Inc SBCOUNT
      Until SBCOUNT>4
      CNT_REC:
      If TGL=1
         Gosub DRWBGREC
      End If 
   End If 
End If 
Gosub _TOASTWAITER
Every On 
Return 
'
_NOTPLAYING:
Gosub _PROBAR
Scroll 6
If _UPDATETIME
   Gosub DRWTIME
End If 
Every On 
Return 
'
_STOP:
Sam Loop Off 
PLYING=False
Every Off 
Gosub _CLEARPLAYBUFFER
Every 2 Gosub _NOTPLAYING
If OCTAMED Then Exec 'rx "address OCTAMED_REXX PL_STOP"'
If NETWORK and BSD
   MSG$="/t_stop"+S_NULL$+","+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$+S_NULL$
   For I=1 To 10
      Gosub SOCK_SENDSTRING
   Next I
End If 
Gosub FLIPPOS
Ink _PANE : Gosub DRWLEV
Return 
'
_CLEARPLAYBUFFER:
Fill P_STARTB1 To P_STARTB1+FBSIZE,0
Fill P_STARTB2 To P_STARTB2+FBSIZE,0
Return 
'
'
'
'***************************************************************************** 
'*position******************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'   ::::::::.     ...      .::::::.  :::  :::::::::: :::      ...     ::.    :::.
'   `;;```.;;; .;;;;;;;.  ;;;`    `; ;;;  ;;;;;;;''' ;;;   .;;;;;;;.  ;;;;,  `;;;
'   `]]nnn]]' ,[[     \[[,'[==/[[[[, [[[      [[     [[[  ,[[     \[[, [[[[[. '[[
'    $$$""    $$$,     $$$  '''    $ $$$,     $$     $$$, $$$,     $$$ $$$ "Y$c$$
'    888o     "888,_ _,88P,88b    dPo88888    88,   o88888"888,_ _,88P888    Y88 
'    YMMMb      "YMMMMMP"   "YMmMY" MMM"MM    MMM   MMM"MM  "YMMMMMP" MM     YM
'
'
'
_POSITION:
If OSCILLO Then Return 
If _AMIVER<5 and M0DE=4 Then Return 
If P_LENGTH=0 Then Return 
If Not INFO Then Return 
If RENDERING Then Goto _SENDSYNC
If M0DE=4
   PPCOUNT=1
   PPY=HDR_H
   Repeat 
      If ADVPOS#(PPCOUNT)>0 and OFFSET(PPCOUNT)>0
         PXR(PPCOUNT)=OFFSET(PPCOUNT)/ADVPOS#(PPCOUNT)
         If XD>0
            PXR(PPCOUNT)=PXR(PPCOUNT)-(ST/ADVPOS#(PPCOUNT))
         End If 
         If PXR2(PPCOUNT)<>PXR(PPCOUNT)
            Screen Copy 0,PXR2(PPCOUNT),PPY,PXR2(PPCOUNT)+1,PPY+(WVE_H/4) To 0,PXR2(PPCOUNT),PPY,%110000
         End If 
         PPY=PPY+(WVE_H/4)
      End If 
      PPCOUNT=PPCOUNT+1
   Until PPCOUNT>4
   Gosub CLEARPOS
   PPCOUNT=1
   Repeat 
      PXR2(PPCOUNT)=PXR(PPCOUNT)
      Inc PPCOUNT
   Until PPCOUNT>4
Else 
   If ADVPOS#(1)>0 and OFFSET(1)>0
      If PXR(1)>SCR_W
         PXR(1)=0 : PXR2(1)=0
      End If 
      If STA>0
         PXR(1)=OFFSET(1)/ADVPOS#(1)
         If XD>0
            If ST>0
               PXR(1)=PXR(1)-(ST/ADVPOS#(1))
            End If 
         Else 
            If STA>0 and RST>0
               PXR(1)=PXR(1)-(STA/ADVPOS#(1))+(RST/ADVPOS#(1))
            End If 
         End If 
      Else 
         If(OFFSET(1)-ST)>0
            PXR(1)=((OFFSET(1)-ST)/ADVPOS#(1))
         Else If STA>0
            PXR(1)=PXR(1)+(STA/ADVPOS#(1))
         End If 
      End If 
      If PXR2(1)<>PXR(1) and PXR(1)>=0 and PXR2(1)<SCR_W
         If PXR2(1)>PXR(1)-SCR_W and PXR2(1)>0
            Screen Copy 0,PXR2(1),HDR_H,PXR2(1)+1,WVE_H+HDR_H To 0,PXR2(1),HDR_H,%110000
         End If 
         Gosub CLEARPOS
      End If 
      PXR2(1)=PXR(1)
   End If 
End If 
_SENDSYNC:
PPCOUNT=PBANK-7
If PPCOUNT<0 Then PPCOUNT=1
If PPCOUNT>M0DE Then PPCOUNT=M0DE
If Not RENDERING and PLYING
   If CON#>0 and OFFSET(PPCOUNT)>0
      BEAT=(((OFFSET(PPCOUNT)/CON#)+1)/(SCR_W/8))+1
      If Btst(0,BEAT)
         Gosub _GNOME
      Else 
         Gosub _GNOMEC
      End If 
   End If 
End If 
If NETWORK and BSD
   BEAT=(((OFFSET(PPCOUNT)/CON#)+1)/(SCR_W/48))-1
   If Btst(0,BEAT)
      If PBEAT<>BEAT
         PKTCOUNT=PKTCOUNT+4
         Loke Varptr(MSG$)+20,PKTCOUNT
         Gosub SOCK_SENDSTRING
         PBEAT=BEAT
      End If 
   End If 
End If 
Return 
'
POS_CAL:
M_LENGTH5=Length(PBANK)
If M_LENGTH5=0 Then Return 
P_START=Start(PBANK)
If M0DE<4
   If M0DE=2
      M_LENGTH5=M_LENGTH5/2
   Else If M0DE=3
      M_LENGTH5=M_LENGTH5/4
   End If 
   ADVPOS#(1)=L/SCR_W#
Else 
   PAC=1
   Repeat 
      ADVPOS#(PAC)=(D_LENGTH(PAC)-ST-FIN)/SCR_W#
      Inc PAC
   Until PAC>4
End If 
P_LENGTH=M_LENGTH5
Return 
'
POS_SET:
RNG_T=0
If M0DE=4
   CY=Y Screen(Y Mouse)
   WVE_D=WVE_H/4
   If CY>HDR_H and CY<=HDR_H+WVE_D
      RNG_T=1
      RNG_B=WVE_D
      B=1
   Else If CY>HDR_H+WVE_D and CY<=HDR_H+WVE_D+WVE_D
      RNG_T=WVE_D+1 : RNG_B=WVE_D+WVE_D
      B=2
      'Gosub _FLIPPOS
   Else If CY>HDR_H+WVE_D+WVE_D and CY<=HDR_H+WVE_D+WVE_D+WVE_D
      RNG_T=WVE_D+WVE_D+1 : RNG_B=WVE_D+WVE_D+WVE_D
      B=3
   Else If CY>HDR_H+WVE_D+WVE_D+WVE_D and CY<=HDR_H+WVE_H
      RNG_T=WVE_D+WVE_D+WVE_D+1 : RNG_B=WVE_H
      B=4
   End If 
   Gosub _SWAPBANK
   If Length(B+7)=0
      Gosub _CLEARPLAYBUFFER
   End If 
Else 
   If Length(5)=0
      Gosub _CLEARPLAYBUFFER
   End If 
End If 
Return 
'
_FLIPPOS:
If PLYING=False or INFO=False Then Return 
If M0DE=4
   Goto CLEARPOS
Else 
   Goto FLIPPOS
End If 
'
_UPDATEPOS:
If PLYING=False or INFO=False Then Return 
If M0DE=4
   Goto FLIPPOS
Else 
   Goto CLEARPOS
End If 
'
CLEARPOS:
If _AMIVER<5 and M0DE=4 Then Return 
If M0DE=4
   NPY=HDR_H : NPCOUNT=1
   Repeat 
      If PXR2(NPCOUNT)<>PXR(NPCOUNT)
         If PXR(NPCOUNT)>0
            Screen Copy 0,PXR(NPCOUNT),NPY,PXR(NPCOUNT)+1,NPY+(WVE_H/4) To 0,PXR(NPCOUNT),NPY,%110000
         End If 
      End If 
      NPY=NPY+(WVE_H/4)
      Inc NPCOUNT
   Until NPCOUNT>4
Else 
   If PXR(1)>0
      Screen Copy 0,PXR(1),HDR_H,PXR(1)+1,WVE_H+HDR_H To 0,PXR(1),HDR_H,%110000
   End If 
End If 
Return 
'
FLIPPOS:
If _AMIVER<5 and M0DE=4 Then Return 
If M0DE=4
   NPY=HDR_H : NPCOUNT=1
   Repeat 
      Screen Copy 0,PXR(NPCOUNT),NPY,PXR(NPCOUNT)+1,NPY+(WVE_H/4) To 0,PXR(NPCOUNT),NPY,%110000
      NPY=NPY+(WVE_H/4)
      Inc NPCOUNT
   Until NPCOUNT>4
Else 
   Screen Copy 0,PXR(1),HDR_H,PXR(1)+1,WVE_H+HDR_H To 0,PXR(1),HDR_H,%110000
End If 
Return 
'
'  
'
'***************************************************************************** 
'*draw************************************************************************ 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'  
'   ::::::-.  :::::::..    :::.     .::    .   .:: 
'   ;;,   `';,;;;;``;;;;   ;;`;;    ';;,  ;;  ;;;' 
'   `[[     [[\[[[,/[[['  ,[[ '[[,   '[[, [[, [['  
'    $$,    $$"$$$$$$c   c$$$cc$$$c    Y$c$$$c$P   
'    888_,o8P',888b "88bo 888   888,    "88"888    
'   "MMMMP"`  "MMMM   "W" YMM   ""`      "M "M"    
'
'
'
_DRAW:
WVE_D=WVE_H/2
Ink _PANE
Bar 0,HDR_H To SCR_W,HDR_H+WVE_D-1
Bar 0,HDR_H+WVE_D+1 To SCR_W,HDR_H+WVE_H
Ink _SHADOW
Draw 0,HDR_H+WVE_D To SCR_W,HDR_H+WVE_D
If M0DE>1
   WVE_D=WVE_H/4
   DCY=WVE_H/2
   Draw 0,HDR_H+WVE_D To SCR_W,HDR_H+WVE_D
   Draw 0,HDR_H+WVE_D+DCY To SCR_W,HDR_H+WVE_D+DCY
End If 
If M0DE>2
   WVE_D=WVE_H/4
   DCY=-(WVE_H/8)
   DA=0
   Repeat 
      Draw 0,HDR_H+WVE_D+DCY To SCR_W,HDR_H+WVE_D+DCY
      DCY=DCY+WVE_D
      Inc DA
   Until DA>3
End If 
If M0DE<>4 and Length(5)=0
   Goto _COPYWAVE
End If 
Ink _WHITE
If _AMIVER<5
   _STEP=2
Else 
   _STEP=1
End If 
If M0DE=1
   WVE_D=HDR_H+(WVE_H/2)
   ADV#(1)=(Length(5)-ST-FIN)/SCR_W#
   D_START(1)=Start(5)+ST
   CN=(Peek(D_START(1))*128)/192
   DA=0
   If CN>84
      CN=CN-170
   End If 
   Gr Locate 0,CN+WVE_D
   Repeat 
      CN=Int(DA*ADV#(1))
      CN=(Peek(D_START(1)+CN)*128)/192
      If CN>84
         CN=CN-170
      End If 
      Draw To DA,CN+WVE_D
      DA=DA+_STEP
   Until DA>SCR_W-1
Else If M0DE=2
   WVE_D=WVE_H/2
   D_LENGTH(1)=Length(5)/2
   ADV#(1)=(D_LENGTH(1)-ST-FIN)/SCR_W#
   D_START(1)=Start(5)+ST
   D_START(2)=D_START(1)+D_LENGTH(1)
   DC=1
   DCY=HDR_H+(WVE_D/2)
   Repeat 
      CN=(Peek(D_START(DC))*128)/512
      DA=1
      If CN>31
         CN=CN-64
      End If 
      Gr Locate 0,CN+DCY
      Repeat 
         CN=Int(DA*ADV#(1))
         CN=(Peek(D_START(DC)+CN)*128)/512
         If CN>31
            CN=CN-64
         End If 
         Draw To DA,CN+DCY
         DA=DA+_STEP
      Until DA>SCR_W-1
      Inc DC
      DCY=DCY+WVE_D
   Until DC>2
Else If M0DE=3
   WVE_D=WVE_H/4
   D_LENGTH(1)=Length(5)/4
   ADV#(1)=(D_LENGTH(1)-ST-FIN)/SCR_W#
   DC=1
   DCY=WVE_D/2
   Repeat 
      D_START(DC)=Start(5)+ST+DCY
      DCY=DCY+D_LENGTH(1)
      Inc DC
   Until DC>4
   DC=1
   DCY=HDR_H+(WVE_D/2)
   Repeat 
      CN=(Peek(D_START(DC))*128)/1024
      DA=1
      If CN>15
         CN=CN-32
      End If 
      Gr Locate 0,CN+DCY
      Repeat 
         CN=Int(DA*ADV#(1))
         CN=(Peek(D_START(DC)+CN)*128)/1024
         If CN>15
            CN=CN-32
         End If 
         Draw To DA,CN+DCY
         DA=DA+_STEP
      Until DA>SCR_W-1
      Inc DC
      DCY=DCY+WVE_D+1
   Until DC>4
Else If M0DE=4
   WVE_D=WVE_H/4
   DC=1
   Repeat 
      D_LENGTH(DC)=Length(DC+7)
      If D_LENGTH(DC)>0
         ADV#(DC)=(D_LENGTH(DC)-ST-FIN)/SCR_W#
         D_START(DC)=Start(DC+7)+ST
      Else 
         ADV#(DC)=0
         D_START(DC)=0
      End If 
      Inc DC
   Until DC>4
   DC=1
   DCY=HDR_H+(WVE_D/2)
   Repeat 
      If D_LENGTH(DC)>0
         CN=(Peek(D_START(DC)+1)*128)/1024
         DA=1
         If CN>15
            CN=CN-32
         End If 
         Gr Locate 0,CN+DCY
         Repeat 
            CN=Int(DA*ADV#(DC))
            CN=D_START(DC)+CN
            If CN>D_START(DC)
               CN=(Peek(CN)*128)/1024
               If CN>15
                  CN=CN-32
               End If 
               Draw To DA,CN+DCY
            Else 
               Draw 0,DCY To SCR_W,DCY
               DA=SCR_W
               Exit 
            End If 
            DA=DA+_STEP
         Until DA>SCR_W
      End If 
      DCY=DCY+WVE_D
      Inc DC
   Until DC>4
End If 
_COPYWAVE:
Gosub DRWINFO
Screen Copy 0,0,HDR_H,SCR_W,HDR_H+WVE_H To 1,0,0
Return 
'
_SHOWWAVE:
Screen Copy 1,0,0,SCR_W,WVE_H To 0,0,HDR_H
Return 
'
DRWINFO:
If INFO
   Ink _SHADOW
   I=39
   Repeat 
      Draw I,HDR_H To I,HDR_H+2
      Draw I+40,HDR_H To I+40,HDR_H+5
      Draw I,HDR_H+WVE_H-3 To I,HDR_H+WVE_H-1
      Draw I+40,HDR_H+WVE_H-5 To I+40,HDR_H+WVE_H-1
      I=I+80
   Until I>=559
   Draw I,HDR_H To I,HDR_H+2
   Draw I,HDR_H+WVE_H-3 To I,HDR_H+WVE_H-1
   If M0DE=4
      I=39
      Repeat 
         Draw I,HDR_H+WVE_D To I,HDR_H+WVE_D+2
         Draw I+40,HDR_H+WVE_D To I+40,HDR_H+WVE_D+4
         Draw I,HDR_H+(WVE_D*3)-2 To I,HDR_H+(WVE_D*3)
         Draw I+40,HDR_H+(WVE_D*3)-4 To I+40,HDR_H+(WVE_D*3)
         I=I+80
      Until I>=559
      Draw I,HDR_H+WVE_D To I,HDR_H+WVE_D+2
      Draw I,HDR_H+(WVE_D*3)-2 To I,HDR_H+(WVE_D*3)
   End If 
   Return 
End If 
DRWTIME:
If RENDERING Then Return 
If P_LENGTH>0
   DIV#=FREQ
   DIV#=((DIV#/P_LENGTH)*60)*4
   If DIV#<32
      DIV#=FREQ
      DIV#=P_LENGTH/DIV#
      T$=" Secs"
      If DIV#>120
         ADV#(1)=DIV#
         DIV#=DIV#/60
         DIV#=Int(DIV#)
         T$=" Mins"+Str$(Int(ADV#(1)-(DIV#*60)))+T$
      End If 
   Else If DIV#>320
      DIV#=FREQ
      DIV#=(P_LENGTH/DIV#)*1000
      T$=" Ms"
   Else 
      T$=" Bpm"
   End If 
Else 
   DIV#=0
End If 
Ink _SHADOW,_PANE
If DIV#>0
   T$="  "+Str$(DIV#)+T$
Else 
   T$=Space$(14)
End If 
Text 600-Text Length(T$),WVE_H+24+16,T$
T$=Str$(FREQ)+" Hz"
Text 108-Text Length(T$),WVE_H+24+16,T$
_UPDATETIME=False
Return 
'
DRWBGREC:
If RENDERING Then Return 
BGRECTOTAL=BGRECTOTAL+BSIZE
Gosub GFXSET
Ink _HIGHLIGHT,_PANE
Text 387,WVE_H+24+16,"REC:"
Text 423,WVE_H+24+16,Str$(BGRECTOTAL)-" "
Gosub GFXRESTORE
Return 
'
HEADER:
Cls _PANE,0,0 To SCR_W,HDR_H
Ink _SHADOW,_PANE
T$=Str$(B)-" "
If Len(F$)<19
   Text 6,8,T$+":"+F$
Else 
   Text 6,8,T$+":"+Left$(F$,15)+"..."
End If 
MFREE=Fast Free+Chip Free
If MFREE>10000000
   MFREE=MFREE/1048576
   T$="M"
Else 
   MFREE=MFREE/1024
   T$="K"
End If 
Text SCR_W-83,8,"Free:"+Str$(MFREE)-" "+T$
HEADERCORDS:
Ink _SHADOW,_PANE
Text 244,8,Space$(9)
Text 244,8,Str$(Length(PBANK))
Text 210,8,"Size:"
Text 361,8,Space$(9)
Text 361,8,Str$(RST)
Text 319,8,"Start:"
Text 480,8,Space$(9)
Text 480,8,Str$(RL)
Text 438,8,"Range:"
Return 
'
_SHOWALL:
If PASS=0
   Gosub SET_PBANK
   If FX_LENGTH=0
      Goto FLSHSCR
   End If 
   RENDERING=True
   XD=0 : XD2=SCR_W : ST=0 : FIN=0 : L=0
   Gosub _RANGEPXCLEAR
   Gosub SETCORDS
   Gosub _DRAW
   Gosub FRESHSEL
   Gosub CLEARPOS
   Gosub SETZ0NES
   Gosub MAGICWAND
   Gosub _RANGEPXCLEAR
   Gosub HEADER
   Gosub DRWTIME
   If DISPPLY
      STA=0
      FI=M_LENGTH5
   End If 
   RENDERING=False
End If 
Inc PASS
_UPDATETIME=True
Return 
'
_SHOWRANGE:
If PASS=0
   If RL<2
      Goto FLSHSCR
   End If 
   Gosub SET_PBANK
   If FX_LENGTH=0
      Goto FLSHSCR
   End If 
   RENDERING=True
   ST=RST : FIN=RFIN
   XD=ST/CON#
   XD2=((M_LENGTH5-FIN)/CON#)
   Gosub SETCORDS
   Gosub _DRAW
   Gosub FRESHSEL
   If M0DE=4 and PXR(1)>XR and PXR(1)<XR2
      Gosub _FLIPPOS
   Else If M0DE=4
      Gosub _UPDATEPOS
   End If 
   Gosub SETZ0NES
   Gosub MAGICWAND
   If DISPPLY
      STA=ST
      FI=M_LENGTH5-FIN
   End If 
   RENDERING=False
End If 
Inc PASS
Return 
'  
'
'
'***************************************************************************** 
'*zoom*wand******************************************************************* 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'   ::::::::     ...         ...      .        :   
'   `````;;;  .;;;;;;;.   .;;;;;;;.   ;;,.    ;;;  
'       .n[[',[[     \[[,,[[     \[[, [[[[, ,[[[[, 
'     ,$$P"  $$$,     $$$$$$,     $$$ $$$$$$$$"$$$ 
'   ,888bo,_ "888,_ _,88P"888,_ _,88P888 Y88" 888o 
'    `""*UMM   "YMMMMMP"   "YMMMMMP" MM  M'  "MMMM 
'
'
'
UDISPPLY:
If DISPPLY
   If ST+FIN=0
      FI=M_LENGTH5
   Else 
      STA=ST
      FI=M_LENGTH5-FIN
   End If 
End If 
Return 
'
MAGICWANDM:
_MOVEHANDLE=True
MAGICWAND:
If XD+43<XD2-43
   Cls _PANE,0,WAND_H To XD,WAND_H2
   Cls _WHITE,XD,WAND_H To XD+43,WAND_H2
   Cls _BLACK,XD+43,WAND_H To XD2-43,WAND_H2
   Cls _WHITE,XD2-43,WAND_H To XD2,WAND_H2
   Cls _PANE,XD2,WAND_H To SCR_W,WAND_H2
   Set Zone 70,XD,WAND_H To XD+43,WAND_H2
   Set Zone 72,XD+43,WAND_H To XD2-43,WAND_H2
   Set Zone 71,XD2-43,WAND_H To XD2,WAND_H2
   _ZXD=XD
Else If XD2<SCR_W and _ZXD<SCR_W-43-43 and Not _MOVEHANDLE
   Cls _PANE,0,WAND_H To _ZXD,WAND_H2
   Cls _HIGHLIGHT,_ZXD,WAND_H To _ZXD+23,WAND_H2
   Cls _BLACK,_ZXD+23,WAND_H To _ZXD+23+43,WAND_H2
   Cls _HIGHLIGHT,_ZXD+43+23,WAND_H To _ZXD+43+23+23,WAND_H2
   Cls _PANE,_ZXD+43+46,WAND_H To SCR_W,WAND_H2
   Set Zone 70,_ZXD,WAND_H To _ZXD+23,WAND_H2
   Set Zone 72,_ZXD+23,WAND_H To _ZXD+23+43,WAND_H2
   Set Zone 71,_ZXD+43+23,WAND_H To _ZXD+43+23+23,WAND_H2
Else If XD2<SCR_W and XD<SCR_W-43-23-23
   Cls _PANE,0,WAND_H To XD,WAND_H2
   Cls _HIGHLIGHT,XD,WAND_H To XD+23,WAND_H2
   Cls _BLACK,XD+23,WAND_H To XD+23+43,WAND_H2
   Cls _HIGHLIGHT,XD+43+23,WAND_H To XD+43+23+23,WAND_H2
   Cls _PANE,XD+43+46,WAND_H To SCR_W,WAND_H2
   Set Zone 70,XD,WAND_H To XD+23,WAND_H2
   Set Zone 72,XD+23,WAND_H To XD+23+43,WAND_H2
   Set Zone 71,XD+43+23,WAND_H To XD+43+23+23,WAND_H2
   _ZXD=XD
Else 
   Cls _PANE,0,WAND_H To SCR_W-43-23-23,WAND_H2
   Cls _HIGHLIGHT,SCR_W-43-23-23,WAND_H To SCR_W-43-23,WAND_H2
   Cls _BLACK,SCR_W-23-43,WAND_H To SCR_W-23,WAND_H2
   Cls _HIGHLIGHT,SCR_W-23,WAND_H To SCR_W,WAND_H2
   Set Zone 70,SCR_W-43-23-23,WAND_H To SCR_W-43-23,WAND_H2
   Set Zone 72,SCR_W-43-23,WAND_H To SCR_W-23,WAND_H2
   Set Zone 71,SCR_W-23,WAND_H To SCR_W,WAND_H2
   _ZXD=XD
End If 
_MOVEHANDLE=False
Return 
'  
LEFTWAND:
If XD=XD2
   Inc XD2
End If 
MX=X Screen(X Mouse)
RENDERING=True
If _AMIVER>2
   Gosub _UPDATEPOS
End If 
Gosub TESTMOVE
PX=MX : PXD=XD
Repeat 
   NX=X Screen(X Mouse)
   If NX<>PX
      Gosub LREFRESH
   End If 
   If C=78 or C=47
      Inc XD : Inc PXD
      Gosub ZKEYREFRSH
      Gosub LREFRESH
   End If 
   If C=79 or C=45
      Dec XD : Dec PXD
      Gosub ZKEYREFRSH
      Gosub LREFRESH
   End If 
   PX=NX
   Gosub GVAL
Until M=0
If _AMIVER<5
   Gosub _DRAW
   Gosub FRESHSEL
End If 
RENDERING=False
Gosub _UPDATEPOS
Return 
'
LREFRESH:
Gosub UDISPPLY
If Key Shift=1
   XD=PXD-((MX-NX)/2)
Else 
   XD=PXD-(MX-NX)
End If 
PX=NX
If XD<0 Then XD=0
If XD>SCR_W-2 Then XD=SCR_W-2
If XD>XD2-1 Then XD=XD2-1
Gosub SETCORDS
Gosub SETZ0NES
Gosub MAGICWAND
If _AMIVER>2
   Gosub _DRAW
   Gosub FRESHSEL
End If 
Return 
'
RIGHTWAND:
If XD=XD2
   Inc XD2
End If 
MX=X Screen(X Mouse)
RENDERING=True
If _AMIVER>4
   Gosub _UPDATEPOS
End If 
Gosub TESTMOVE
PX=MX : PXD2=XD2
Repeat 
   NX=X Screen(X Mouse)
   If NX<>PX
      Gosub RREFRESH
   End If 
   If C=78 or C=47
      Inc XD2 : Inc PXD2
      Gosub ZKEYREFRSH
      Gosub RREFRESH
   End If 
   If C=79 or C=45
      Dec XD2 : Dec PXD2
      Gosub ZKEYREFRSH
      Gosub RREFRESH
   End If 
   Gosub GVAL
Until M=0
If _AMIVER<5
   Gosub _DRAW
   Gosub FRESHSEL
End If 
RENDERING=False
Gosub _UPDATEPOS
Return 
'
RREFRESH:
Gosub UDISPPLY
If Key Shift=1
   XD2=PXD2-((MX-NX)/2)
Else 
   XD2=PXD2-(MX-NX)
End If 
PX=NX
If XD2>SCR_W Then XD2=SCR_W
If XD2<1 Then XD2=1
If XD2<XD+1 Then XD2=XD+1
Gosub SETCORDS
Gosub SETZ0NES
Gosub MAGICWAND
If _AMIVER>4
   Gosub _DRAW
   Gosub FRESHSEL
End If 
Return 
'
MOVEWAND:
MX=X Screen(X Mouse)
RENDERING=True
If _AMIVER>2
   Gosub _UPDATEPOS
End If 
Gosub TESTMOVE
PX=MX : PXD=XD : PXD2=XD2
Repeat 
   NX=X Screen(X Mouse)
   If NX<>PX
      Gosub MREFRESH
   End If 
   If C=78 or C=47
      Inc XD : Inc PXD
      Inc XD2 : Inc PXD2
      Gosub ZKEYREFRSH
      Gosub MREFRESH
   End If 
   If C=79 or C=45
      Dec XD : Dec PXD
      Dec XD2 : Dec PXD2
      Gosub ZKEYREFRSH
      Gosub MREFRESH
   End If 
   Gosub GVAL
Until M=0
If _AMIVER<5
   Gosub _DRAW
   Gosub FRESHSEL
End If 
RENDERING=False
Gosub _UPDATEPOS
Return 
'
MREFRESH:
Gosub UDISPPLY
If Key Shift=1
   XD=PXD-((MX-NX)/2)
   XD2=PXD2-((MX-NX)/2)
Else 
   XD=PXD-(MX-NX)
   XD2=PXD2-(MX-NX)
End If 
PX=NX
If XD2<1
   XD2=1
End If 
If XD<0 Then XD=0
If XD>SCR_W-2 Then XD=SCR_W-2
If XD2>SCR_W Then XD2=SCR_W
Gosub SETCORDS
Gosub SETZ0NES
Gosub MAGICWANDM
If _AMIVER>4
   Gosub _DRAW
   Gosub FRESHSEL
End If 
Return 
'
LRREFRSH:
Gosub _DRAW
Gosub SETCORDS
Gosub SETZ0NES
Gosub MAGICWAND
Gosub FRESHSEL
PZ=72
Return 
'
ZKEYREFRSH:
Gosub UDISPPLY
If XD<0 Then XD=0
If XD>SCR_W-2 Then XD=SCR_W-2
If XD2>SCR_W Then XD2=SCR_W
If XD2<0 Then XD2=0
Gosub SETCORDS
Gosub SETZ0NES
Gosub MAGICWAND
Return 
'  
SETCORDS:
If M0DE=4
   M_LENGTH5=Length(PBANK)
Else 
   M_LENGTH5=Length(5)
End If 
If M0DE=2
   M_LENGTH5=M_LENGTH5/2
Else If M0DE=3
   M_LENGTH5=M_LENGTH5/4
End If 
If L>0
   CON#=L/SCR_W#
Else 
   CON#=M_LENGTH5/SCR_W#
End If 
If RL>0 and RST>0 and CON#>0
   If ST>0
      XR=Int((RST/CON#)-(ST/CON#))
   Else 
      XR=Int(RST/CON#)
   End If 
   XR2=Int(SCR_W-((RFIN/CON#)-(FIN/CON#)))
Else If RST=0 and CON#>0
   XR=0
   XR2=Int(SCR_W-((RFIN/CON#)-(FIN/CON#)))
End If 
If XR<0
   XR=0
Else If XR>SCR_W
   XR=SCR_W
End If 
If XR2>SCR_W
   XR2=SCR_W
Else If XR2<0
   XR2=0
End If 
CON#=M_LENGTH5/SCR_W#
ST=Int(XD*CON#)
FIN=Int((SCR_W-XD2)*CON#)
L=M_LENGTH5-ST-FIN
Gosub POS_CAL
Return 
'
SETDISPLAY:
If M0DE=4
   M_LENGTH5=Length(PBANK)
Else 
   M_LENGTH5=Length(5)
End If 
If M0DE=2
   M_LENGTH5=M_LENGTH5/2
Else If M0DE=3
   M_LENGTH5=M_LENGTH5/4
End If 
If L>0
   CON#=L/SCR_W#
Else 
   CON#=M_LENGTH5/SCR_W#
End If 
If CON#>0
   XR=Int((RST/CON#)-(ST/CON#))
   XR2=Int(SCR_W-((RFIN/CON#)-(FIN/CON#)))
   If XR<0
      XR=0
   Else If XR>SCR_W
      XR=SCR_W
   End If 
   If XR2>SCR_W
      XR2=SCR_W_
   Else If XR2<0
      XR2=0
   End If 
End If 
If M_LENGTH5=0
   XD=0 : XD2=SCR_W
Else 
   CON#=M_LENGTH5/SCR_W#
   L=M_LENGTH5-ST-FIN
   Gosub POS_CAL
   XD=ST/CON#
   XD2=(M_LENGTH5-FIN)/CON#
End If 
Return 
'
'
'
'***************************************************************************** 
'*select********************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'    .::::::. .,::::::  :::    .,::::::  .,-:::::::::::::::: 
'   ;;;`    `;;;;;''''  ;;;    ;;;;'''',;;;'````' ;;;;;;;''' 
'   '[==/[[[[, [[cccc   [[[     [[cccc [[[            [[     
'     '''    $ $$""""   $$'     $$"""" $$$            $$     
'   ,88b    dP 888oo,_o88oo,.__ 888oo,_`88bo,__,o,    88,    
'     "YMmMY"  """"YUM"""YUMMMM """"YUM  "YUMMMMMP    MMM    
'
'
'
RANGE:
RENDERING=True
Gosub _UPDATEPOS
Gosub CLR_RNG
Gosub POS_SET
MX=X Screen(X Mouse)
If Key Shift=1
   MX=MX/40
   MX=MX*40
End If 
PX=0 : XR=MX : XR2=XR : LXR=XR : LXR2=XR : NX=MX
Gosub SETSELCORDS
Gosub HEADERCORDS
If RNGEPLY
   If M0DE=4
      OFFSET(PBANK-7)=RST
   Else 
      OFFSET(1)=RST
   End If 
End If 
Repeat 
   If NX<>PX Then Gosub SMREFRESH
   Gosub GVAL
   NX=X Screen(X Mouse)
   If(C=78 or C=47) Then XR2=XR2+1 : Inc PXD : Gosub DRWRANGE
   If(C=79 or C=45) Then XR2=XR2-1 : Dec PXD : Gosub DRWRANGE
Until M=0
Gosub XRSWAP
Gosub SETZ0NES
Gosub HEADERCORDS
RENDERING=False
Gosub FLIPPOS
Return 
'
SMREFRESH:
If Key Shift=1
   NX=NX/40
   NX=NX*40
   PX=PX/40
   PX=PX*40
   If NX=PX
      Return 
   End If 
End If 
XR2=XR-(MX-NX) : PX=NX
If XR2<0 Then XR2=0
If XR2>SCR_W Then XR2=SCR_W
If XR2>LXR2 Then LXR2=XR2
If XR2<LXR Then LXR=XR2
Gosub SETSELCORDS
Gosub DRWRANGE
Gosub HEADERCORDS
Return 
'
R0LLLEFT:
If _MENUDO Then Return 
Cls _HIGHLIGHT,XR+1,RNG_T+HDR_H To XR+12,RNG_B+HDR_H
Return 
'  
UNR0LLLEFT:
If _MENUDO Then Return 
If XR2-XR>12 and XR2>XR
   Screen Copy 1,XR+1,RNG_T,XR+HDR_H,RNG_B To 0,XR+1,RNG_T+HDR_H,%110000
End If 
If M=0 and PLYING
   Gosub _FLIPPOS
End If 
Return 
'
R0LLRIGHT:
If _MENUDO Then Return 
If XR2>12 and XR2>XR+12
   Cls _HIGHLIGHT,XR2-11,RNG_T+HDR_H To XR2,RNG_B+HDR_H
End If 
Return 
'
UNR0LLRIGHT:
If _MENUDO Then Return 
If XR2>12 and XR2>XR+12
   Screen Copy 1,XR2-11,RNG_T,XR2,RNG_B To 0,XR2-11,RNG_T+HDR_H,%110000
End If 
If M=0 and PLYING
   Gosub _FLIPPOS
End If 
Return 
'
SELLEFT:
RENDERING=True
Gosub _UPDATEPOS
Gosub UNR0LLLEFT
MX=X Screen(X Mouse)
LXR=XR : LXR2=XR : PX=MX : PXD=XR
Repeat 
   NX=X Screen(X Mouse)
   If NX<>PX Then Gosub SLREFRESH
   If(C=78 or C=47)
      XR=XR+1 : PXD=PXD+1
      Gosub LKEYREFRSH
   Else If(C=79 or C=45)
      XR=XR-1 : PXD=PXD-1
      Gosub LKEYREFRSH
   End If 
   Gosub GVAL
Until M=0
Gosub XRSWAP
Gosub R0LLLEFT
Gosub HEADERCORDS
Gosub SETZ0NES
RENDERING=False
Gosub _UPDATEPOS
Return 
'  
SLREFRESH:
If Key Shift=1
   NX=NX/40
   NX=NX*40
   PX=PX/40
   PX=PX*40
   NX=NX+40
   If NX=PX
      Return 
   End If 
End If 
XR=PXD-(MX-NX)
PX=NX
LKEYREFRSH:
If XR<0 Then XR=0
If XD>SCR_W Then XD=SCR_W
If XR>LXR2 Then LXR2=XR
If LXR>XR Then LXR=XR
If Key Shift=1
   LXR=LXR/40
   LXR=LXR*40
   XR=XR/40
   XR=XR*40
End If 
Gosub DRWRANGE
Gosub SETLSELCORDS
Gosub DRWRANGE
Gosub HEADERCORDS
Return 
'
SELRIGHT:
RENDERING=True
Gosub _UPDATEPOS
Gosub UNR0LLRIGHT
MX=X Screen(X Mouse)
LXR=XR2 : LXR2=XR2 : PX=MX : PXD=XR2
Repeat 
   Gosub GVAL
   NX=X Screen(X Mouse)
   If NX<>PX Then Gosub SRREFRESH
   If(C=78 or C=47)
      XR2=XR2+1 : PXD=PXD+1
      Gosub RKEYREFRSH
   Else If(C=79 or C=45)
      XR2=XR2-1 : PXD=PXD-1
      Gosub RKEYREFRSH
   End If 
Until M=0
Gosub XRSWAP
Gosub R0LLRIGHT
Gosub HEADERCORDS
Gosub SETZ0NES
RENDERING=False
Gosub _UPDATEPOS
Return 
'
SRREFRESH:
If Key Shift=1
   NX=NX/40
   NX=NX*40
   PX=PX/40
   PX=PX*40
   If NX=PX
      Return 
   End If 
End If 
XR2=PXD-(MX-NX)
PX=NX
RKEYREFRSH:
If XR2<0 Then XR2=0
If XR2>SCR_W Then XR2=SCR_W
If XR2>LXR2 Then LXR2=XR2
If XR2<LXR Then LXR=XR2
If Key Shift=1
   LXR=LXR/40
   LXR=LXR*40
   XR2=XR2/40
   XR2=XR2*40
End If 
Gosub DRWRANGE
Gosub SETRSELCORDS
Gosub DRWRANGE
Gosub HEADERCORDS
Return 
'
FRESHSEL:
If RL=0 Then Return 
Screen Copy 1,XR+1,RNG_T,XR2,RNG_B To 0,XR+1,RNG_T+HDR_H,%110000
Ink _BG
Draw XR,RNG_T+HDR_H To XR,RNG_B+HDR_H-1
Draw XR2,RNG_T+HDR_H To XR2,RNG_B+HDR_H-1
Return 
'
DRWRANGE:
If RNGEPLY
   If RST+RFIN=0
      FI=M_LENGTH5
   Else 
      STA=RST
      FI=M_LENGTH5-RFIN
   End If 
End If 
If XR>XR2
   If XR2>LXR
      Screen Copy 1,LXR,RNG_T,XR2,RNG_B To 0,LXR,RNG_T+HDR_H
   End If 
   Screen Copy 1,XR2+1,RNG_T,XR,RNG_B To 0,XR2+1,RNG_T+HDR_H,%110000
   Screen Copy 1,XR+1,RNG_T,LXR2,RNG_B To 0,XR+1,RNG_T+HDR_H
Else 
   If LXR<XR
      Screen Copy 1,LXR,RNG_T,XR,RNG_B To 0,LXR,RNG_T+HDR_H
      LXR=XR
   End If 
   If XR2<LXR2
      Screen Copy 1,XR2+1,RNG_T,LXR2+1,RNG_B To 0,XR2+1,RNG_T+HDR_H
   End If 
   If XR2>LXR
      Screen Copy 1,LXR+1,RNG_T,XR2,RNG_B To 0,LXR+1,RNG_T+HDR_H,%110000
   End If 
   Screen Copy 1,XR+1,RNG_T,XR2,RNG_B To 0,XR+1,RNG_T+HDR_H,%110000
End If 
Ink _BG
Draw XR2,RNG_T+HDR_H To XR2,RNG_B+HDR_H-1
Draw XR,RNG_T+HDR_H To XR,RNG_B+HDR_H-1
Gosub SETZ0NES
Gosub HEADERCORDS
Return 
'
XRSWAP:
If XR>XR2
   Swap XR,XR2
   Gosub SETSELCORDS
   Gosub HEADERCORDS
End If 
Return 
'
SETSELV:
If M0DE=4
   M_LENGTH5=Length(PBANK)
Else 
   M_LENGTH5=Length(5)
End If 
If M0DE=2
   M_LENGTH5=M_LENGTH5/2
Else If M0DE=3
   M_LENGTH5=M_LENGTH5/4
End If 
If L>0
   CON#=L/SCR_W#
Else 
   CON#=M_LENGTH5/SCR_W#
End If 
Return 
'
SETSELCORDS:
Gosub SETSELV
RST#=XR*CON#
RFIN#=(SCR_W-XR2)*CON#
CON#=M_LENGTH5/SCR_W#
ST#=XD*CON#
FIN#=(SCR_W-XD2)*CON#
RST#=ST#+RST#
RST=Int(RST#)
ST=Int(ST#)
FIN=Int(FIN#)
L=M_LENGTH5-ST-FIN
RFIN#=FIN#+RFIN#
RFIN=Int(RFIN#)
If RFIN<0 Then RFIN=0
RL=M_LENGTH5-RST-RFIN
Return 
'
SETLSELCORDS:
Gosub SETSELV
RST#=XR*CON#
CON#=M_LENGTH5/SCR_W#
ST#=XD*CON#
RST#=ST#+RST#
RST=Int(RST#)
ST=Int(ST#)
L=M_LENGTH5-ST-FIN
If XR=0 and XR=XR2
   RL=0
Else 
   RL=M_LENGTH5-RST-RFIN
End If 
Return 
'
SETRSELCORDS:
Gosub SETSELV
RFIN#=(SCR_W-XR2)*CON#
CON#=M_LENGTH5/SCR_W#
ST#=XD*CON#
FIN#=(SCR_W-XD2)*CON#
FIN=Int(FIN#)
L=M_LENGTH5-ST-FIN
RFIN#=FIN#+RFIN#
RFIN=Int(RFIN#)
If RFIN<0 Then RFIN=0
If XR=0 and XR=XR2
   RL=0
Else 
   RL=M_LENGTH5-RST-RFIN
End If 
Return 
'
_RANGEALL:
If PASS=0
   Gosub SET_PBANK
   If FX_LENGTH=0
      Goto FLSHSCR
   End If 
   FIN=Length(PBANK)
   RL=FIN : ST=0 : RST=0 : RFIN=0 : XR=0 : XR2=0
   Gosub _RANGEPXCLEAR
   Gosub SETCORDS
   Gosub _SHOWWAVE
   Gosub FRESHSEL
   Gosub SETZ0NES
   Gosub HEADERCORDS
End If 
Inc PASS
Return 
'
_RANGEDISPLAY:
If PASS=0
   Gosub SET_PBANK
   If FX_LENGTH=0
      Goto FLSHSCR
   End If 
   XR=0 : XR2=SCR_W
   Gosub _RANGEPXCLEAR
   Gosub SETSELCORDS
   Gosub _SHOWWAVE
   Gosub FRESHSEL
   Gosub SETZ0NES
   Gosub HEADERCORDS
End If 
Inc PASS
Return 
'
_RANGENONE:
If RL=0 Then Return 
If PASS=0
   If RNGEPLY
      RNGEPLY=False
      STA=0 : ST=0 : FI=M_LENGTH5
   End If 
   Gosub CLR_RNG
   If PXR(1)>XR and PXR(1)<XR2
      Gosub _UPDATEPOS
   End If 
End If 
XR=0 : XR2=0 : LXR=0 : LXR2=0
RST=0 : RL=0 : RFIN=0
Gosub SETZ0NES
Gosub HEADERCORDS
Inc PASS
Return 
'
_RANGEPXCLEAR:
PXR(1)=0 : PXR2(1)=0
PXR(2)=0 : PXR2(2)=0
PXR(3)=0 : PXR2(3)=0
PXR(4)=0 : PXR2(4)=0
Return 
'      
CLR_RNG:
Screen Copy 1,XR,0,XR2+1,WVE_H To 0,XR,HDR_H
Return 
'
'
'
'***************************************************************************** 
'*file************************************************************************ 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'    .-:::::' :::    :::    .,:::::: 
'    ;;;'''', ;;;    ;;;    ;;;;'''' 
'    [[[,,==[ [[[    [[[     [[cccc  
'    `$$$"``" $$$,   $$'     $$""""  
'   _ 888    o88888o88oo,.__ 888oo,_ 
'   MM"MM,   MMM"MM"""YUMMMM """"YUM 
'
'
'
SETFILENAME:
FB$(B)=F$
If F$<>_UNNAMED$ Then FPATH$(B)=Dir$ Else FPATH$(B)=""
If B<11
   If F$<>""
      Mid$(_MENU$(5,B,0),7)=FB$(B)
   Else 
      Mid$(_MENU$(5,B,0),7)=Space$(16)
   End If 
End If 
Return 
'
_NEW:
BTXT1$="New" : TXT1$="Clear the current" : TXT2$="waveform?" : Gosub _REQUEST
If Not REQ Then Return 
If Length(5)>0
   Gosub _STOP
   Erase 5
End If 
If M0DE=4
   Erase PBANK
   Gosub _CLEARPLAYBUFFER
End If 
F$=""
Gosub SETFILENAME
XD=0 : XD2=SCR_W : XR=0 : XR2=0 : RST=0 : RFIN=0 : RL=0 : STA=0 : FI=0
Gosub _DRAW
Gosub HEADER
Return 
'
_OPEN:
WTXT$="Open: raw iff aif wav abk med"
F$=""
Gosub FREQUEST
If Not FRQ Then Return 
If Not Exist(F$) Then Goto FLSHSCR
FILEOPEN:
_CHANNELS=0
_RATE=0
_TAG=0
_BITS=0
XR=0 : XR2=0 : XD=0 : XD2=SCR_W
RST=0 : RFIN=0 : RL=0
Gosub FILEL0AD
If LF=0
   F$=""
   Close 1
   Return 
End If 
Gosub SET_PBANK
If _BITS>0
   _TOAST$=Str$(_BITS)-" "+"bit "+_TOAST$
End If 
If _IFF and _BITS=16
   Gosub _STOP
   Gosub _16BITTO8BIT
Else If _WAV and _FLOAT and _BITS=32
   Gosub _STOP
   Gosub _32BITTO8BIT
Else If _WAV and _BITS=16
   Gosub _STOP
   Gosub _16BITTO8BITFLIP
Else If _WAV and _BITS=8
   Gosub _STOP
   Gosub _8BITUNSIGNTO8BIT
End If 
PM0DE=M0DE
If _CHANNELS>1 and _WAV
   Gosub _DEINTERLEAVE
   If M0DE<>4
      M0DE=2
   End If 
   If _CHANNELS>2
      PASS=0
      Gosub _DEINTERLEAVE
      If M0DE<>4
         M0DE=3
      End If 
   End If 
Else If _ABK
   M0DE=4
   Gosub _RAINSET
End If 
If _RATE>0
   _TOAST$=_TOAST$+Str$(_RATE)+"Hz "
Else 
   _TOAST$="8bit RAW PCM"
End If 
PASS=0
STA=0 : FI=Length(PBANK)
If PM0DE<>M0DE
   _M3SEL=M0DE+1
   M0DE=PM0DE
   Gosub M0DEMENU
   Gosub SETZ0NES
   Gosub HEADER
Else 
   Gosub _SHOWALL
End If 
If M0DE=4 Then Gosub POS_SET
Return 
'
FILEL0AD:
BANKNAME$=""
If F$<>"" and Exist(F$)
   Open In 1,F$
Else 
   LF=0
   Return 
End If 
LF=Lof(1)
If LF=0 Then Return 
FH$=Input$(1,4)
_CHANNELS=1
_IFF=False : _WAV=False : _16BIT=False : _FLOAT=False : _ABK=False : _MMD=False
If FH$="FORM"
   _IFF=True
Else If FH$="RIFF"
   _WAV=True
Else If FH$="AmBk"
   _ABK=True
Else If Mid$(FH$,0,3)="MMD"
   _MMD=True
End If 
Gosub SETFILENAME
BANKNAME$=""
If _MMD
   BANKNAME$=F$
   T$=Input$(1,4) : PL=Leek(Varptr(T$))
   'length    
   T$=Input$(1,4) : P=Leek(Varptr(T$))
   'pointer     
   Pof(1)=P+787
   T$=Input$(1,1) : NUMSAMPLES=Peek(Varptr(T$))
   'numsamples  
   N=1
   Pof(1)=32
   T$=Input$(1,4) : P=Leek(Varptr(T$))
   'exp pointer 
   Pof(1)=P
   T$=Input$(1,20)
   T$=Input$(1,4) : NAMES=Leek(Varptr(T$))
   T$=Input$(1,2) : ENTRIES=Deek(Varptr(T$))
   'entries   
   T$=Input$(1,2) : ENTSIZE=Deek(Varptr(T$))
   'enterz  
   Pof(1)=NAMES
   For I=1 To ENTRIES
      T$=Input$(1,ENTSIZE)
      P=Peek(Varptr(T$))
      If P>0
         For I2=1 To Text Length(T$)
            CN=Peek(Varptr(T$)+I2)
            If CN=0
               Exit 
            End If 
         Next I2
         FILES$(I)=Mid$(T$,0,I2)
      Else 
         FILES$(I)=_UNNAMED$
      End If 
   Next I
   Pof(1)=24
   T$=Input$(1,4) : P=Leek(Varptr(T$))
   'pointer to smplarr pointer    
   Pof(1)=P
   For I=1 To ENTRIES
      T$=Input$(1,4) : P=Leek(Varptr(T$))
      'pointer to InstrHdr pointers      
      If P>0 and P<Lof(1)-Pof(1)
         PNTERS(I)=P
      Else 
         PNTERS(I)=-1
      End If 
   Next I
   FX_START=0
   FX_LENGTH=Lof(1)
   For I=1 To ENTRIES
      B=N
      If PNTERS(I)>0
         Pof(1)=PNTERS(I)
         T$=Input$(1,4) : PL=Leek(Varptr(T$))
         'sample length 
         T$=Input$(1,2) : T=Deek(Varptr(T$))
         'sample type 
         If T=16
            T=0
            '16bit mono  
         End If 
         If T=48
            T=0 : PL=PL*2
            '16bit stereo  
         End If 
         If T=32
            T=0 : PL=PL*2
            'stereo  
         End If 
         If T=0 and PL>0
            If 7+N>8
               Erase 7+N
               Trap Reserve As Work 7+N,PL
               If Errtrap
                  Close 1
                  Gosub _NOMEMORY
                  Return 
               End If 
               AC=Start(7+N)
            Else 
               Erase 5
               Trap Reserve As Work 5,PL
               If Errtrap
                  Close 1
                  Gosub _NOMEMORY
                  Return 
               End If 
               AC=Start(5)
            End If 
            WR=0
            While WR<PL
               PART=Min(1024,PL-WR)
               T$=Input$(1,PART)
               Copy Varptr(T$),Varptr(T$)+PART To AC+WR
               WR=WR+PART
               FX=FX+PART
            Wend 
            F$=FILES$(I)
            Gosub SETFILENAME
            'odd size file 
            If Instr(Str$(PL/2.0),".")>0
               If Instr(Str$(PL/2.0),"E+")<=0
                  T$=Input$(1,1)
               End If 
            End If 
            Inc N
         End If 
      End If 
   Next I
   Close 1
   B=1 : PB=1
   F$=FB$(B)
   TXT1$="Octamed File loaded" : TXT2$="with"+Str$(N)+" samples" : Gosub _NOTICE
   Gosub HEADER
   Return 
Else If _ABK
   BANKNAME$=F$
   F$=Space$(Len(F$))
   Gosub SETFILENAME
   B=1
   T$=Input$(1,2)
   T$=Input$(1,6)
   T$=Input$(1,8)
   If T$<>"Samples " or Eof(1)
      TXT1$="not a sample bank" : TXT2$="" : Gosub _NOTICE
      _ABK=False
      Close 1
      Return 
   End If 
   T$=Input$(1,2) : NN=Deek(Varptr(T$))
   If Eof(1)
      TXT1$="empty sample bank" : TXT2$="" : Gosub _NOTICE
      _ABK=False
      Close 1
      Return 
   End If 
   PF$=Input$(1,4) : PL=Leek(Varptr(PF$)) : If PL>6 : PF$=PF$+Input$(1,PL-S-6) : End If 
   FX=0 : FX_START=0 : FX_LENGTH=Lof(1)
   For N=1 To NN
      If Leek(Varptr(PF$)+(N-1)*4)
         If Eof(1)
            TXT1$="Error loading" : TXT2$="bank, continuing..." : Gosub _NOTICE
            Exit 
         End If 
         T$=Input$(1,14)
         CHRP=8
         For CHR=1 To 7
            CHRP=Peek(Varptr(T$)+CHR)
            If CHRP=0
               Exit 
            End If 
         Next CHR
         F$=Left$(T$,CHR)
         B=N : Gosub SETFILENAME
         SZ=Leek(Varptr(T$)+10)
         If SZ mod 2=1
            SZ=SZ+1
         End If 
         If SZ>0
            Erase 7+N
            Trap Reserve As Work 7+N,SZ
            If Errtrap
               Close 1
               Gosub _NOMEMORY
               Return 
            End If 
            AC=Start(7+N)
            P=0
            While P<SZ
               PL=Min(2048,SZ-P)
               If Not Eof(1)
                  T$=Input$(1,PL)
                  Copy Varptr(T$),Varptr(T$)+PL To AC+P
                  P=P+PL
                  FX=FX+PL
               Else 
                  P=SZ
               End If 
            Wend 
         End If 
      End If 
   Next 
   FX=FXE
   Close 1
   If M0DE<>4
      Bank Swap 5,8
   End If 
   B=1 : PB=1 : F$=FB$(1)
   TXT1$="Sample Bank loaded" : TXT2$="with"+Str$(NN)+" samples" : Gosub _NOTICE
Else 
   Erase PBANK
   Trap Reserve As Work PBANK,1024
   If Errtrap
      Close 1
      Gosub _NOMEMORY
      Return 
   End If 
   Pof(1)=0
   T$=Input$(1,1024)
   Copy Varptr(T$),Varptr(T$)+1024 To Start(PBANK)
   Close 1
   S_START=Start(PBANK)
   If _IFF
      S_START=Hunt(Start(PBANK) To Start(PBANK)+(Length(PBANK)),"8SVX")
      If S_START=0
         S_START=Hunt(Start(PBANK) To Start(PBANK)+(Length(PBANK)),"AIFF")
         _RATE=Deek(S_START+22)
         S_START=Hunt(S_START To Start(PBANK)+(Length(PBANK)),"SSND")+8+8
         _TOAST$="Aif"
         _BITS=16
      Else 
         _RATE=Deek(S_START+24)
         S_START=Hunt(S_START To Start(PBANK)+(Length(PBANK)),"BODY")+8
         _TOAST$="Iff"
         _BITS=8
      End If 
      If S_START=0
         S_START=Start(PBANK)+8
      End If 
   Else If _WAV
      S_START=Hunt(Start(PBANK) To Start(PBANK)+(Length(PBANK)),"fmt ")
      _TAG=Peek(S_START+8)
      If _TAG=3
         _FLOAT=True
         _TOAST$="Float"
      Else If _TAG=1
         _TOAST$="Wav"
         'Else If _TAG=6
         '   _TOAST$="a-Law"
         'Else If _TAG=7
         '   _TOAST$="mu-Law" 
      End If 
      _CHANNELS=Peek(S_START+10)
      _RATE=0
      Poke Varptr(_RATE)+3,Peek(S_START+12)
      Poke Varptr(_RATE)+2,Peek(S_START+12+1)
      Poke Varptr(_RATE)+1,Peek(S_START+12+2)
      Poke Varptr(_RATE),Peek(S_START+12+3)
      _BITS=Peek(S_START+22)
      S_START=Hunt(Start(PBANK) To Start(PBANK)+(Length(PBANK)),"data")+8
   End If 
   S_START=S_START-Start(PBANK)
   S_LENGTH=LF-S_START
   Erase PBANK
   Trap Reserve As Work PBANK,LF
   If Errtrap
      Gosub _NOMEMORY
      Return 
   End If 
   Bload F$,PBANK
   Trap Reserve As Work 7,S_LENGTH
   If Errtrap
      Gosub _NOMEMORY
   Else 
      Copy Start(PBANK)+S_START,Start(PBANK)+S_START+S_LENGTH To Start(7)
      Bank Swap PBANK,7
      Erase 7
   End If 
End If 
Return 
'
_OPENRAW:
WTXT$="Open as raw"
Gosub FREQUEST
If Not FRQ Then Return 
If F$<>"" and Exist(F$)
   Open In 1,F$
Else 
   LF=0
   Goto FLSHSCR
End If 
STA=0 : FI=0 : FIN=0 : ST=0
RST=0 : RL=0 : RFIN=0
Gosub _STOP
FH$=Input$(1,4)
_IFF=False
_WAV=False
If FH$="FORM"
   _IFF=True
Else If FH$="RIFF"
   _WAV=True
End If 
LF=Lof(1)
Close 1
If LF=0 Then Goto FLSHSCR
Erase PBANK
Trap Reserve As Work PBANK,LF
If Errtrap
   Gosub _NOMEMORY
Else 
   Bload F$,PBANK
   If _IFF
      TXT2$="Iff file"
      S_START=Hunt(Start(PBANK) To Start(PBANK)+(Length(PBANK)/2),"BODY")+8
      If S_START=0
         S_START=Hunt(Start(PBANK) To Start(PBANK)+(Length(PBANK)/2),"SSND")+8
         TXT2$="Aif file"
      End If 
   Else If _WAV
      TXT2$="Wav file"
      S_START=Hunt(Start(PBANK) To Start(PBANK)+(Length(PBANK)/2),"data")+8
   End If 
   If S_START>0
      Reserve As Work 7,LF-(S_START-Start(PBANK))
      Copy S_START,Start(PBANK)+Length(PBANK) To Start(7)
      Bank Swap PBANK,7
      TXT1$="Header removed from"
      Gosub _NOTICE
   End If 
   If M0DE<>1
      M0DE=1
      _M3SEL=M0DE+1
      Gosub M0DEMENU
   End If 
   RENDERING=True
   Gosub _RANGENONE
   Gosub _DRAW
   PASS=0
   Gosub _SHOWALL
End If 
Return 
'  
_REVERT:
If Length(PBANK)=0 or F$="" Then Goto FLSHSCR
If BANKNAME$<>"" Then F$=BANKNAME$
BTXT1$="Ok" : TXT1$="Are you sure?" : TXT2$="You will loose any edits" : Gosub _REQUEST
If Not REQ Then Goto FLSHSCR
If FB$(B)=_UNNAMED$ or FPATH$(B)="" Then Goto FLSHSCR
PPROGDIR$=Dir$
Dir$=FPATH$(B)
Gosub FILEOPEN
Dir$=PPROGDIR$
RENDERING=True
Gosub _DRAW
RENDERING=False
P_START=Start(PBANK)
P_LENGTH=Length(PBANK)
Return 
'
_SAVEAS:
If Length(PBANK)=0 Then Goto FLSHSCR
PF$=F$
WTXT$="Save As: raw"
Gosub FREQUEST
If Not FRQ Then Return 
If Exist(F$)
   Gosub OVERWRITE
   If Not REQ
      F$=PF$
      Return 
   End If 
End If 
Bsave F$,Start(PBANK) To Start(PBANK)+Length(PBANK)
Gosub SETFILENAME
Gosub HEADER
Return 
'
'
'
'***************************************************************************** 
'*amos************************************************************************ 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'     :::.      .        :      ...      .::::::.  
'     ;;`;;     ;;,.    ;;;  .;;;;;;;.  ;;;`    `; 
'    ,[[ '[[,   [[[[, ,[[[[,,[[     \[[,'[==/[[[[, 
'   c$$$cc$$$c  $$$$$$$$"$$$$$$,     $$$  '''    $ 
'    888   888,888 Y88" 888o"888,_ _,88P,88b    dP 
'    YMM   ""` MM  M'  "MMMM  "YMMMMMP"   "YMmMY"  
'
'   Sample Bank Maker by François Lionet, AMOS version by P.J.Hickman    
'   © Copyright 1990 Mandarin Software 
'
_SAVEBANK:
PF$=F$
F$="samples.abk"
WTXT$="Save: abk"
Gosub FREQUEST
If Not FRQ
   F$=PF$
   Return 
End If 
If Exist(F$)
   Gosub OVERWRITE
   If Not REQ
      F$=PF$
      Return 
   End If 
End If 
If F$<>""
   B=1 : Gosub _SWAPBANK
   If M0DE<>4
      If Length(B+7)=0
         Bank Swap 5,B+7
      End If 
   End If 
   FIN=0
   BAD=False
   For N=1 To 248
      If Length(N+7)=0
         FIN=N
         Exit 
      End If 
   Next N
   TL=0 : TN=0
   For N=1 To FIN
      If Length(7+N)>0
         TL=TL+Length(7+N)+4+14
         Inc TN
      End If 
   Next 
   Trap Reserve As Work 7,TL+22
   If Errtrap
      Gosub _NOMEMORY
      Return 
   End If 
   AD=Start(7)
   T$="AmBk"
   For I=1 To Len(T$)
      Poke AD+I-1,Asc(Mid$(T$,I,1))
   Next I
   AD=AD+4
   Doke AD,5
   AD=AD+2
   Doke AD,0
   AD=AD+2
   Loke AD,(TL+8) or $80000000
   AD=AD+4
   T$="Samples "
   For I=1 To Len(T$)
      Poke AD+I-1,Asc(Mid$(T$,I,1))
   Next I
   AD=AD+8
   ACALC=AD
   Doke AD,TN
   AD=AD+2
   AOFF=AD
   APOKE=AOFF+TN*4
   For N=1 To 248
      WEIGHTING=0
      If Length(7+N)>0
         Loke AOFF,APOKE-ACALC
         AOFF=AOFF+4
         If FB$(N)=""
            T$=Left$(_UNNAMED$,8)
         Else 
            T$=Left$(FB$(N),8)
         End If 
         AD=APOKE
         For I=1 To Len(T$)
            Poke AD+I-1,Asc(Mid$(T$,I,1))
         Next I
         Doke APOKE+8,FREQ
         Loke APOKE+10,Length(7+N)
         APOKE=APOKE+14
         A_START=Start(7+N)
         PP=Varptr(P)
         For I=0 To Length(7+N)
            P=Peek(A_START+I)+WEIGHTING
            Poke APOKE+I,Peek(PP+3)
         Next I
         APOKE=APOKE+Length(7+N)
         If Btst(0,APOKE)
            Inc APOKE
         End If 
      End If 
   Next N
   If Right$(Upper$(F$),4)<>".ABK"
      F$=F$+".abk"
   End If 
   Bsave F$,Start(7) To Start(7)+TL+22
   If M0DE<>4 and Length(5)=0
      Bank Swap 5,B+7
   End If 
   Erase 7
End If 
Return 
'
_QUIT:
If OSCILLO Then Goto _TGLOSCILLO
BTXT1$="Quit" : TXT1$="Are you sure" : TXT2$="you want to quit?" : Gosub _REQUEST
If Not REQ Then Return 
Every Off 
Sam Loop Off 
Erase Temp 
If REXX
   Arexx Close 
End If 
If MATH
   Lib Close 1
End If 
If BSD
   Gosub SOCK_CLOSE
   Lib Close 2
End If 
Dir$=PROGDIR$
End 
'
'
'
'***************************************************************************** 
'*edit************************************************************************ 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'   .,::::::::::::-.   :::  :::::::::: 
'   ;;;;'''';;,   `';, ;;;  ;;;;;;;''' 
'    [[cccc `[[     [[ [[[      [[     
'    $$""""  $$,    $$ $$$,     $$     
'    888oo,_ 888_,o8P'o88888    88,    
'    """"YUM"MMMMP"`  MMM"MM    MMM  
'
'
'  
_CUT:
If PASS>0 Then Return 
If RL=0 Then Goto FLSHSCR
Gosub _UNDOSET
Gosub _COPYSET
If RNGEPLY
   RNGEPLY=False
   STA=0
End If 
If RL=1 or RL=P_LENGTH
   Erase 6
   Bank Swap 6,PBANK
   Gosub _RANGENONE
Else 
   Trap Reserve As Work 7,Length(PBANK)-CLENGTHN
   If Errtrap
      Gosub _NOMEMORY
      Return 
   End If 
   Erase 6
   Trap Reserve As Work 6,CLENGTHN
   If Errtrap
      Gosub _NOMEMORY
      Return 
   End If 
   CLENGTH=0
   For CCOUNT=0 To CCOUNTN
      Copy P_START+CLENGTH+RST,P_START+CLENGTH+RST+RL To Start(6)+(RL*CCOUNT)
      CLENGTH=CLENGTH+M_LENGTH5
   Next CCOUNT
   CLENGTH=0
   For CCOUNT=0 To CCOUNTN
      If RST+CLENGTH>CLENGTH
         Copy P_START+CLENGTH,P_START+CLENGTH+RST To Start(7)+CLENGTH-(RL*CCOUNT)
      End If 
      If M_LENGTH5>RST+RL
         Copy P_START+CLENGTH+RST+RL,P_START+CLENGTH+M_LENGTH5 To Start(7)+CLENGTH+RST-(RL*CCOUNT)
      End If 
      CLENGTH=CLENGTH+M_LENGTH5
   Next CCOUNT
   Bank Swap PBANK,7
   Erase 7
End If 
XR=-1 : XR2=-1
If RL>0
   RL=1
End If 
Gosub _RANGENONE
PASS=0
Gosub _SHOWALL
Inc PASS
Return 
'
_CROP:
If PASS>0 Then Return 
If RL<2 or RL=P_LENGTH
   Gosub FLSHSCR
Else 
   Gosub _UNDOSET
   Gosub _COPYSET
   Trap Reserve As Work 7,CLENGTHN
   If Errtrap
      Gosub _NOMEMORY
      Return 
   End If 
   CLENGTH=0
   For CCOUNT=0 To CCOUNTN
      Copy P_START+CLENGTH+RST,P_START+CLENGTH+RST+RL To Start(7)+(RL*CCOUNT)
      CLENGTH=CLENGTH+M_LENGTH5
   Next CCOUNT
   Bank Swap PBANK,7
   Erase 7
   Gosub _RANGENONE
   PASS=0
   Gosub _SHOWALL
End If 
Inc PASS
Return 
'
_COPY:
If PASS>0 Then Return 
If RL<2
   Gosub _RANGEALL
End If 
Gosub _COPYSET
Erase 6
Trap Reserve As Work 6,CLENGTHN
If Errtrap
   Gosub _NOMEMORY
Else 
   CLENGTH=0
   For CCOUNT=0 To CCOUNTN
      Copy P_START+CLENGTH+RST,P_START+CLENGTH+RST+RL To Start(6)+(RL*CCOUNT)
      CLENGTH=CLENGTH+M_LENGTH5
   Next CCOUNT
End If 
PASS=0
Gosub _RANGENONE
Inc PASS
Return 
'
_PASTE:
If PASS>0 Then Return 
If Length(6)=0
   Gosub _NOCOPY
   Return 
Else If Length(PBANK)=0
   Erase PBANK
   Trap Reserve As Work PBANK,Length(6)
   If Errtrap
      Gosub _NOMEMORY
      Return 
   End If 
   Copy Start(6),Start(6)+Length(6) To Start(PBANK)
   XD=0 : XD2=0 : XR=0 : XR2=0 : ST=0 : FIN=0 : RST=0 : RFIN=0
   RL=Length(PBANK)
   STA=0 : FI=RL
   F$=_UNNAMED$ : Gosub SETFILENAME
Else 
   Gosub _COPYSET
   If M0DE=1 or M0DE=4
      RL=Length(6)
   Else If M0DE=2
      RL=Length(6)/2
   Else If M0DE=3
      RL=Length(6)/4
   End If 
   Trap Reserve As Work 7,Length(PBANK)+Length(6)
   If Errtrap
      Gosub _NOMEMORY
      Return 
   End If 
   For CCOUNT=0 To CCOUNTN
      If RST>0
         Copy Start(PBANK)+(M_LENGTH5*CCOUNT),Start(PBANK)+(M_LENGTH5*CCOUNT)+RST To Start(7)+(M_LENGTH5*CCOUNT)+(RL*CCOUNT)
      End If 
      Copy Start(6)+(RL*CCOUNT),Start(6)+(RL*CCOUNT)+RL To Start(7)+(M_LENGTH5*CCOUNT)+RST+(RL*CCOUNT)
      If RST<M_LENGTH5
         Copy Start(PBANK)+(M_LENGTH5*CCOUNT)+RST,Start(PBANK)+(M_LENGTH5*CCOUNT)+M_LENGTH5 To Start(7)+RST+(M_LENGTH5*CCOUNT)+(RL*CCOUNT)+RL
      End If 
   Next CCOUNT
   Bank Swap PBANK,7
   Erase 7
End If 
L=Length(PBANK)
Gosub SETSELV
XR=RST/CON#
XR2=XR+(RL/CON#)
Gosub SETSELCORDS
Gosub _SHOWALL
Inc PASS
Return 
'
'
'
'***************************************************************************** 
'*mix************************************************************************* 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'    .        :   :::  :.,::      .:.
'    ;;,.    ;;;  ;;;   `;;;,  .,;;
'    [[[[, ,[[[[, [[[      '[[,,[['
'    $$$$$$$$"$$$ $$$,      Y$$$P
'   888 Y88" 888oo88888   oP"``"Yo,
'   MM  M'  "MMMMMMM"MM,m"       "Mm,
'
'
'
_MIX:
Gosub _MIXP
Gosub _SHOWALL
Return 
'
_MIXP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
FX_LENGTH2=Length(6)
If FX_LENGTH2=0
   Gosub _NOCOPY
   Return 
End If 
FX_START2=Start(6)
Dec FX_LENGTH2
FX2=0
Repeat 
   CN=Peek(FX)
   CN2=Peek(FX_START2+FX2)
   Gosub SIGN2
   If CN<0 and CN2<0
      CN=(CN+CN2)-((CN*CN2)/-127)
   Else If CN>0 and CN2>0
      CN=(CN+CN2)-((CN*CN2)/127)
   Else 
      CN=CN+CN2
   End If 
   Inc FX2
   If FX2>FX_LENGTH2
      FX2=0
      If Not _LPMIX
         FX=FXE-1
      End If 
   End If 
   Gosub _CHECKCLIP
   Gosub UNSIGN
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
_ADD:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
FX_LENGTH2=Length(6)
If FX_LENGTH2=0
   Gosub _NOCOPY
   Return 
End If 
FX_START2=Start(6)
FX2=0
Repeat 
   CN=Peek(FX)
   CN2=Peek(FX_START2+FX2)
   Gosub SIGN2
   CN=CN+CN2
   FX2=FX2+1
   If FX2>FX_LENGTH2
      If _LPMIX
         FX2=0
      Else 
         FX=FXE
         Exit 
      End If 
   End If 
   Gosub _CHECKCLIP
   Gosub UNSIGN
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
_SUBTRACT:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
FX_LENGTH2=Length(6)
If FX_LENGTH2=0
   Gosub _NOCOPY
   Return 
End If 
FX_START2=Start(6)
FX2=0
Repeat 
   CN=Peek(FX)
   CN2=Peek(FX_START2+FX2)
   Gosub SIGN2
   CN=CN-CN2
   FX2=FX2+1
   If FX2>FX_LENGTH2
      If _LPMIX
         FX2=0
      Else 
         FX=FXE
         Exit 
      End If 
   End If 
   Gosub _CHECKCLIP
   Gosub UNSIGN
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
_MODULATE:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
FX_LENGTH2=Length(6)
If FX_LENGTH2=0
   Gosub _NOCOPY
   Return 
End If 
FX_START2=Start(6)
FX2=0
Repeat 
   CN=Peek(FX)
   CN2=Peek(FX_START2+FX2)
   Gosub SIGN2
   CN#=CN2
   CN#=CN#/127
   CN=CN*CN#
   FX2=FX2+1
   If FX2>FX_LENGTH2
      If _LPMIX
         FX2=0
      Else 
         FX=FXE
         Exit 
      End If 
   End If 
   Gosub _CHECKCLIP
   Gosub UNSIGN
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
_INTERLEAVE:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
FX_LENGTH2=Length(6)
_SELF=False
If FX_LENGTH2=0
   RST=Length(PBANK)/2
   RL=Length(PBANK)/2
   XR=SCR_W/2 : XR2=SCR_W
   Gosub SETCORDS
   Gosub _CUT
   _SELF=True
   Gosub SET_PBANK
   FX_LENGTH2=Length(6)
End If 
FX_START2=Start(6)
FX2=0 : FX3=0
Trap Reserve As Work 7,Length(PBANK)*2
If Errtrap
   Gosub _NOMEMORY
   Return 
End If 
FX_START3=Start(7)
Repeat 
   CN=Peek(FX)
   CN2=Peek(FX_START2+FX2)
   Gosub SIGN2
   Inc FX2
   If FX2>FX_LENGTH2
      If _LPMIX
         FX2=0
      Else 
         FX=FXE
         Exit 
      End If 
   End If 
   Gosub UNSIGN2
   Poke FX_START3+FX3,CN
   Inc FX3
   Poke FX_START3+FX3,CN2
   Inc FX3
   Inc FX
Until FX>FXE
Bank Swap 5,7
If _SELF Then Erase 6
Erase 7
Return 
'
_XOR:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
FX_LENGTH2=Length(6)
If FX_LENGTH2=0
   Gosub _NOCOPY
   Return 
End If 
FX_START2=Start(6)
FX2=0
Repeat 
   CN=Peek(FX)
   CN2=Peek(FX_START2+FX2)
   Gosub SIGN2
   CN=CN xor CN2
   FX2=FX2+1
   If FX2>FX_LENGTH2
      If _LPMIX
         FX2=0
      Else 
         FX=FXE
         Exit 
      End If 
   End If 
   Gosub UNSIGN
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
_SIZE:
T$=""
_EXIT=False
Gosub _OPENFXWIN
REALTIME=False
Repeat 
   If A>33 and A<127
      T$=T$+K$
      N=N+1
   End If 
   If CK=65 and N>0
      N=N-1
      T$=Mid$(T$,0,N)
   End If 
   Ink _BLACK,_WHITE
   Text X+260,Y+72,"Size:"+T$+"_"+" "
   Repeat 
      Gosub GVAL
      If Z=60 and M=1
         BX=RX+2 : Gosub PRESS
         REQ=True
         _EXIT=True
         Exit 
      Else If Z=61 and M=1 or A=27
         BX=RX+108 : Gosub PRESS
         REQ=False
         _EXIT=True
         Exit 
      Else If A=13
         REQ=True
         _EXIT=True
         Exit 
      Else If A=27
         REQ=False
         _EXIT=True
         Exit 
      End If 
   Until C<>0
Until _EXIT
If T$="" Then REQ=False
Gosub _CLOSEFXWIN
Gosub WIND0WC
If Not REQ Then Return 
Trap Reserve As Work 7,Val(T$)
If Errtrap Then Goto _NOMEMORY
If Length(PBANK)>0
   If Length(7)>Length(PBANK)
      Copy Start(PBANK),Start(PBANK)+Length(PBANK) To Start(7)
   Else 
      Copy Start(PBANK),Start(PBANK)+Length(7) To Start(7)
   End If 
End If 
Bank Swap PBANK,7
Erase 7
FI=Length(PBANK)
Gosub _DRAW
Gosub _SHOWALL
Return 
'  
_CLEARCOPY:
If Length(6)>0
   Erase 6
End If 
Return 
'
_COPYSWAP:
If Length(6)=0 Then Goto _NOCOPY
Bank Swap PBANK,6
XR=0 : XR2=0 : XD=0 : XD2=SCR_W : L=0 : ST=0 : FIN=0 : RST=0 : RFIN=0 : RL=0
FI=Length(PBANK)
Gosub POS_SET
RENDERING=True
Gosub _DRAW
RENDERING=False
Gosub _SHOWALL
Return 
'
_COPYSET:
Gosub SET_PBANK
Gosub SETCORDS
If M0DE=2
   CLENGTHN=RL*2
   CCOUNTN=1
Else If M0DE=3
   CLENGTHN=RL*4
   CCOUNTN=3
Else 
   CLENGTHN=RL
   CCOUNTN=0
End If 
Return 
'
_UNDO:
If Length(2)=0 Then Goto _NOUNDO
Bank Swap PBANK,2
XR=0 : XR2=0 : XD=0 : XD2=SCR_W : L=0 : ST=0 : FIN=0 : RST=0 : RFIN=0 : RL=0
STA=0 : FI=Length(PBANK)
Gosub POS_SET
RENDERING=True
Gosub _DRAW
RENDERING=False
Gosub _SHOWALL
Return 
'
_UNDOSET:
Erase 2
Reserve As Work 2,Length(PBANK)
Copy Start(PBANK),Start(PBANK)+Length(PBANK) To Start(2)
Return 
'
'
'
'***************************************************************************** 
'*volume********************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'   :::      .::.    ...       :::     ...    ::: .        :  .,:::::: 
'   ';;,   ,;;;'  .;;;;;;;.    ;;;    ';;     ;;; ;;,.    ;;; ;;;;'''' 
'    \[[  .[[/   ,[[     \[[,  [[[    [['     [[[ [[[[, ,[[[[, [[cccc  
'     Y$c.$$"    $$$,     $$$  $$'    $$      $$$ $$$$$$$$"$$$ $$""""  
'      Y88P      "888,_ _,88Po88oo,.__88    .d888888 Y88" 888o 888oo,_ 
'       MP         "YMMMMMP" """YUMMMM "YmmMMMM""MM  M'  "MMMM """"YUM 
'  
'
'
_VOLUME:
Gosub SETREALTIME
If _SHOW
   Inc PASS
   If PASS<2
      Gosub SET_PBANK
      If FX_LENGTH<2
         Goto FLSHSCR
      End If 
      CHAIN$(1)="_VOLUMEP"
      Gosub _OPENFXWIN
      FXN=VN : FXSN=VN : FXS$="%" : Gosub FXDRW
      FXRUN$="VDRW"
      Gosub _RUNFXWIN
   End If 
   If Not REQ
      Return 
   End If 
End If 
_VOLUMEP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   Gosub FLOAT
   CN=Int((CN#*VN#)*127.0)
   Gosub _CHECKCLIP
   Gosub UNSIGN
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
VDRW:
Repeat 
   Gosub TESTMOVE
   Gosub FXSET
   VN=FXN
   VN#=VN*0.01
   FXSN=VN : Gosub FXDRW
Until M=0
Return 
'
_FADEIN:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
DIV#=FX_LENGTH/100.0
If DIV#=0 Then Goto FLSHSCR
FX2=0
Repeat 
   CN=Peek(FX)
   Gosub SIGN
   CN#=(FX2/DIV#)/100.0
   CN#=CN*CN#
   CN=Int(CN#)
   Gosub UNSIGN
   Poke FX,CN
   Inc FX
   Inc FX2
Until FX>FXE
Return 
'
_FADEOUT:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
DIV#=FX_LENGTH/100.0
If DIV#=0 Then Goto FLSHSCR
FX2=FX_LENGTH
Repeat 
   CN=Peek(FX)
   Gosub SIGN
   CN#=(FX2/DIV#)/100
   CN#=CN*CN#
   CN=Int(CN#)
   Gosub UNSIGN
   Poke FX,CN
   Inc FX
   Dec FX2
Until FX>FXE
Return 
'
_HALF:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   If CN>127
      Poke FX,((CN*128)/256)+128
   Else 
      Poke FX,(CN*128)/256
   End If 
   Inc FX
Until FX>FXE
Return 
'
_DOUBLE:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   Gosub SIGN
   CN=CN*2
   Gosub _CHECKCLIP
   Gosub UNSIGN
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
_SILENCE:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Fill FX To FXE,0
Return 
'
_MAXIMIZE:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
CN2=0
Repeat 
   CN=Peek(FX)
   Gosub SIGN
   If CN>CN2
      CN2=CN
   Else If CN<0 and CN<-CN2
      CN2=-CN
   End If 
   Inc FX
Until FX>FXE
If CN2=0 or CN2=127 Then Return 
FX=FX_START
Repeat 
   CN=Peek(FX)
   Gosub SIGN
   CN=Int(CN/(CN2/127.0))
   Gosub UNSIGN
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
_EXPAND:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   If CN>127 Then Dec CN Else Inc CN
   Gosub _UNCHECKCLIP
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
_CONTRACT:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   If CN>127 Then Inc CN Else Dec CN
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
_DCOFFSET:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
T$=""
_EXIT=False
Gosub _OPENFXWIN
REALTIME=False
Repeat 
   If A>33 and A<127
      T$=T$+K$
      N=N+1
   End If 
   If CK=65 and N>0
      N=N-1
      T$=Mid$(T$,0,N)
   End If 
   Ink _BLACK,_WHITE
   Text X+260,Y+72,"-127 to 127:"+T$+"_"+" "
   Repeat 
      Gosub GVAL
      If Z=60 and M=1
         BX=RX+2 : Gosub PRESS
         REQ=True
         _EXIT=True
         Exit 
      Else If Z=61 and M=1 or A=27
         BX=RX+108 : Gosub PRESS
         REQ=False
         _EXIT=True
         Exit 
      Else If A=13
         REQ=True
         _EXIT=True
         Exit 
      Else If A=27
         REQ=False
         _EXIT=True
         Exit 
      End If 
   Until C<>0
Until _EXIT
If T$="" Then REQ=False
Gosub _CLOSEFXWIN
If Not REQ Then Return 
CN=Val(T$)
Gosub _CHECKCLIP
_DCOFFSETN=CN
_DCOFFSETP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   Gosub SIGN
   CN=CN+_DCOFFSETN
   Gosub _CHECKCLIP
   Gosub UNSIGN
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
'
'
'***************************************************************************** 
'*resample******************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'   :::::::..  .,:::::: .::::::.   :::.      .        :  ::::::::.   :::    .,:::: 
'   ;;;;``;;;; ;;;;'''';;;`    `;  ;;`;;     ;;,.    ;;; `;;```.;;;  ;;;    ;;;;'' 
'   \[[[,/[[['  [[cccc '[==/[[[[, ,[[ '[[,   [[[[, ,[[[[,`]]nnn]]'   [[[     [[ccc 
'   "$$$$$$c    $$""""   '''    $c$$$cc$$$c  $$$$$$$$"$$$ $$$""      $$'     $$""" 
'   ,888b "88bo 888oo,_,88b    dP 888   888,888 Y88" 888o 888o     o88oo,.__ 888oo 
'   "MMMM   "W" """"YUM  "YMmMY"  YMM   ""` MM  M'  "MMMM YMMMb    """YUMMMM """"Y 
'  
'
'
_SCALESAMPLE:
N#=N2#/N#
FX_LENGTH2=Int(FX_LENGTH/N#)
If FX_LENGTH2<2 Then Goto FLSHSCR
MIX=True
If RL<2
   MIX=False
End If 
Trap Reserve As Work 7,FX_LENGTH2
If Errtrap
   Gosub _NOMEMORY
   Return 
End If 
FX_START2=Start(7)
FX2=0
FX3=FX_START2
FXE2=FX_START2+FX_LENGTH2-1
CN#=N#
Repeat 
   CN=Int(CN#)
   CN#=FX2*N#
   FX=FX_START+CN
   CN=Peek(FX)
   Poke FX3,CN
   Inc FX2 : Inc FX3
Until FX3>=FXE2
If MIX
   If RL>FX_LENGTH2
      RL=FX_LENGTH2
   End If 
   Gosub _SILENCE
   _LPMIX=False
   Bank Swap 6,7
   Gosub _MIXP
Else 
   Bank Swap PBANK,7
End If 
FX=FXE
Erase 7
Gosub SETCORDS
Gosub SETZ0NES
Gosub HEADERCORDS
Return 
'
_RESAMPLE:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
WTXT$="Rate/Resample" : WX=211 : WY=44 : WX2=429 : WY2=108 : Gosub WIND0W
Ink _BG,_WHITE
Text 226,70,"From:"+Str$(FREQ)
C0L=_WHITE : N=0
BTXT1$="Keyboard" : BX=270 : BY=90 : BZN=48 : Gosub BUTTON
T$=""
KDOWN=False
Ink _BG
Repeat 
   If Z=48 and M<>0
      If Not KDOWN
         Gosub HIGHLIGHT
         Text 232,79,Space$(24)
         N=0
         T$=""
         KDOWN=True
      End If 
      If A<>0
         For S=0 To KX
            If KEYS$(S)=K$
               T$=Str$(KEYP(S))-" "
               N=Len(T$)
            End If 
         Next S
      End If 
   Else 
      If A>47 and A<58
         T$=T$+K$
         N=N+1
      End If 
   End If 
   If KDOWN and M=0
      Gosub HIGHLIGHT
      KDOWN=False
   End If 
   If C=65 and N>0
      N=N-1
      T$=Mid$(T$,0,N)
   End If 
   Ink _BG,_WHITE
   Text 216,79,">>"+T$+"_"+" "
   Gosub GVAL
Until A=13 or A=27
Gosub WIND0WC
_RESAMPLEP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
N#=FREQ
N2#=Val(T$)
If N2#=0 or A=27 Then Goto FLSHSCR
Goto _SCALESAMPLE
'
_RESIZE:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
RX=216 : RY=59 : C0L=_WHITE
WTXT$="Resize/Resampling" : WX=RX-5 : WY=RY-15 : WX2=RX+207+5 : WY2=RY+45 : Gosub WIND0W
Ink _BG,_WHITE
Text 226,70,"From:"+Str$(FX_LENGTH)
N=0
T$=""
Repeat 
   If A>47 and A<58
      T$=T$+K$
      N=N+1
   End If 
   If C=65 and N>0
      N=N-1
      T$=Mid$(T$,0,N)
   End If 
   Ink _BG : Text 216,79,">>"+T$+"_"+" "
   Gosub GVAL
Until A=13 or A=27
Gosub WIND0WC
_RESIZEP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
N=Val(T$)
If N<2 or A=27 Then Goto FLSHSCR
N#=N
N2#=FX_LENGTH
Goto _SCALESAMPLE
'  
_REBPM:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
RX=216 : RY=59 : C0L=_WHITE
WTXT$="Bpm/Resampling" : WX=RX-5 : WY=RY-15 : WX2=RX+207+5 : WY2=RY+45 : Gosub WIND0W
Ink _BG,_WHITE
DIV#=FREQ
DIV#=((DIV#/Length(PBANK))*60)*4
Text 226,70,"From:"+Str$(DIV#)
N=0
T$=""
Repeat 
   If A=46 or(A>47 and A<58)
      T$=T$+K$
      N=N+1
   End If 
   If C=65 and N>0
      N=N-1
      T$=Mid$(T$,0,N)
   End If 
   Ink _BG : Text 216,79,">>"+T$+"_"+" "
   Gosub GVAL
Until A=13 or A=27
Gosub WIND0WC
_REBPMP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
N#=DIV#
N2#=Val(T$)
If N2#<2 or A=27 Then Goto FLSHSCR
Goto _SCALESAMPLE
'
'_16BITTO8BIT
_OCTAVEUP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
MIX=True
If RL<2
   MIX=False
End If 
FX2=0
Repeat 
   CN#=Deek(FX)
   CN#=CN#/256.0
   CN=Int(CN#)
   Poke FX_START+FX2,CN
   Inc FX2
   Inc FX : Inc FX
Until FX>FXE
If MIX
   RFIN=Length(PBANK)-RST-(RL/2)
Else 
   Trap Reserve As Work 7,FX2
   If Errtrap
      Gosub _NOMEMORY
      Return 
   End If 
   Copy FX_START,FX_START+FX2 To Start(7)
   Bank Swap PBANK,7
   Erase 7
End If 
Gosub SETCORDS
Gosub SETZ0NES
Gosub HEADERCORDS
Return 
'
_OCTAVEDOWN:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
MIX=True
If RL<2
   MIX=False
End If 
Trap Reserve As Work 7,FX_LENGTH*2
If Errtrap
   Gosub _NOMEMORY
   Return 
End If 
FX_START2=Start(7)
FX2=0
Repeat 
   CNL=Peek(FX-1)
   CN=Peek(FX)
   CN2=Peek(FX+1)
   CNR=Peek(FX+2)
   A0=CNR-CN2-CNL+CN
   A1=CNL-CN-A0
   A2=CN2-CNL
   A3=CN
   Gosub SIGN
   CN2=A0+A1+A2+A3
   Poke FX_START2+FX2,CN : Inc FX2
   Poke FX_START2+FX2,CN2 : Inc FX2
   Inc FX
Until FX>FXE
If MIX
   _LPMIX=False
   If RST+(RL*2)>Length(PBANK)
      RL=Length(PBANK)-RST
   End If 
   RFIN=Length(PBANK)-RST-(RL*2)
   Gosub _SILENCE
   Bank Swap 6,7
   Gosub _MIXP
Else 
   Bank Swap PBANK,7
End If 
Erase 7
Gosub SETCORDS
Gosub SETZ0NES
Gosub HEADERCORDS
Return 
'
_NOTEUP:
PFREQ=FREQ
FREQ=16730
T$="17734"
Gosub _RESAMPLEP
FREQ=PFREQ
Return 
'
_NOTEDOWN:
PFREQ=FREQ
FREQ=17734
T$="16730"
Gosub _RESAMPLEP
FREQ=PFREQ
Return 
'
_FINEUP:
T$=Str$(FREQ+50)-" "
Gosub _RESAMPLEP
Return 
'  
_FINEDOWN:
T$=Str$(FREQ-50)-" "
Gosub _RESAMPLEP
Return 
'
'
'
'***************************************************************************** 
'*filter********************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'    .-:::::' :::    :::    ::::::::::.,:::::::::::::..  
'    ;;;'''', ;;;    ;;;    ;;;;;;;''';;;;'''';;;;``;;;; 
'    [[[,,==[ [[[    [[[        [[     [[cccc \[[[,/[[[' 
'    `$$$"``" $$$,   $$'        $$     $$"""" "$$$$$$c 
'   _ 888    o88888o88oo,.__    88,    888oo,_,888b "88bo  
'   MM"MM,   MMM"MM"""YUMMMM    MMM    """"YUM"MMMM   "W"  
'  
'
'
_HIGHPASS:
Gosub SETREALTIME
If _SHOW
   Inc PASS
   If PASS<2
      Gosub SET_PBANK
      If FX_LENGTH<2
         Goto FLSHSCR
      End If 
      For FXBC=1 To 4
         HBUF(FXBC)=0
      Next FXBC
      CHAIN$(1)="_HIGHPASSP"
      Gosub _OPENFXWIN
      FXN=HIGHN : FXSN=HIGHCUTN : FXS$="hz" : Gosub FXDRW
      Gosub HIGHSET
      FXRUN$="HIGHMDRW"
      Gosub _RUNFXWIN
   End If 
   If Not REQ
      Return 
   End If 
End If 
_HIGHPASSP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   CN2=HBUF(_CHANNEL)
   Gosub SIGN2
   CN2=(CN2-(CN2*2))
   CN#=CN2+(ALPHA#*(CN-CN2))*(ALPHA#*2)
   CN=Int(CN#)
   Gosub _CHECKCLIP
   Gosub UNSIGN
   Poke FX,CN
   HBUF(_CHANNEL)=CN
   Inc FX
Until FX>FXE
Return 
'
HIGHSET:
HIGHCUTN=HIGHN*50
If HIGHCUTN<100 Then HIGHCUTN=100
RC#=1.0/(HIGHCUTN*2*Pi#)
DT#=1.0/FREQ
ALPHA#=DT#/(RC#+DT#)
Return 
'
HIGHMDRW:
Repeat 
   Gosub TESTMOVE
   Gosub FXSET
   HIGHN=FXN
   Gosub HIGHSET
   FXSN=HIGHCUTN : Gosub FXDRW
Until M=0
Return 
'  
_LOWPASS:
Gosub SETREALTIME
If _SHOW
   Inc PASS
   If PASS<2
      Gosub SET_PBANK
      If FX_LENGTH<2
         Goto FLSHSCR
      End If 
      For FXBC=1 To 4
         LBUF(FXBC)=0
      Next FXBC
      CHAIN$(1)="_LOWPASSP"
      Gosub _OPENFXWIN
      FXN=LOWN : FXSN=LOWCUTN : FXS$="hz" : Gosub FXDRW
      Gosub LOWSET
      FXRUN$="LOWMDRW"
      Gosub _RUNFXWIN
   End If 
   If Not REQ
      Return 
   End If 
End If 
_LOWPASSP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   CN2=LBUF(_CHANNEL)
   Gosub SIGN2
   CN#=CN2+(ALPHA#*(CN-CN2))
   CN=Int(CN#)
   Gosub UNSIGN
   Poke FX,CN
   LBUF(_CHANNEL)=Peek(FX)
   Inc FX
Until FX>FXE
Return 
'
LOWSET:
LOWCUTN=LOWN*60
If LOWCUTN<100 Then LOWCUTN=100
RC#=1.0/(LOWCUTN*2*Pi#)
DT#=1.0/FREQ
ALPHA#=DT#/(RC#+DT#)
Return 
'  
LOWMDRW:
Repeat 
   Gosub TESTMOVE
   Gosub FXSET
   LOWN=FXN
   Gosub LOWSET
   FXSN=LOWCUTN : Gosub FXDRW
Until M=0
Return 
'
_RESONANT:
Gosub SETREALTIME
If _SHOW
   Inc PASS
   If PASS<2
      Gosub SET_PBANK
      If FX_LENGTH<2
         Goto FLSHSCR
      End If 
      For FXBC=1 To 4
         RBUF0#(FXBC)=0.0
      Next FXBC
      CHAIN$(1)="_RESONANTP"
      Gosub _OPENFXWIN
      Gosub DIARES
      FXRUN$=""
      Gosub _RUNFXWIN
   End If 
   If Not REQ
      Return 
   End If 
End If 
_RESONANTP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   Gosub FLOAT
   RBUF0#(_CHANNEL)=RBUF0#(_CHANNEL)+_RF#*(CN#-RBUF0#(_CHANNEL)+_RFB#*(RBUF0#(_CHANNEL)-RBUF1#(_CHANNEL)))
   RBUF1#(_CHANNEL)=RBUF1#(_CHANNEL)+_RF#*(RBUF0#(_CHANNEL)-RBUF1#(_CHANNEL))
   CN#=RBUF1#(_CHANNEL)
   Gosub UNFLOAT
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'  
RESSET:
_RF#=RESN/200.0
If _RF#=1.0 Then _RF#=_RF#-0.001
_RFB#=_RQ#+_RQ#/(1.0-_RF#)
Return 
'
RESDRW:
Repeat 
   Gosub TESTMOVE
   Gosub FXSET
   RESN=FXN
   Gosub RESSET
   FXSN=RESN : Gosub FXDRW
Until M=0
Return 
'  
_SMOOTH:
Gosub SETREALTIME
If _SHOW and PLYING
   Inc PASS
   If PASS<2
      Gosub SET_PBANK
      If FX_LENGTH<2
         Goto FLSHSCR
      End If 
      For FXBC=1 To 4
         SMOBUF(FXBC)=0
      Next FXBC
      CHAIN$(1)="_SMOOTHP"
      Gosub _OPENFXSMALLWIN
      FXRUN$=""
      Gosub _RUNFXWIN
   End If 
   If Not REQ
      Return 
   End If 
End If 
_SMOOTHP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   CN2=SMOBUF(_CHANNEL)
   Gosub SIGN2
   CN=(CN+CN2)/2
   Gosub UNSIGN
   Poke FX,CN
   SMOBUF(_CHANNEL)=CN
   Inc FX
Until FX>FXE
Return 
'
_SHARP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   CN2=Peek(FX+1)
   Gosub SIGN2
   CN2=-CN2
   CN=CN+CN2
   Gosub UNSIGN
   Poke FX,CN
   Inc FX
Until FX>FXE-1
Return 
'
_WAVESHAPER:
Gosub SETREALTIME
If _SHOW and PLYING
   Inc PASS
   If PASS<2
      Gosub SET_PBANK
      If FX_LENGTH<2
         Goto FLSHSCR
      End If 
      CHAIN$(1)="_WAVESHAPERP"
      Gosub _OPENFXSMALLWIN
      FXRUN$=""
      Gosub _RUNFXWIN
   End If 
   If Not REQ
      Return 
   End If 
End If 
_WAVESHAPERP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   Gosub FLOAT
   CN#=Sin(CN#)
   CN#=CN#*CN#*CN#
   Gosub UNFLOAT
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
_BEZIER:
Gosub SETREALTIME
If _SHOW and PLYING
   Inc PASS
   If PASS<2
      Gosub SET_PBANK
      If FX_LENGTH<2
         Goto FLSHSCR
      End If 
      CHAIN$(1)="_BEZIERP"
      Gosub _OPENFXSMALLWIN
      FXRUN$=""
      Gosub _RUNFXWIN
   End If 
   If Not REQ
      Return 
   End If 
End If 
_BEZIERP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   CN#=CN/256.0
   CN#=(CN#*CN#)*(3.0-(2.0*CN#))
   CN#=CN#*256.0
   CN=Int(CN#)
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
_PARABOLIC:
Gosub SETREALTIME
If _SHOW and PLYING
   Inc PASS
   If PASS<2
      Gosub SET_PBANK
      If FX_LENGTH<2
         Goto FLSHSCR
      End If 
      CHAIN$(1)="_PARABOLICP"
      Gosub _OPENFXSMALLWIN
      FXRUN$=""
      Gosub _RUNFXWIN
   End If 
   If Not REQ
      Return 
   End If 
End If 
_PARABOLICP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   CN#=CN/256.0
   SQ#=CN#*CN#
   CN#=SQ#/(2.0*(SQ#-CN#)+1.0)
   CN#=CN#*256.0
   CN=Int(CN#)
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'  
'
'
'***************************************************************************** 
'*distort********************************************************************* 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'   ::::::-.   :::   .::::::. ::::::::::    ...     :::::::..  ::::::::::  
'   ;;,   `';, ;;;  ;;;`    `;;;;;;;;''' .;;;;;;;.  ;;;;``;;;; ;;;;;;;'''  
'   `[[     [[ [[[  '[==/[[[[,    [[    ,[[     \[[,\[[[,/[[['     [[  
'    $$,    $$ $$$,   '''    $    $$    $$$,     $$$"$$$$$$c       $$  
'    888_,o8P'o88888,88b    dP    88,   "888,_ _,88P,888b "88bo    88, 
'   "MMMMP"`  MMM"MM  "YMmMY"     MMM     "YMMMMMP" "MMMM   "W"    MMM 
'
'
'
'
_ALIAS:
Gosub SETREALTIME
If _SHOW
   Inc PASS
   If PASS<2
      Gosub SET_PBANK
      If FX_LENGTH<2
         Goto FLSHSCR
      End If 
      CHAIN$(1)="_ALIASP"
      Gosub _OPENFXWIN
      FXN=ALIN : FXSN=ALIN : FXS$="b" : Gosub FXDRW
      FXRUN$="AMDRW"
      Gosub _RUNFXWIN
   End If 
   If Not REQ
      Return 
   End If 
End If 
_ALIASP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
ALIN2=ALIN
Repeat 
   If ALIN2<0
      ALIN2=ALIN
      CN=Peek(FX)
   End If 
   Dec ALIN2
   CN2=CN
   Poke FX,CN2
   Inc FX
Until FX>FXE
Return 
'
AMDRW:
Repeat 
   Gosub TESTMOVE
   Gosub FXSET
   ALIN=Int(FXN/1.5873)+2
   FXSN=ALIN : Gosub FXDRW
Until M=0
Return 
'
_TUBE:
Gosub SETREALTIME
If _SHOW
   Inc PASS
   If PASS<2
      Gosub SET_PBANK
      If FX_LENGTH<2
         Goto FLSHSCR
      End If 
      CHAIN$(1)="_TUBEP"
      Gosub _OPENFXWIN
      FXN=TUBEN : FXSN=TUBEN : FXS$="%" : Gosub FXDRW
      FXRUN$="TUBEMDRW"
      Gosub _RUNFXWIN
   End If 
   If Not REQ
      Return 
   End If 
End If 
_TUBEP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   Gosub FLOAT
   If TUBEV#+CN#<>0
      CN#=CN#/(TUBEV#+CN#)
   Else 
      CN=0
   End If 
   Gosub UNFLOAT
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
TUBEMDRW:
Repeat 
   Gosub TESTMOVE
   Gosub FXSET
   TUBEN=FXN
   TUBEV#=(200-TUBEN)/100.0
   FXSN=TUBEN : Gosub FXDRW
Until M=0
Return 
'
_SATURATION:
Gosub SETREALTIME
If _SHOW
   Inc PASS
   If PASS<2
      Gosub SET_PBANK
      If FX_LENGTH<2
         Goto FLSHSCR
      End If 
      CHAIN$(1)="_SATURATIONP"
      Gosub _OPENFXWIN
      FXN=SATN : FXSN=SATN : FXS$="%" : Gosub FXDRW
      FXRUN$="SATMDRW"
      Gosub _RUNFXWIN
   End If 
   If Not REQ
      Return 
   End If 
End If 
_SATURATIONP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   Gosub FLOAT
   CN#=((1.1+SATV#)*CN#)-(0.2+SATV#*CN#)*CN#*CN#*CN#
   Gosub UNFLOAT
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
SATMDRW:
Repeat 
   Gosub TESTMOVE
   Gosub FXSET
   SATN=FXN
   SATV#=SATN/100.0
   FXSN=SATN : Gosub FXDRW
Until M=0
Return 
'
_FOLD:
Gosub SETREALTIME
If _SHOW
   Inc PASS
   If PASS<2
      Gosub SET_PBANK
      If FX_LENGTH<2
         Goto FLSHSCR
      End If 
      CHAIN$(1)="_FOLDP"
      Gosub _OPENFXWIN
      FXN=FOLDN : FXSN=FOLDN : FXS$="%" : Gosub FXDRW
      FXRUN$="FMDRW"
      Gosub _RUNFXWIN
   End If 
   If Not REQ
      Return 
   End If 
End If 
If FOLDN<1
   Return 
End If 
_FOLDP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   Gosub FLOAT
   If CN#>FOLDV#
      CN#=FOLDV#-(CN#-FOLDV#)
   End If 
   If CN#<-FOLDV#
      CN#=-FOLDV#+(-FOLDV#-CN#)
   End If 
   Gosub UNFLOAT
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
FMDRW:
Repeat 
   Gosub TESTMOVE
   Gosub FXSET
   FOLDN=FXN
   FOLDV#=FOLDN/256.0
   FXSN=FOLDN : Gosub FXDRW
Until M=0
Return 
'
_OVERDRIVE:
Gosub SETREALTIME
If _SHOW and PLYING
   Inc PASS
   If PASS<2
      Gosub SET_PBANK
      If FX_LENGTH<2
         Goto FLSHSCR
      End If 
      CHAIN$(1)="_OVERDRIVEP"
      Gosub _OPENFXSMALLWIN
      FXRUN$=""
      Gosub _RUNFXWIN
   End If 
   If Not REQ
      Return 
   End If 
End If 
_OVERDRIVEP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   Gosub FLOAT
   If CN#<0 Then CN#=1-Exp(-CN#) Else CN#=-1+Exp(CN#)
   Gosub UNFLOAT
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'  
'
'
'***************************************************************************** 
'*effects********************************************************************* 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'   .,:::::: .-:::::' .-:::::'.,::::::  .,-:::::::::::::::: .::::::.     
'   ;;;;'''' ;;;'''', ;;;'''',;;;;'''',;;;'````' ;;;;;;;''';;;`    `;    
'    [[cccc  [[[,,==[ [[[,,==[ [[cccc [[[            [[    '[==/[[[[,  
'    $$""""  `$$$"``" `$$$"``" $$"""" $$$            $$      '''    $  
'    888oo,__ 888    _ 888     888oo,_`88bo,__,o,    88,   ,88b    dP  
'    """"YUMMM"MM,   MM"MM,    """"YUM  "YUMMMMMP    MMM     "YMmMY"   
'
'                                                              
'
'
_PHASE:
Gosub SETREALTIME
If _SHOW
   Inc PASS
   If PASS<2
      Gosub SET_PBANK
      If FX_LENGTH<2
         Goto FLSHSCR
      End If 
      Gosub FXBUFFER
      For FXBC=1 To 4
         PHBUF#(FXBC)=0.0
         PHBUF0(FXBC)=Start(_CURRENT-FXBC)
         PHBUF1(FXBC)=PHBUF0(FXBC)
      Next FXBC
      CHAIN$(1)="_PHASEP"
      Gosub _OPENFXWIN
      FXN=PHAN : FXSN=PHAN : FXS$="%" : Gosub FXDRW
      FXRUN$="PHMDRW"
      Gosub _RUNFXWIN
   End If 
   If Not REQ
      Return 
   End If 
   Gosub FXBUFFERC
End If 
_PHASEP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   CN2=Peek(PHBUF0(_CHANNEL))
   Poke PHBUF0(_CHANNEL),CN
   Gosub SIGN2
   CN#=(CN2*0.6)+PHBUF#(_CHANNEL)
   CN2=Int(CN#)
   PHBUF#(_CHANNEL)=CN#-CN2
   If CN<0 and CN2<0 Then CN=(CN+CN2)-((CN*CN2)/-127)
   If CN>0 and CN2>0 Then CN=(CN+CN2)-((CN*CN2)/127)
   If CN=0 or CN2=0 Then CN=CN+CN2
   If CN<0 and CN2>0 Then CN=CN+CN2
   If CN>0 and CN2<0 Then CN=CN+CN2
   Gosub UNSIGN
   Poke PHBUF0(_CHANNEL),CN
   Poke FX,CN
   Inc FX
   Inc PHBUF0(_CHANNEL)
   If PHBUF0(_CHANNEL)>PHBUF1(_CHANNEL)+PHAN
      PHBUF0(_CHANNEL)=PHBUF1(_CHANNEL)
   End If 
Until FX>FXE
Return 
'
PHMDRW:
Repeat 
   Gosub TESTMOVE
   Gosub FXSET
   PHAN=FXN
   FXSN=PHAN : Gosub FXDRW
Until M=0
Return 
'
_ECHO:
If Not REALTIME
   Inc PASS
   If PASS<2
      WTXT$="Echo"
      Gosub ECHO_WIN
      _ECHON=_EFFN
      If _ECHON<1 or A=27
         Gosub FLSHSCR
         K$=""
         A=0
         Return 
      End If 
   End If 
Else 
   _ECHON=200
End If 
_ECHOP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
FX=FX+_ECHON
Repeat 
   CN=Peek(FX)
   CN2=Peek(FX-_ECHON)
   Gosub SIGN
   CN=(CN+CN2)/1.8
   Gosub UNSIGN
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
_REVERB:
Gosub SETREALTIME
If _SHOW
   Inc PASS
   If PASS<2
      Gosub SET_PBANK
      If FX_LENGTH<2
         Goto FLSHSCR
      End If 
      Gosub FXBUFFER
      For FXBC=1 To 4
         RVBUF0(FXBC)=Start(_CURRENT-FXBC)
         RVBUF1(FXBC)=RVBUF0(FXBC)
      Next FXBC
      CHAIN$(1)="_REVERBP"
      Gosub _OPENFXWIN
      FXN=RVN : FXSN=RVN : FXS$="%" : Gosub FXDRW
      FXRUN$="RVMDRW"
      Gosub _RUNFXWIN
   End If 
   If Not REQ
      Return 
   End If 
   Gosub FXBUFFERC
End If 
_REVERBP:
Gosub SET_PBANK
If FX_LENGTH<2 or _CURRENT=-1 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   CN2=Peek(RVBUF0(_CHANNEL))
   Poke RVBUF0(_CHANNEL),CN
   Gosub SIGN2
   CN#=CN2*RVV#
   CN2=Int(CN#)
   If CN<0 and CN2<0 Then CN=(CN+CN2)-((CN*CN2)/-127)
   If CN>0 and CN2>0 Then CN=(CN+CN2)-((CN*CN2)/127)
   If CN=0 or CN2=0 Then CN=CN+CN2
   If CN<0 and CN2>0 Then CN=CN+CN2
   If CN>0 and CN2<0 Then CN=CN+CN2
   Gosub UNSIGN
   Poke RVBUF0(_CHANNEL),CN
   Poke FX,CN
   Inc FX
   Inc RVBUF0(_CHANNEL)
   If RVBUF0(_CHANNEL)>RVBUF1(_CHANNEL)+(RVN*100)
      RVBUF0(_CHANNEL)=RVBUF1(_CHANNEL)
   End If 
Until FX>FXE
Return 
'
RVMDRW:
Repeat 
   Gosub TESTMOVE
   Gosub FXSET
   RVN=FXN
   FXSN=RVN : Gosub FXDRW
Until M=0
Return 
'
_TREMOLO:
Gosub SETREALTIME
If _SHOW
   Inc PASS
   If PASS<2
      Gosub SET_PBANK
      If FX_LENGTH<2
         Goto FLSHSCR
      End If 
      FREQ=22050
      For FXBC=1 To 4
         TBUF(FXBC)=0
      Next FXBC
      FX_LENGTH2=Length(PBANK)
      CHAIN$(1)="_TREMOLOP"
      Gosub _OPENFXWIN
      FXN=TREMN : FXSN=TREMN : FXS$="%" : Gosub FXDRW
      FXRUN$="TRMDRW"
      Gosub _RUNFXWIN
   End If 
   If Not REQ
      Return 
   End If 
End If 
_TREMOLOP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN2#=(Pi#*2*TREMN#)/FREQ
   CN3#=Sin(CN2#*(TBUF(_CHANNEL)))
   CN=Peek(FX)
   Gosub SIGN
   CN#=CN*CN3#
   CN=Int(CN#)
   Gosub UNSIGN
   Poke FX,CN
   Inc FX
   Inc TBUF(_CHANNEL)
   If TBUF(_CHANNEL)>FX_LENGTH2
      TBUF(_CHANNEL)=0
   End If 
Until FX>FXE
Return 
'
TRMDRW:
Repeat 
   Gosub TESTMOVE
   Gosub FXSET
   TREMN=FXN
   TREMN#=TREMN/16.0
   FXSN=TREMN : Gosub FXDRW
Until M=0
Return 
'
_COMPRESSOR:
Gosub SETREALTIME
If _SHOW
   Inc PASS
   If PASS<2
      Gosub SET_PBANK
      If FX_LENGTH<2
         Goto FLSHSCR
      End If 
      Gosub COMSET
      _ENV#=0.0
      CHAIN$(1)="_COMPRESSORP"
      Gosub _OPENFXBIGWIN
      Gosub DIALSCOMP
      FXRUN$=""
      Gosub _RUNFXWIN
   End If 
   If Not REQ
      Return 
   End If 
End If 
_COMPRESSORP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
If _RMS<22 Then _RMS=22
Repeat 
   SUMM#=0
   COMI=0
   Repeat 
      If FX+COMI+_OFFSET<FXE
         CN#=Peek(FX+COMI+_OFFSET)
      Else 
         CN#=0
      End If 
      Gosub FLOAT
      SUMM#=SUMM#+(CN#*CN#)
      Inc COMI
   Until COMI>_RMS
   _RMS#=Sqr(SUMM#/_RMS)
   If _RMS#>_ENV#
      _THETA#=_ATT#
   Else 
      _THETA#=_REL#
   End If 
   _ENV#=(1.0-_THETA#)*_RMS#+_THETA#*_ENV#
   _GAIN#=1.0
   If(_ENV#>_THRESHOLD#)
      _GAIN#=_GAIN#-(_ENV#-_THRESHOLD#)*_SLOPE#
   End If 
   CN=Peek(FX)
   Gosub FLOAT
   CN=Int((CN#*_GAIN#)*127.0)
   Gosub UNSIGN
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'  
COMSET:
_THRESHOLD#=_THRESHOLDN#*0.01
_SLOPE#=_SLOPEN#*0.01
_LOOKAHEAD#=_LOOKAHEADN#*0.001
_WINDOW#=_WINDOWN#*0.001
_ATTACK#=_ATTACKN#*0.001
If _ATTACK#<=0 Then _ATTACK#=0.001
_RELEASE#=_RELEASEN#*0.001
If _RELEASE#<=0 Then _RELEASE#=0.001
_ATT#=Exp(-1.0/(FREQ*_ATTACK#))
_REL#=Exp(-1.0/(FREQ*_RELEASE#))
_OFFSET=Int(FREQ*_LOOKAHEAD#)
_RMS=Int(FREQ*_WINDOW#)
Return 
'  
'
'
'***************************************************************************** 
'*bitwise********************************************************************* 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'   :::::::.   :::  ::::::::::.::    .   .:: :::   .::::::. .,:::::: 
'    ;;;'';;'  ;;;  ;;;;;;;'''';;,  ;;  ;;;' ;;;  ;;;`    `;;;;;'''' 
'    [[[__[[\. [[[      [[     '[[, [[, [['  [[[  '[==/[[[[, [[cccc
'    $$""""Y$$ $$$,     $$       Y$c$$$c$P   $$$,   '''    $ $$""""
'   _88o,,od8Po88888    88,       "88"888   o88888,88b    dP 888oo,_ 
'   ""YUMMMP" MMM"MM    MMM        "M "M"   MMM"MM  "YMmMY"  """"YUM 
'
'
'
_ROTATE:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   Rol.b 1,CN
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
_ROTATER:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   Ror.b 1,CN
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
_SHIFT:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   Rol.b 1,CN
   Bset 0,CN
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
_SHIFTR:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
_MSB=False
Repeat 
   CN=Peek(FX)
   _MSB=Btst(7,CN)
   Ror.b 1,CN
   If _MSB
      Bset 7,CN
   Else 
      Bclr 7,CN
   End If 
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
_SHIFT16BIT:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Deek(FX)
   Rol.b 1,CN
   Bset 0,CN
   Doke FX,CN
   FX=FX+2
Until FX>FXE
Return 
'
_SHIFTR16BIT:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
_MSB=False
Repeat 
   CN=Deek(FX)
   _MSB=Btst(15,CN)
   Ror.w 1,CN
   If _MSB
      Bset 15,CN
   Else 
      Bclr 15,CN
   End If 
   Doke FX,CN
   FX=FX+2
Until FX>FXE
Return 
'  
'
'
'***************************************************************************** 
'*convert********************************************************************* 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'     .,-::::::    ...     ::.    :::.:::      .::..,:::::::::::::..  :::::::::: 
'   ,;;;'````'  .;;;;;;;.  ;;;;,  `;;;';;,   ,;;;' ;;;;'''';;;;``;;;; ;;;;;;;''' 
'   [[[        ,[[     \[[, [[[[[. '[[ \[[  .[[/    [[cccc \[[[,/[[['     [['    
'   $$$        $$$,     $$$ $$$ "Y$c$$  Y$c.$$"     $$"""" "$$$$$$c       $$ 
'   `88bo,__,o,"888,_ _,88P888    Y88    Y88P       888oo,_,888b "88bo    88,
'     "YUMMMMMP  "YMMMMMP" MM     YM      MP        """"YUM"MMMM   "W"    MMM
'
'
'
'
_8BITUNSIGNTO8BIT:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   Poke FX,Peek(FX)-128
   Inc FX
Until FX>FXE
Return 
'  
_16BITTO8BIT:
Goto _OCTAVEUP
'  
_16BITTO8BITFLIP:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
CN=0
CN3=Varptr(CN)
CN2=CN3+1
FX_LENGTH2=Length(PBANK)/2
FX2=FX
FXE=FXE-2
Repeat 
   Poke CN2,Peek(FX) : Inc FX
   Poke CN3,Peek(FX) : Inc FX
   CN=Int(Deek(CN3)/256.0)
   Poke FX2,CN
   Inc FX2
Until FX>FXE
Trap Reserve As Work 7,FX_LENGTH2
If Errtrap
   Gosub _NOMEMORY
Else 
   Copy FX_START,FX_START+FX_LENGTH2 To Start(7)
   Bank Swap PBANK,7
   Erase 7
End If 
Return 
'
_32BITTO8BIT:
If Not MATH
   Gosub _NOMATH
   Return 
End If 
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
CN=0 : CN#=0
FX_LENGTH2=Length(PBANK)/4
FX2=FX
FXE=FXE-4
Repeat 
   CN3=Varptr(CN)
   CN2=Varptr(CN#)
   Poke CN3+3,Peek(FX) : Inc FX
   Poke CN3+2,Peek(FX) : Inc FX
   Poke CN3+1,Peek(FX) : Inc FX
   Poke CN3,Peek(FX) : Inc FX
   Dreg(0)=CN
   CN=Lib Call(1,-108)
   Loke CN2,Leek(CN3)
   CN=Int(CN#*127.0)
   Poke FX2,CN
   Inc FX2
Until FX>FXE
Trap Reserve As Work 7,FX_LENGTH2
If Errtrap
   Gosub _NOMEMORY
Else 
   Copy FX_START,FX_START+FX_LENGTH2 To Start(7)
   Bank Swap PBANK,7
   Erase 7
End If 
Return 
'
_32BITTO16BIT:
If Not MATH
   Gosub _NOMATH
   Return 
End If 
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
CN=0 : CN#=0
FX_LENGTH2=Length(PBANK)/2
FX2=0
FXE=FXE-2
Repeat 
   CN3=Varptr(CN)
   CN2=Varptr(CN#)
   Poke CN3+3,Peek(FX) : Inc FX
   Poke CN3+2,Peek(FX) : Inc FX
   Poke CN3+1,Peek(FX) : Inc FX
   Poke CN3,Peek(FX) : Inc FX
   Dreg(0)=CN
   CN=Lib Call(1,-108)
   Loke CN2,Leek(CN3)
   CN=Int(CN#*32767.0)
   Doke FX_START+FX2,CN
   FX2=FX2+2
Until FX>FXE
Trap Reserve As Work 7,FX_LENGTH2
If Errtrap
   Gosub _NOMEMORY
Else 
   Copy FX_START,FX_START+FX_LENGTH2 To Start(7)
   Bank Swap PBANK,7
   Erase 7
End If 
Return 
'
_DEINTERLEAVE:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Trap Reserve As Work 7,FX_LENGTH*0.5
If Errtrap
   Gosub _NOMEMORY
   Return 
End If 
FX_START2=Start(7)
FX_LENGTH2=Length(7)
FX2=0
Repeat 
   Poke FX_START+FX2,Peek(FX)
   Inc FX
   Poke FX_START2+FX2,Peek(FX)
   Inc FX
   Inc FX2
Until FX>FXE
Copy FX_START2,FX_START2+FX_LENGTH2 To FX_START+FX_LENGTH2
Erase 7
Return 
'
_DEINTERLEAVE16BIT:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Trap Reserve As Work 7,FX_LENGTH*0.5
If Errtrap
   Gosub _NOMEMORY
   Return 
End If 
FX_START2=Start(7)
FX_LENGTH2=Length(7)
FX2=0
Repeat 
   Loke FX_START+FX2,Leek(FX)
   FX=FX+2
   Loke FX_START2+FX2,Leek(FX)
   FX=FX+2
   FX2=FX2+2
Until FX>FXE
Copy FX_START2,FX_START2+FX_LENGTH2 To FX_START+FX_LENGTH2
Erase 7
Return 
'  
'
'
'***************************************************************************** 
'*process********************************************************************* 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'   ::::::::. :::::::..      ...       .,-::::::.,:::::: .::::::.  .::::::.
'   `;;```.;;;;;;;``;;;;  .;;;;;;;.  ,;;;'````' ;;;;'''';;;`    `;;;;`    `; 
'   `]]nnn]]' \[[[,/[[[' ,[[     \[[,[[[         [[cccc '[==/[[[[,'[==/[[[[, 
'    $$$""    "$$$$$$c   $$$,     $$$$$$         $$""""   '''    $  '''    $ 
'    888o     ,888b "88bo"888,_ _,88P`88bo,__,o, 888oo,_,88b    dP,88b    dP 
'    YMMMb    "MMMM   "W"  "YMMMMMP"   "YUMMMMMP """"YUM  "YMmMY"   "YMmMY"
'
'
'
_REVERSE:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Trap Reserve As Work 7,FX_LENGTH
If Errtrap
   Gosub _NOMEMORY
   Return 
End If 
FX2=FX_START+FX_LENGTH
Repeat 
   Dec FX2
   CN=Peek(FX2)
   Poke Start(7)-FX_START+FX,CN
   Inc FX
Until FX>FXE
Copy Start(7),Start(7)+Length(7) To FX_START
Erase 7
Return 
'
_INVERT:
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Repeat 
   CN=Peek(FX)
   Gosub SIGN
   CN=-CN
   Gosub UNSIGN
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
'
'
'***************************************************************************** 
'*utils*********************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'    ...    ::::::::::::: :::    :::     .::::::.  
'   ';;     ;;;;;;;;;;''' ;;;    ;;;    ;;;`    `; 
'   [['     [[[    [[     [[[    [[[    '[==/[[[[, 
'   $$      $$$    $$     $$$,   $$'      '''    $ 
'   88    .d888    88,   o88888o88oo,.__,88b    dP 
'    "YmmMMMM""    MMM   MMM"MM"""YUMMMM  "YMmMY"  
'
'  
'
T0NEG:
RX=216 : RY=59 : C0L=_WHITE
WTXT$="Generate Tone" : WX=RX-5 : WY=RY-15 : WX2=RX+212 : WY2=RY+77 : Gosub WIND0W
T0NEV#=T0NEN*3+2
Gosub TLDRW
BTXT1$="Square" : BX=RX+2 : BY=RY+30 : BZN=60 : Gosub BUTTON
BTXT1$="Sine" : BX=RX+108 : BZN=61 : Gosub BUTTON
BTXT1$="Sawtooth" : BX=RX+2 : BY=BY+16 : BZN=58 : Gosub BUTTON
BTXT1$="Cosine" : BX=RX+108 : BZN=59 : Gosub BUTTON
BTXT1$="P-Triangle" : BX=RX+2 : BY=BY+16 : BZN=63 : Gosub BUTTON
BTXT1$="P-Square" : BX=RX+108 : BZN=62 : Gosub BUTTON
Gosub TPDRW
If Length(PBANK)=0
   S_LENGTH=_SIZE
Else 
   S_LENGTH=Length(PBANK)
End If 
BY=RY+30
Do 
   Gosub GVAL
   EVAL$=""
   If M=1
      If Z=58
         BY=BY+16
         BX=RX+2 : Gosub PRESS
         EVAL$="T0NESAW"
      Else If Z=59
         BY=BY+16
         BX=RX+108 : Gosub PRESS
         EVAL$="T0NECOS"
      Else If Z=60
         BX=RX+2 : Gosub PRESS
         EVAL$="T0NESQR"
      Else If Z=61
         BX=RX+108 : Gosub PRESS
         EVAL$="T0NESIN"
      Else If Z=62
         BY=BY+32
         BX=RX+108 : Gosub PRESS
         EVAL$="T0NEPSQR"
      Else If Z=63
         BY=BY+32
         BX=RX+2 : Gosub PRESS
         EVAL$="T0NEPTRI"
      Else If Z=64
         Gosub TMDRW
      End If 
      If EVAL$<>""
         Gosub EVAL$
         If M0DE=2
            _RST=RST
            _RFIN=RFIN
            RST=RST+M_LENGTH5
            RFIN=RFIN+M_LENGTH5
            Gosub EVAL$
            RST=_RST
            RFIN=_RFIN
         Else If M0DE=3
            _RST=RST
            _RFIN=RFIN
            For RI=0 To 2
               RST=RST+M_LENGTH5
               RFIN=RFIN+M_LENGTH5
               Gosub EVAL$
            Next RI
            RST=_RST
            RFIN=_RFIN
         End If 
         Exit 
      End If 
   Else If A=27
      Exit 
   Else 
      If C=78 or C=47
         T0NEV#=T0NEV#+1
         T0NEN=(T0NEV#/3)-2
         Gosub TPDRW
         Gosub TLDRW
      End If 
      If C=79 or C=45
         T0NEV#=T0NEV#-1
         T0NEN=(T0NEV#/3)-2
         Gosub TPDRW
         Gosub TLDRW
      End If 
   End If 
Loop 
For I=58 To 64
   Reset Zone I
Next I
Gosub WIND0WC
If RL=0 and F$=""
   F$=_UNNAMED$ : Gosub SETFILENAME
End If 
If A<>27 Then Gosub _SHOWALL
Return 
'
TPDRW:
Ink _WHITE,_SHADOW
Text RX+165,RY-4,Space$(5)
Text RX+165,RY-4,Str$(T0NEV#)-" "+"Hz"
Return 
'
TLDRW:
Cls _BG,RX,RY+6 To RX+207,RY+20
Cls _GRAY,RX+4+T0NEN-4,RY+6 To RX+4+T0NEN+4-1,RY+20
Set Zone 64,RX+4+T0NEN-4,RY+6 To RX+4+T0NEN+4-1,RY+20
Return 
'
TMDRW:
Do 
   Gosub TESTMOVE
   T0NEN=X Screen(X Mouse)-224
   If T0NEN=<1 Then T0NEN=1
   If T0NEN>199 Then T0NEN=200
   T0NEV#=T0NEN*3+2
   Gosub TLDRW
   Gosub TPDRW
   Exit If M=0
Loop 
Return 
'
T0NESET:
T0NEV#=T0NEN*3+2
If Length(PBANK)=0 Then Trap Reserve As Work PBANK,_SIZE
Return 
'
T0NESIN:
Gosub T0NESET
If Errtrap
   Gosub _NOMEMORY
   Return 
End If 
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
N#=(Pi#*2*T0NEV#)/FREQ
Repeat 
   CN=96*Sin(N#*(FX-FX_START))
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
T0NESQR:
Gosub T0NESET
If Errtrap
   Gosub _NOMEMORY
   Return 
End If 
SAWN=0
SAWMUL#=1.0
T0NESYN:
Repeat 
   Gosub SET_PBANK
   If FX_LENGTH<2 Then Goto FLSHSCR
   N#=((Pi#*2*(T0NEV#*SAWMUL#))/FREQ)
   Repeat 
      If SAWN>0
         CN=Peek(FX)
      Else 
         CN=0
      End If 
      CN2=96*(Sin(N#*(FX-FX_START)))
      If SAWN>0
         Poke FX,CN+Int(CN2/SAWMUL#)
      Else 
         Poke FX,CN2
      End If 
      Inc FX
   Until FX>FXE
   SAWMUL#=SAWMUL#+2
   Inc SAWN
Until SAWN>16
Return 
'  
T0NESAW:
Gosub T0NESET
If Errtrap
   Gosub _NOMEMORY
   Return 
End If 
SAWN=0
SAWMUL#=0.0
Goto T0NESYN
'  
T0NECOS:
Gosub T0NESET
If Errtrap
   Gosub _NOMEMORY
   Return 
End If 
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
N#=(Pi#*2*T0NEV#)/FREQ
Repeat 
   CN=96*Cos(N#*(FX-FX_START))
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 
'
T0NEPTRI:
Gosub T0NESET
If Errtrap
   Gosub _NOMEMORY
   Return 
End If 
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
If T0NEV#>430 and T0NEV#<470
   TRI#=4.4
Else 
   TRI#=2.0
End If 
N#=(Pi#*2*T0NEV#)/FREQ
CN#=127
CN2#=(N#*100.0)/TRI#
Repeat 
   If 96*Cos(N#*(FX-FX_START))>0
      CN#=CN#+CN2#
   Else 
      CN#=CN#-CN2#
   End If 
   Poke FX,Int(CN#-128)
   Inc FX
Until FX>FXE
Return 
'
T0NEPSQR:
Gosub T0NESET
If Errtrap
   Gosub _NOMEMORY
   Return 
End If 
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
N#=(Pi#*2*T0NEV#)/FREQ
Repeat 
   CN=96*Sin(N#*(FX-FX_START))
   Gosub SIGN
   If CN>0
      CN=96
   Else 
      CN=-96
   End If 
   Poke FX,CN
   Inc FX
Until FX>FXE
Return 

_NOISEWHITE:
Gosub T0NESET
If Errtrap
   Gosub _NOMEMORY
   Return 
End If 
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Randomize Timer
Repeat 
   CN=Rnd(255)-127
   Poke FX,CN
   Inc FX
Until FX>FXE
If RL=0 and F$=""
   F$=_UNNAMED$ : Gosub SETFILENAME
End If 
Return 
'
_NOISEDITHER:
Gosub T0NESET
If Errtrap
   Gosub _NOMEMORY
   Return 
End If 
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
Randomize Timer
Repeat 
   CN=Rnd(2)-1
   Poke FX,CN
   Inc FX
Until FX>FXE
If RL=0 and F$=""
   F$=_UNNAMED$ : Gosub SETFILENAME
End If 
Return 
'
_NOISECRYPTO:
On Error Goto MATHTR4P
AA=0 : BB=0 : CC=0
ISA=$9E3779B9 : ISB=ISA : ISC=ISA : ISD=ISA : ISE=ISA : ISF=ISA : ISG=ISA : ISH=ISA
N=0
T$=""
_EXIT=False
Gosub _OPENFXWIN
REALTIME=False
Repeat 
   If A>47 and A<123
      T$=T$+K$
      N=N+1
   End If 
   If CK=65 and N>0
      N=N-1
      T$=Mid$(T$,0,N)
   End If 
   Ink _BLACK,_WHITE
   Text X+240,Y+72,"Passphrase:"+T$+"_"+" "
   Repeat 
      Gosub GVAL
      If Z=60 and M=1
         BX=RX+2 : Gosub PRESS
         REQ=True
         _EXIT=True
         Exit 
      Else If Z=61 and M=1 or A=27
         BX=RX+108 : Gosub PRESS
         REQ=False
         _EXIT=True
         Exit 
      Else If A=13
         REQ=True
         _EXIT=True
         Exit 
      Else If A=27
         REQ=False
         _EXIT=True
         Exit 
      End If 
   Until C<>0
Until _EXIT
If T$="" Then REQ=False
Gosub _CLOSEFXWIN
If REQ
   Gosub T0NESET
   If Errtrap
      Gosub _NOMEMORY
      Return 
   End If 
   Gosub SET_PBANK
   If FX_LENGTH<2
      Goto FLSHSCR
   End If 
   ISN=0
   For RANDCNT=0 To 255
      MM(RANDCNT)=0
      If ISN>Len(T$)
         ISN=0
      End If 
      RANDRSL(RANDCNT)=Asc(Mid$(T$,ISN,1))
      Inc ISN
   Next RANDCNT
   For ISI=0 To 3
      Gosub IMIX
   Next ISI
   For ISI=0 To 255 Step 8
      ISA=ISA+RANDRSL(ISI) : ISB=ISB+RANDRSL(ISI+1) : ISC=ISC+RANDRSL(ISI+2) : ISD=ISD+RANDRSL(ISI+3)
      ISE=ISE+RANDRSL(ISI+4) : ISF=ISF+RANDRSL(ISI+5) : ISG=ISG+RANDRSL(ISI+6) : ISH=ISH+RANDRSL(ISI+7)
      Gosub IMIX
      MM(ISI)=ISA : MM(ISI+1)=ISB : MM(ISI+2)=ISC : MM(ISI+3)=ISD
      MM(ISI+4)=ISE : MM(ISI+5)=ISF : MM(ISI+6)=ISG : MM(ISI+7)=ISH
   Next ISI
   Gosub ISAAC
   Repeat 
      ISN=RANDRSL(RANDCNT)
      RANDCNT=RANDCNT+1
      If RANDCNT>255
         Gosub ISAAC
         RANDCNT=0
      End If 
      ISN=(ISN mod 255)
      Poke FX,ISN
      Inc FX
   Until FX>FXE
End If 
If RL=0 and F$=""
   F$=_UNNAMED$ : Gosub SETFILENAME
End If 
On Error Proc TR4P
Return 
'
ISAAC:
XV=0 : YV=0
CC=CC+1
BB=BB+CC
For IV=0 To 255
   XV=MM(IV)
   BIT1=IV : BIT2=3 : Gosub BITWISEAND
   TAA13=AA : TAA6=AA : TAA2=AA : TAA16=AA
   Rol.l 13,TAA13 : Ror.l 6,TAA6 : Rol.l 2,TAA2 : Ror.l 16,TAA16
   If BIT3=0
      AA=AA xor TAA13
   Else If BIT3=1
      AA=AA xor TAA6
   Else If BIT3=2
      AA=AA xor TAA2
   Else If BIT3=3
      AA=AA xor TAA16
   End If 
   BIT1=IV+128 : BIT2=255 : Gosub BITWISEAND
   AA=MM(BIT3)+AA
   Ror.l 2,XV
   BIT1=XV : BIT2=255 : Gosub BITWISEAND
   YV=MM(BIT3)+AA+BB
   Rol.l 10,YV
   MM(IV)=YV
   BIT1=YV : BIT2=255 : Gosub BITWISEAND
   BB=MM(BIT3)+XV
   RANDRSL(IV)=BB
Next IV
Return 
'
IMIX:
Rol.l 11,ISB
Ror.l 2,ISC
Rol.l 8,ISD
Ror.l 16,ISE
Rol.l 10,ISF
Ror.l 4,ISG
Rol.l 8,ISH
Ror.l 9,ISA
ISA=ISA xor ISB : ISD=ISD+ISA : ISB=ISB+ISC
ISB=ISB xor ISC : ISE=ISE+ISB : ISC=ISC+ISD
ISC=ISC xor ISD : ISF=ISF+ISC : ISF=ISF+ISC
ISD=ISD xor ISE : ISG=ISG+ISD : ISE=ISE+ISF
ISE=ISE xor ISE : ISH=ISH+ISE : ISF=ISF+ISG
ISF=ISF xor ISG : ISA=ISA+ISF : ISG=ISG+ISH
ISG=ISG xor ISH : ISB=ISB+ISG : ISH=ISH+ISA
ISH=ISH xor ISA : ISC=ISC+ISH : ISA=ISA+ISB
Return 
'
BITWISEAND:
BIT3=0
For I=0 To 31
   B1=Btst(I,BIT1)
   B2=Btst(I,BIT2)
   If B1=True and B2=True
      Bset I,BIT3
   Else 
      Bclr I,BIT3
   End If 
Next I
Return 
'  
_NOISESIN:
Gosub T0NESET
If Errtrap
   Gosub _NOMEMORY
   Return 
End If 
Gosub SET_PBANK
If FX_LENGTH<2 Then Goto FLSHSCR
CN=1
CN#=1
Repeat 
   CN#=Sin(CN*CN#)
   CN2=Int(CN#*127)
   Inc CN
   Poke FX,CN2
   Inc FX
   If CN>14000
      CN=1
   End If 
Until FX>FXE
If RL=0 and F$=""
   F$=_UNNAMED$ : Gosub SETFILENAME
End If 
Return 
'
_TGLBGREC:
If BGREC
   BGREC=False
   If M0DE=1
      Close 3
   Else If M0DE=2
      Close 3 : Close 4
   Else If M0DE=3 or M0DE=4
      Close 3 : Close 4 : Close 5 : Close 6
   End If 
   BGRECTOTAL=0
   _MENU$(4,3,0)=" Record Output    "
   Text 387,WVE_H+24+16,Space$(12)
   Colour _HIGHLIGHT,PC0L
Else 
   If Length(PBANK)=0
      Goto FLSHSCR
   End If 
   PF$=F$
   WTXT$="Record"
   If M0DE=2
      WTXT$=WTXT$+" as Stereo"
   Else If M0DE=3
      WTXT$=WTXT$+" as Quad"
   Else If M0DE=4
      WTXT$=WTXT$+" 4 Track"
   End If 
   WTXT$=WTXT$+": raw"
   Gosub FREQUEST
   T$=F$
   F$=PF$
   If Not FRQ
      Return 
   End If 
   If Exist(T$)
      Gosub OVERWRITE
      If Not REQ
         Return 
      End If 
   End If 
   If M0DE=1
      Open Out 3,T$
   Else If M0DE=2
      Open Out 3,T$+"-L"
      Open Out 4,T$+"-R"
   Else If M0DE=3 or M0DE=4
      Open Out 3,T$+"-1"
      Open Out 4,T$+"-2"
      Open Out 5,T$+"-3"
      Open Out 6,T$+"-4"
   End If 
   _MENU$(4,3,0)=" Stop Recording   "
   BGREC=True
   PC0L=Colour(_HIGHLIGHT)
   Colour 7,$F00
End If 
Return 
'  
'
'
'***************************************************************************** 
'*direct********************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'   ::::::-.   :::  :::::::..  .,::::::  .,-:::::::::::::::: 
'   ;;,   `';, ;;;  ;;;;``;;;; ;;;;'''',;;;'````' ;;;;;;;''' 
'   `[[     [[ [[[  \[[[,/[[['  [[cccc [[[            [[ 
'    $$,    $$ $$$, "$$$$$$c    $$"""" $$$            $$ 
'    888_,o8P'o88888,888b "88bo 888oo,_`88bo,__,o,    88,
'   "MMMMP"`  MMM"MM"MMMM   "W" """"YUM  "YUMMMMMP    MMM
'
'
'
_DIRECT:
_DIRECT=True
Screen Open 2,SCR_W,128,2,Hires
Palette $0,$FFF,,,,,,,,,,,,,,,,$444,$500,$111
Flash Off 
I#=-90 : DD#=1.5
Repeat 
   Screen Display 2,128,Int(I#),320,128
   I#=I#+DD#
   DD#=DD#+3.25
   If Not BGPLYING Then Gosub TASK
Until I#>DCT_Y
Screen Display 2,128,DCT_Y,320,128
Ink _WHITE
¯LOOP:
IN$="" : N=0
Print IN$;Dir$;"> ";
Repeat 
   Gosub GVAL
   If A>0
      If A=30
         IN$=PIN$
         N=PN
      Else 
         IN$=IN$+K$
         If A<>13 and A<>27
            Screen 0
            _TOAST$=K$
            Gosub _TOAST
            Screen 2
         End If 
         N=N+1
      End If 
      Locate 0, : Print Dir$;"> ";IN$;
   End If 
Until A=13 or A=27
IN$=Upper$(Mid$(IN$,0,N-1))
PIN$=IN$
PN=N-1
Print 
If Left$(IN$,4)="EXIT" or A=27
   Goto _DIRECTC
Else If Left$(IN$,2)="CD"
   Gosub ¯CD
Else If Left$(IN$,2)="MD"
   Gosub ¯MD
Else If Left$(IN$,3)="DIR"
   Gosub ¯DIR
Else If Left$(IN$,3)="DEL"
   Gosub ¯DEL
Else If Left$(IN$,3)="CLS"
   Cls 
Else If Left$(IN$,2)="RX"
   Gosub ¯RX
Else If Left$(IN$,9)="HELP SUBS"
   Gosub ¯HELPSUBS
Else If Left$(IN$,10)="HELP 14BIT"
   Gosub ¯HELP14
Else If Left$(IN$,4)="HELP"
   Gosub ¯HELP
Else 
   Screen Hide 2
   Screen 0
   Trap Gosub IN$
   Screen Show 2
   Screen 2
   If Errtrap
      Print "Unknown command/subroutine: ";IN$
   End If 
End If 
Goto ¯LOOP
'
_DIRECTC:
I#=DCT_Y
Repeat 
   Screen Display 2,128,Int(I#),320,128
   If Not BGPLYING Then Gosub TASK
   I#=I#-DD#
Until I#<-90
_DIRECT=False
Screen Close 2
Screen 0
Return 
'
¯CD:
If Mid$(IN$,3,20)=""
   Print Dir$ : Print 
Else If Exist(Mid$(IN$,4,20))
   Dir$=Mid$(IN$,4,20)
Else 
   T$=Mid$(IN$,4,20)
   Goto ¯CANTFIND
End If 
Return 
'
¯MD:
If Mid$(IN$,4,20)=""
   Gosub ¯BADARGS
Else If Exist(Mid$(IN$,4,20))
   Print Mid$(IN$,4,20);" exists"
Else 
   Mkdir Mid$(IN$,4,20)
End If 
Return 
'
¯DIR:
If Mid$(IN$,5,20)=""
   Goto ¯D
Else If Exist(Mid$(IN$,5,20)-" ")
   PPROGDIR$=Dir$
   Dir$=Mid$(IN$,5,20)
   Gosub ¯D
   Dir$=PPROGDIR$
   PROGDIR$=PPROGDIR$
Else 
   T$=Mid$(IN$,5,20)
   Goto ¯CANTFIND
End If 
Return 
'
¯D:
D$=Dir First$("")
Repeat 
   Print D$
   D$=Dir Next$
Until D$=""
Return 
'
¯DEL:
If Mid$(IN$,5,20)=""
   Goto ¯BADARGS
Else If Exist(Mid$(IN$,5,20))
   Kill Mid$(IN$,5,20)
Else 
   T$=Mid$(IN$,5,20)
   Goto ¯CANTFIND
End If 
Return 
'
¯RX:
If Mid$(IN$,4,20)=""
   Goto ¯BADARGS
Else If Exist("rx")
   Exec 'rx '+Mid$(IN$,4,30)
End If 
Return 
'
¯HELP:
Restore HLP
For I=0 To 4
   Read T$
   Print T$
Next I
Return 
'  
¯HELPSUBS:
Print "Macro Subroutines: ";
For M1=0 To _M1
   For M2=0 To _M2
      For M3=0 To _M3
         If Mid$(_MENUG$(M1,M2,M3),0,1)="_"
            Print _MENUG$(M1,M2,M3);" ";
         End If 
      Next M3
   Next M2
Next M1
Print : Print : Print "Note the unscore prefix"
Return 
'
¯HELP14:
Restore H14
For I=0 To 14
   Read T$
   Print T$
Next I
Return 
'
¯CANTFIND:
Print "Cannot find ";T$
Return 
'
¯BADARGS:
Print "Bad Args."
Return 
'
'
'
'***************************************************************************** 
'*help************************************************************************ 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'     ::   .: .,::::::  :::    ::::::::. 
'    ,;;   ;;,;;;;''''  ;;;    `;;```.;;;
'   ,[[[,,,[[[ [[cccc   [[[    `]]nnn]]' 
'   "$$$"""$$$ $$""""   $$'     $$$""
'    888   "88 888oo,_o88oo,.__ 888o 
'    MMM    YM """"YUM"""YUMMMM YMMMb
'
'
'
_SHORTCUTS:
WTXT$="Keyboard Shortcuts" : WX=94 : WY=20 : WX2=546 : WY2=182 : Gosub WIND0W
Pen _BLACK : Paper _WHITE
Locate 15,5
Restore SHRT
For I=0 To 14
   Read T$
   Print T$
   Locate 15,
Next I
Gosub WIND0WWAITC
Return 
'
_OPTIONS:
RX=98 : RY=36
WTXT$="Options" : WX=RX : WY=RY : WX2=542 : WY2=120 : Gosub WIND0W
Pen _BLACK : Paper _WHITE
Locate ,7 : Centre "Hardware Lowpass Filter, PAL/NTSC Switch"
Locate ,8 : Centre "Osc Syncronize, Toggle Screen, Loop When Mixing"
RX=105
C0L=_WHITE
If FIL
   BTXT1$="Filter On"
Else 
   BTXT1$="Filter Off"
End If 
BX=RX+8 : BY=RY+45 : BZN=59 : Gosub BUTTONGRAY
BTXT1$=Str$(Int(MONHZ#))-" "+"Hz"
BX=RX+113 : BY=RY+45 : BZN=60 : Gosub BUTTONGRAY
If PAL=1
   BTXT1$="2025"
Else If PAL=2
   BTXT1$="1991"
Else If PAL=3
   BTXT1$="2016"
Else 
   BTXT1$="2017"
End If 
BX=RX+218 : BY=RY+45 : BZN=61 : Gosub BUTTONGRAY
If _DEBUG
   BTXT1$="Debug On"
Else 
   BTXT1$="Debug Off"
End If 
BX=RX+323 : BY=RY+45 : BZN=62 : Gosub BUTTONGRAY
If NETWORK
   BTXT1$="Netsync On"
Else 
   BTXT1$="Netsync Off"
End If 
BX=RX+8 : BY=RY+62 : BZN=65 : Gosub BUTTONGRAY
If SCR_R=Hires
   BTXT1$="Hires"
Else 
   BTXT1$="Lowres"
End If 
BX=RX+113 : BY=RY+62 : BZN=63 : Gosub BUTTONGRAY
If _LPMIX
   BTXT1$="Mixloop On"
Else 
   BTXT1$="Mixloop Off"
End If 
BX=RX+218 : BY=RY+62 : BZN=64 : Gosub BUTTONGRAY
If INFO
   BTXT1$="Info On"
Else 
   BTXT1$="Info Off"
End If 
BX=RX+323 : BY=RY+62 : BZN=66 : Gosub BUTTONGRAY
Do 
   Gosub GVAL
   Exit If K$=Chr$(27)
   If M=1
      If Z=59
         BX=RX+8 : BY=RY+45 : Gosub PRESS
         Gosub _TGLFILTER
         Exit 
      Else If Z=60
         BX=RX+113 : BY=RY+45 : Gosub PRESS
         Gosub _TGLMON
         Gosub _STOP
         Exit 
      Else If Z=61
         BX=RX+218 : BY=RY+45 : Gosub PRESS
         Gosub _TGL1991
         Exit 
      Else If Z=62
         BX=RX+323 : BY=RY+45 : Gosub PRESS
         Gosub _TGLDEBUG
         Exit 
      Else If Z=65
         BX=RX+8 : BY=RY+62 : Gosub PRESS
         If Not BSD
            TXT1$="BSD Library not found" : TXT2$="or not connected"
            Gosub _NOTICE
         Else 
            Gosub _TGLNETSYNC
         End If 
         Exit 
      Else If Z=63
         BX=RX+113 : BY=RY+62 : Gosub PRESS
         Gosub _TGLLOWRES
         Exit 
      Else If Z=64
         BX=RX+218 : BY=RY+62 : Gosub PRESS
         Gosub _TGLLPMIX
         Exit 
      Else If Z=66
         BX=RX+323 : BY=RY+62 : Gosub PRESS
         Gosub _TGLINFO
         Exit 
      End If 
   End If 
Loop 
For I=59 To 66
   Reset Zone I
Next I
Gosub WIND0WC
If Z=66 and INFO=False
   Gosub _FLIPPOS
   For I=1 To 4
      PXR(I)=0
   Next I
End If 
Return 
'
_TGLFILTER:
If FIL
   FIL=False
   Led Off 
Else 
   FIL=True
   Led On 
End If 
Return 
'
_TGLMON:
If MONHZ#=50.0
   MONHZ#=60.0 : CLOCK=3579545
Else 
   MONHZ#=50.0 : CLOCK=3546895
End If 
Return 
'
_TGL1991:
If PAL=1
   Palette $0,$F00,$FFF,$FF0,$0,$F55,$FFF,$FF0
   Inc PAL
Else If PAL=2
   Palette $0,$289,$DDD,$888,$111,$178,$FFF,$E70
   Inc PAL
Else If PAL=3
   Palette $466,$599,$DDD,$888,$111,$488,$FFF,$E90,$5F5,$30,$552,$885,$B00,$123,$BFF,$401
   Inc PAL
Else If PAL=4
   Palette $0,$599,$DDD,$566,$111,$377,$FFF,$E70,$F0,$30,$520,$975,$C12,$123,$AEE,$1B
   PAL=1
End If 
Gosub _RAINRESTORE
Return 
'
_TGLDEBUG:
If _DEBUG
   _DEBUG=False
Else 
   _DEBUG=True
End If 
Return 
'  
_TGLNETSYNC:
PKTCOUNT=0
If NETWORK
   NETWORK=False
Else 
   NETWORK=True
End If 
Return 
'
_TGLLOWRES:
SB=Screen Base
If SCR_R=Hires
   Doke SB+72,Deek(SB+72) xor Hires
   SCR_R=Lowres
Else 
   Doke SB+72,Deek(SB+72) or Hires
   SCR_R=Hires
   Screen Offset 0,0,0
End If 
Return 
'
_TGLLPMIX:
If _LPMIX
   _LPMIX=False
Else 
   _LPMIX=True
End If 
Return 
'  
_TGLINFO:
If INFO
   INFO=False
Else 
   INFO=True
End If 
Return 
'
_ABOUT:
WTXT$="FxBox" : WX=149 : WY=26 : WX2=490 : WY2=120 : Gosub WIND0W
Text WX+4+48,WY+10,"powered by" : Paste Bob WX+141,WY,3
Pen _BLACK : Paper _WHITE
Locate ,6
Centre "Version 1.11 © 1991-2025 Marc Williams"
Locate ,7
Centre "Benchmarking: *"
If _DOSVER<40
   T$="1.3"
Else If _DOSVER=40
   T$="3.1"
Else T$="v"+Str$(_DOSVER)-" "
End If 
Locate ,8
Centre _CPU$+" Cpu, Amiga OS "+T$
T$="Chip:"+Str$((Chip Free/1024))-" "+"K"
Ink _WHITE,_SHADOW
Text WX2-Text Length(T$)-3,WY+10,T$
Gosub HEADER
Locate ,9
If REXX and Arexx Exist("FXBOX_REXX")
   Centre "Arexx Port: "+"FXBOX_REXX"
Else 
   Centre "Arexx: not active"
End If 
Locate ,10
If OCTAMED
   Centre "Octamed Sync: active "
Else 
   Centre "Octamed Sync: not active"
End If 
Locate ,11
If NETWORK and BSD
   Centre "Net Sync: "+Left$(_ADDR$,Len(_ADDR$))+":"+Str$(_PORT)-" "
Else 
   Centre "Net Sync: not active"
End If 
I=0
BTIME=Timer
ETIME=BTIME+MONHZ#
Repeat 
   Inc I
Until Timer>ETIME
Locate ,7
Centre "Benchmark:"+Str$(I/1E+06)+" DSP MIPS"
Gosub WIND0WWAITC
Return 
'
'    
'
'*****************************************************************************   
'*macros********************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'    .        :    :::.       .,-:::::::::::::..      ...      .::::::.
'    ;;,.    ;;;   ;;`;;    ,;;;'````' ;;;;``;;;;  .;;;;;;;.  ;;;`    `; 
'    [[[[, ,[[[[, ,[[ '[[,  [[[        \[[[,/[[[' ,[[     \[[,'[==/[[[[, 
'    $$$$$$$$"$$$c$$$cc$$$c $$$        "$$$$$$c   $$$,     $$$  '''    $ 
'   888 Y88" 888o 888   888,`88bo,__,o,,888b "88bo"888,_ _,88P,88b    dP 
'   MM  M'  "MMMM YMM   ""`   "YUMMMMMP"MMMM   "W"  "YMMMMMP"   "YMmMY"
'
'
'
MACRO:
_CHOICES$=MACROS$(_M2SEL)
_TOAST$=_CHOICES$+" "
T$=MACRODIR$+_CHOICES$+".asc"
If Exist(T$)
   MACRO=True
   Gosub _UNDOSET
   PM0DE=M0DE
   M0DE=1
   Open In 1,T$
   N=Lof(1) : Close 1 : C$=Space$(N)
   Bload T$,Varptr(C$) : PX=1
   Repeat 
      AX=Instr(C$,Chr$(10),PX)
      If AX
         T$=Mid$(C$,PX,AX-PX)
         _TOAST$=T$-"_"+" "
         PASS=0
         Gosub T$
         Gosub _TOAST
      End If 
      PX=AX+1
      Gosub GVAL
   Until A=13 or A=27 or PX>=N or Length(PBANK)<3
   M0DE=PM0DE
   MACRO=False
   PASS=0
   Gosub _RANGENONE
   FI=Length(PBANK)
   Gosub POS_SET
   RENDERING=True
   Gosub _DRAW
   RENDERING=False
   PASS=0
   Gosub _SHOWALL
Else 
   _TOAST$=T$
End If 
Return 
'
_MACROMENU:
If Exist("macros")
   _MENU$(7,0,0)="Macros   "
   Dir$="macros"
   MACRODIR$=Dir$
   D$=Dir First$("**")
   TCOUNT=1
   Repeat 
      If D$<>""
         For I=Len(D$)-9 To 0 Step -1
            TDC$=Mid$(D$,I,1)
            If TDC$<>" "
               TDFC=I
               Exit 
            End If 
         Next I
         D$=Upper$(Mid$(D$,2,1))+Mid$(D$,3,TDFC-2-4)
         MACROS$(TCOUNT)=D$
         _MENU$(7,TCOUNT,0)=Space$(20)
         Mid$(_MENU$(7,TCOUNT,0),2)=D$
         _MENUG$(7,TCOUNT,0)="MACRO"
         _MENUFX(7,TCOUNT,0)=False
      End If 
      Inc TCOUNT
      D$=Dir Next$
   Until D$=""
   TCOUNT=0
   Dir$=PROGDIR$
End If 
Return 
'  
'
'
'***************************************************************************** 
'*sys************************************************************************* 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'    .::::::. -:.     ::-.: .::::::. 
'   ;;;`    `;';;.   ;;;;'';;;`    `;
'   '[==/[[[[,   '[[,[[['  '[==/[[[[,
'     '''    $     c$$"      '''    $
'   ,88b    dP   ,8P"`     ,88b    dP
'     "YMmMY"   mM"          "YMmMY" 
'
'
'
SIGN2:
If CN2>127 Then CN2=CN2-256
SIGN:
If CN>127 Then CN=CN-256
Return 
'
UNSIGN2:
If CN2<0 Then CN2=CN2+256
UNSIGN:
If CN<0 Then CN=CN+256
Return 
'
FLOAT:
If CN>127 Then CN=CN-256
CN#=CN/127.0
Return 
'
UNFLOAT:
CN=Int(CN#*127.0)
Gosub _CHECKCLIP
If CN<0 Then CN=CN+256
Return 
'
_CHECKCLIP:
If CN>127 Then CN=127
If CN<-127 Then CN=-127
Return 
'  
_UNCHECKCLIP:
If CN>255 Then CN=255
If CN<0 Then CN=0
Return 
'  
SET_PBANK:
If Length(PBANK)=0
   FX_LENGTH=0
   Return 
End If 
If REALTIME
   FX=P_SWP
   FX_START=FX
   FX_LENGTH=BSIZE
   FXE=FX+BSIZE-1
Else 
   FX_START=Start(PBANK)+RST
   FX_LENGTH=RL
   If RL>Length(PBANK)-RST or RST+RL=0
      FX_LENGTH=Length(PBANK)-RST
   End If 
   If RL<2
      FX_START=Start(PBANK)
      FX_LENGTH=Length(PBANK)
   End If 
   FX=FX_START
   FXE=FX_START+FX_LENGTH-1
End If 
P_START=Start(PBANK)
P_LENGTH=Length(PBANK)
If M0DE=2
   P_LENGTH=P_LENGTH/2
Else If M0DE=3
   P_LENGTH=P_LENGTH/4
End If 
Return 
'
_CLEARALL:
BTXT1$="Clear" : TXT1$="Clear all the" : TXT2$="samples?" : Gosub _REQUEST
If Not REQ Then Return 
Gosub _STOP
F$="" : PF$=""
For B=1 To 10
   Mid$(_MENU$(5,B,0),7)=Space$(16)
Next B
For B=1 To _FL
   FB$(B)=""
   FPATH$(B)=""
Next B
For B=5 To 256
   Erase B
Next B
B=1
If M0DE=4
   PBANK=B+7
Else 
   PBANK=5
End If 
Gosub SET_PBANK
Gosub _DRAW
Gosub HEADER
Return 
'  
SETHZ:
HZPERIOD=CLOCK/FREQ
If _AMIHZ Then FREQ=CLOCK/HZPERIOD
BSIZE=Int(FREQ/MONHZ#)
Doke $DFF0A6,HZPERIOD
Doke $DFF0B6,HZPERIOD
Doke $DFF0C6,HZPERIOD
Doke $DFF0D6,HZPERIOD
_UPDATETIME=True
_AMIHZ=True
Return 
'
_SWAPMENU:
B=_M2SEL
If PB=B Then Return 
Goto _SWAPBANK
'
_SWAPPREV:
Dec B
If B<1
   B=1
End If 
Goto _SWAPBANK
'
_SWAPNEXT:
Inc B
If B>255
   B=255
End If 
Goto _SWAPBANK
'
_SWAPFKEY:
B=C-79
_SWAPBANK:
If PB=B
   If M0DE=4
      PBANK=PB+7
   End If 
   Return 
End If 
Gosub _RANGENONE
If M0DE<>4
   Bank Swap PB+7,5
   Bank Swap 5,B+7
End If 
PB=B
F$=FB$(B)
P_LENGTH=Length(PBANK)
If P_LENGTH>0
   P_START=Start(PBANK)
End If 
FI=P_LENGTH
If P_LENGTH=0
   Gosub _CLEARPLAYBUFFER
End If 
Gosub SETCORDS
Gosub MAGICWAND
If M0DE=4
   PBANK=PB+7
   Gosub _RAINSET
Else 
   PBANK=5
   RENDERING=True
   Gosub _DRAW
   RENDERING=False
   Gosub _RAINRESTORE
   Gosub _UPDATEPOS
End If 
Gosub HEADER
Gosub SET_PBANK
_UPDATETIME=True
Return 
'
FLSHSCR:
Colour _PANE,Colour(_HIGHLIGHT)
If Not BGPLYING
   Gosub TASK : Gosub TASK
   Goto FLSHSCRC
Else 
   _TOAST$="!"
End If 
Return 
'
FLSHSCRC:
Colour _PANE,$599
Return 
'
FXBUFFER:
For FXBC=1 To 4
   Trap Reserve As Work _CURRENT,_SIZE
   If Errtrap
      Gosub _NOMEMORY
      _CURRENT=-1
      Return 
   End If 
   Inc _CURRENT
Next FXBC
Return 
'
FXBUFFERC:
For FXBC=4 To 1 Step -1
   Dec _CURRENT
   Erase(_CURRENT)
Next FXBC
Return 
'
GFXSET:
GFXX=Xgr : GFXY=Ygr
Return 
'
GFXRESTORE:
Gr Locate GFXX,GFXY
Return 
'
'
'
'***************************************************************************** 
'*mouse*********************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'    .        :      ...      ...    ::: .::::::. .,:::::: 
'    ;;,.    ;;;  .;;;;;;;.  ';;     ;;;;;;`    `;;;;;'''' 
'    [[[[, ,[[[[,,[[     \[[,[['     [[['[==/[[[[, [[cccc  
'    $$$$$$$$"$$$$$$,     $$$$$      $$$  '''    $ $$""""  
'   888 Y88" 888o"888,_ _,88P88    .d888,88b    dP 888oo,_ 
'   MM  M'  "MMMM  "YMMMMMP"  "YmmMMMM""  "YMmMY"  """"YUM 
'
'
'
SETZ0NES:
If CON#=0 Then Return 
If XR=XR2 or RL=0
   Set Zone 73,0,12 To SCR_W,WVE_H+12
   For I=74 To 77
      Reset Zone I
   Next I
Else If XR>1 and XR2>0
   Set Zone 73,0,12 To XR-1,WVE_H+12
   Set Zone 74,XR,RNG_T+12 To XR+12,RNG_B+12
   If XR+24<XR2
      Set Zone 75,XR+12,12 To XR2-12,WVE_H+12
   Else 
      Reset Zone 75
   End If 
   If XR2>12 and XR2<SCR_W
      Set Zone 76,XR2-12,RNG_T+12 To XR2+1,RNG_B+12
   Else 
      If((RFIN/CON#)-(FIN/CON#))=0
         If XR<614
            Set Zone 75,XR+12,RNG_T+12 To 626,RNG_B+12
         Else 
            Reset Zone 75
         End If 
         Set Zone 76,627,RNG_T+12 To SCR_W,RNG_B+12
      Else 
         Reset Zone 76
      End If 
   End If 
   If XR2>0 and XR2<SCR_W-2
      Set Zone 77,XR2+1,12 To SCR_W,WVE_H+12
   Else 
      Reset Zone 77
   End If 
Else If XR=0 and XR2>0 and XR2<25
   Reset Zone 73
   Set Zone 74,0,RNG_T+12 To 6,RNG_B+12
   Reset Zone 75
   Set Zone 76,6,RNG_T+12 To 12,RNG_B+12
   Set Zone 77,XR2+1,12 To SCR_W,WVE_H+12
Else If XR=0 and XR2>24 and XR2<SCR_W-2
   Reset Zone 73
   If(RST/CON#)-(ST/CON#)=0
      Set Zone 74,0,RNG_T+12 To 12,RNG_B+12
      Set Zone 75,12,12 To XR2-12,WVE_H+12
   Else 
      Reset Zone 74
      Set Zone 75,0,12 To XR2-12,WVE_H+12
   End If 
   Set Zone 76,XR2-12,RNG_T+12 To XR2+1,RNG_B+12
   Set Zone 77,XR2+1,12 To SCR_W,140
Else If XR2>0
   Reset Zone 73
   Set Zone 74,0,RNG_T+12 To 12,RNG_B+12
   Set Zone 75,13,12 To 628,WVE_H+12
   If((RFIN/CON#)-(FIN/CON#))=0
      Set Zone 76,628,RNG_T+12 To SCR_W,RNG_B+12
   Else 
      Reset Zone 76
      If(RST/CON#)-(ST/CON#)=0
         Set Zone 75,13,12 To SCR_W,WVE_H+12
      Else 
         Set Zone 75,0,12 To SCR_W,WVE_H+12
      End If 
   End If 
   Reset Zone 77
Else 
   Set Zone 73,0,12 To SCR_W,WVE_H+12
   For I=74 To 77
      Reset Zone I
   Next I
End If 
Return 
'
TESTMOVE:
PX=X Screen(X Mouse)
PY=Y Screen(Y Mouse)
MK=Mouse Key
Do 
   Gosub GVAL
   Exit If C>0 or MK<>M or CY<>PY or CX<>PX
Loop 
Return 
'
MUP:
Repeat 
   If Not BGPLYING Then Gosub TASK
   M=Mouse Key
Until M=0
Return 
'
GVAL:
If Not BGPLYING Then Gosub TASK
If _TOAST$<>"" Then Gosub _TOAST
M=Mouse Key
Z=Mouse Zone
If M=4
   M=0
Else If M=5
   M=1
End If 
K$=Inkey$
C=Scancode
A=Asc(K$)
CX=X Screen(X Mouse)
CY=Y Screen(Y Mouse)
If M=2 and RENDERING=False and _DIRECT=False
   If CY<12
      _MENUDO=True
   End If 
   If _MENUSUB
      If CY<8 or(CX>_MENUX(_M1SEL-1,0,0)-8 and CX<_MENUX(_M1SEL-1,0,0)+Text Length(_MENU$(_M1SEL,1,0))-40 and CY/8<>_M2SEL)
         _MENUSUB=False
         Gosub CLEARMENU
         Return 
      End If 
      If _MENUSUB
         _OSCILNO=True
         _M3SEL=CY/8-_M2SEL+1
         If _M3SEL>_M3
            _M3SEL=0
         End If 
         Pen _BLACK
         _L2=(_MENUX(M1-1,0,0)/8+Text Length(_MENU$(M1,_M2SEL,0))/8)-4
         For M3=1 To _M3
            If _MENU$(_M1SEL,_M2SEL,M3)<>""
               Locate _L2,_M2SEL+M3-1
               If _M3SEL=M3
                  Paper _PANE
               Else 
                  Paper _SHADOW
               End If 
               Print _MENU$(_M1SEL,_M2SEL,M3)
            Else 
               Exit 
            End If 
         Next M3
      End If 
      If _M3SEL<0 or _M3SEL>_M3
         _M3SEL=0
      End If 
      Return 
   End If 
   If _MENUON and _MENUDO
      If CY<12
         _M1SEL=0
         For M1=_M1 To 1 Step -1
            If CX>=_MENUX(M1-1,0,0) and CX<=_MENUX(M1,0,0)
               _M1SEL=M1
               Exit 
            End If 
         Next M1
      End If 
      If M1>_M1
         M1=0
         Return 
      End If 
      If _PM1SEL<>_M1SEL
         Gosub CLEARMENU
      End If 
      _PM1SEL=_M1SEL
      _M2SEL=CY/8
      If _M2SEL>_M2
         _M2SEL=0
      End If 
      _M3SEL=0
      Pen _BLACK
      _L1=(_MENUX(M1,0,0)/8)-(Text Length(_MENU$(M1,0,0))/8)
      For M2=1 To _M2
         Locate _L1,M2
         If M1>0
            If CX<_MENUX(M1-1,0,0)+Text Length(_MENU$(M1,1,0))
               If _MENU$(M1,M2,0)<>""
                  If _M2SEL=M2 and Mid$(_MENU$(M1,M2,0),0,1)<>"-"
                     Paper _PANE
                     For M3=1 To _M3
                        If _MENU$(M1,M2,M3)<>""
                           _MENUSUB=True
                        End If 
                     Next M3
                  Else 
                     Paper _SHADOW
                  End If 
                  Print _MENU$(M1,M2,0)
               End If 
            End If 
         End If 
      Next M2
   End If 
   If Not _MENUON
      Cls _SHADOW,0,0 To SCR_W,HDR_H
      Paper _SHADOW : Pen _BLACK
      Locate 0,0
      For M1=1 To _M1
         Print _MENU$(M1,0,0);
      Next M1
      _MENUON=True
   End If 
Else If _MENUON
   If _MENUG$(_M1SEL,_M2SEL,_M3SEL)<>""
      _CHOICE=True
      _CHOICES$=_MENU$(_M1SEL,_M2SEL,_M3SEL)
      _CHOICEG$=_MENUG$(_M1SEL,_M2SEL,_M3SEL)
   End If 
   _MENUON=False : _MENUDO=False : _MENUSUB=False
   Gosub CLEARMENU
   Gosub HEADER
End If 
If M=3 and PLYING Then Gosub _STOP
If SCR_R=Lowres Then Screen Offset 0,X Mouse-128,0
If M=1 and CY<HDR_H and _DIRECT
   DCT_Y=Y Mouse+1
   Screen Display 2,128,DCT_Y,320,256
End If 
If _TOAST$<>"" Then Gosub _TOAST
Return 
'
CLEARMENU:
Cls _SHADOW,0,8 To SCR_W,HDR_H
Gosub _SHOWWAVE
Gosub FRESHSEL
Gosub _UPDATEPOS
Return 
'
TASK:
Multi Wait 
Return 
'
'
'
'***************************************************************************** 
'*choice********************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'     .,-::::::  ::   .:     ...      :::    .,-::::::.,:::::: 
'   ,;;;'````'  ,;;   ;;, .;;;;;;;.   ;;;  ,;;;'````' ;;;;'''' 
'   [[[        ,[[[,,,[[[,[[     \[[, [[[  [[[         [[cccc  
'   $$$        "$$$"""$$$$$$,     $$$ $$$, $$$         $$""""  
'   `88bo,__,o, 888   "88"888,_ _,88Po88888`88bo,__,o, 888oo,_ 
'     "YUMMMMMP MMM    YM  "YMMMMMP" MMM"MM  "YUMMMMMP """"YUM 
'
'
'
M0DEMENU:
_M3SEL=_M3SEL-1
If _M3SEL=M0DE Then Return 
If BGREC
   Gosub _TGLBGREC
End If 
Gosub _CLEARPLAYBUFFER
If OSCILLO
   Gosub _TGLOSCILLO
End If 
If _M3SEL=4 and M0DE<>4
   Bank Swap 5,B+7
   PBANK=B+7
   Gosub _RAINSET
Else If M0DE=4 and _M3SEL<>4
   Bank Swap B+7,5
   PBANK=5
   Gosub _RAINRESTORE
   FI=Length(PBANK)
End If 
M0DE=_M3SEL
RENDERING=True
Gosub _RANGENONE
Gosub _DRAW
Gosub SET_PBANK
Gosub SETCORDS
RENDERING=False
Gosub DRWTIME
Gosub _UPDATEPOS
Return 
'
RATEMENU:
BFREQ=Val(_CHOICES$-" ")
FREQ=BFREQ
_AMIHZ=False
Gosub SETHZ
LEVELS#(0)=(((FREQ-501)/13.3)/(256+184))+8.5
Gosub DIALSMAIN
Return 
'
_14BIT:
Volume PAULA(4),1
Volume PAULA(3),1
Return 
'
BCHOOSE:
PASS=0
If Z=0 and Length(5)=0
   Goto FLSHSCR
Else If Z=0
   Return 
Else If Z=58
   Gosub _TGLOSCILLO
   Return 
Else If Z=59
   Gosub _TGLOSCILLOMODE
   Return 
End If 
If Z<=_BU
   PZN=Z
   Gosub PRESSBUT
End If 
If Z=8 and PLYING
   Gosub MUP
   Goto _STOP
Else If Z=11
   Goto _PASTE
Else If M0DE<>4 and Length(5)=0
   Goto FLSHSCR
Else If Z=7
   Pop : Goto _PLAYALL
Else If Z=8
   Pop : Goto _PLAYRANGE
Else If Z=9
   Pop : Goto _PLAYDISPLAY
End If 
On Z-69 Goto LEFTWAND,RIGHTWAND,MOVEWAND,RANGE,SELLEFT,RANGE,SELRIGHT,RANGE
MZ=Z
If MZ<37
   Gosub BUTG$(MZ)
   If(MZ=4 or MZ=5 or MZ=10 or MZ=11 or MZ>12) and RL>1
      If M0DE=2
         _RST=RST
         _RFIN=RFIN
         RST=RST+M_LENGTH5
         RFIN=RFIN+M_LENGTH5
         Gosub BUTG$(MZ)
         RST=_RST
         RFIN=_RFIN
      Else If M0DE=3
         _RST=RST
         _RFIN=RFIN
         For RI=0 To 2
            RST=RST+M_LENGTH5
            RFIN=RFIN+M_LENGTH5
            Gosub BUTG$(MZ)
         Next RI
         RST=RST
         RFIN=_RFIN
      End If 
   End If 
End If 
Return 
'
KCHOOSE:
PASS=0
If Key Shift=%1000000 and C<>11 and C<>12
   If C=16
      Gosub _QUIT
   Else If C=34
      Gosub _DIRECT
   Else If C=24
      Gosub _OPEN
   Else If C=19
      Gosub _REVERT
   Else If C=33
      Gosub _SAVEAS
   Else If C=50
      Gosub _CUT
   Else If C=51
      Gosub _COPY
   Else If C=52
      Gosub _PASTE
   Else If C=95
      Gosub _ABOUT
   End If 
   Return 
End If 
If A=13
   Gosub _TGLLP
Else If A=61
   Gosub _SWAPNEXT
Else If A=45
   Gosub _SWAPPREV
Else If C>79 and C<90
   Gosub _SWAPFKEY
Else If(C=78 or C=47) and Z=74
   Inc XR
   Gosub LKEYREFRSH
Else If(C=79 or C=45) and Z=74
   Dec XR
   Gosub LKEYREFRSH
Else If(C=78 or C=47) and Z=76
   Inc XR2
   Gosub RKEYREFRSH
Else If(C=79 or C=45) and Z=76
   Dec XR2
   Gosub RKEYREFRSH
Else If(C=78 or C=47) and Z>69 and Z<73 and XD2<=SCR_W
   If Z=70 or Z=72
      Inc XD
   End If 
   If Z=71 or Z=72
      Inc XD2
   End If 
   Gosub LRREFRSH
Else If(C=79 or C=45) and Z>69 and Z<73 and XD>0
   If Z=70 or Z=72
      Dec XD
   End If 
   If Z=71 or Z=72
      Dec XD2
   End If 
   Gosub LRREFRSH
End If 
If Key Shift<>%1000000
   If A=27
      Gosub _QUIT
   Else If K$=" "
      Gosub _STOP
   Else 
      PWC2=1
      Repeat 
         If KEYS$(PWC2)=K$
            If Not _LP
               Gosub CLEARPOS
               PWC=1
               If M0DE<>4
                  Gosub _RANGEPXCLEAR
               End If 
               If RL=1
                  STA=RST
               End If 
               OFFSET(1)=STA
               If M0DE=4
                  PWC=1
                  Repeat 
                     OFFSET(PWC)=0
                     Inc PWC
                  Until PWC>4
               End If 
            End If 
            BFREQ=KEYP(PWC2)
            FREQ=BFREQ
            Gosub SETHZ
            LEVELS#(0)=(((FREQ-501)/13.3)/(256+184))+8.5
            Gosub DIALSMAIN
            If Not _LP
               Gosub _GNOMEC
            End If 
            If RL>1
               Pop : Goto _PLAYRANGE
            Else 
               Pop : Goto _PLAYDISPLAY
            End If 
            Exit 
         End If 
         Inc PWC2
      Until PWC2>KX
   End If 
End If 
Return 
'
'
'
'***************************************************************************** 
'*windows********************************************************************* 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'.::    .   .:: :::  ::.    :::.::::::-.      ...     .::    .   .:: .::::::.  
'';;,  ;;  ;;;' ;;;  ;;;;,  `;;;;;,   `';, .;;;;;;;.  ';;,  ;;  ;;;';;;`    `; 
' '[[, [[, [['  [[[   [[[[[. '[[`[[     [[,[[     \[[, '[[, [[, [[' '[==/[[[[, 
'   Y$c$$$c$P   $$$,  $$$ "Y$c$$ $$,    $$$$$,     $$$   Y$c$$$c$P    '''    $ 
'    "88"888   o88888888    Y88  888_,o8P'"888,_ _,88P    "88"888   ,88b    dP 
'     "M "M"   MMM"MMMM     YM  "MMMMP"`    "YMMMMMP"      "M "M"     "YMmMY"  
'
'
'
WIND0W:
Gosub _UPDATEPOS
RENDERING=True
Ink _PANE
Bar WX-5,WY-4 To WX2+5,WY2+4
Ink _DARKBLUE
Box WX-5,WY-4 To WX2+5,WY2+4
Ink _WHITE
Bar WX,WY To WX2,WY2
Ink _SHADOW
Bar WX+1,WY+1 To WX2-1,WY+13
Ink _PANE
Box WX+1,WY+1 To WX2-1,WY2-1
Ink _WHITE,_SHADOW
Text WX+4,WY+10,WTXT$
Return 
'
WIND0WWAITC:
C0L=_WHITE
BTXT1$="Ok" : BX=270 : BY=WY2-17 : BZN=50 : Gosub BUTTONGRAY
Do 
   Gosub GVAL
   Exit If K$=Chr$(27) or A=13
   If Z=50 and M=1
      Gosub PRESS
      Exit 
   End If 
Loop 
Reset Zone 50
WIND0WC:
Gosub _SHOWWAVE
Gosub FRESHSEL
RENDERING=False
Gosub _UPDATEPOS
Return 
'
FREQUEST:
If _AMIVER<3 Then Gosub _STOP
FRQ=False
PF$=F$
WX=100 : WY=21 : WX2=540 : WY2=174 : Gosub WIND0W
Ink _SHADOW
Draw 104,156 To 420,156
Set Zone 40,402,40 To 424,48
Set Zone 41,402,144 To 424,154
Set Zone 43,110,157 To 420,173
C0L=_WHITE
BX=432
BTXT1$="Ok" : BY=40 : BZN=50 : Gosub BUTTONGRAY
BTXT1$="Parent" : BY=54 : BZN=51 : Gosub BUTTONGRAY
BTXT1$="Volumes" : BY=68 : BZN=52 : Gosub BUTTONGRAY
For I=1 To 4
   BY=BY+14 : Inc BZN
   BTXT1$=DEVS$(I) : Gosub BUTTONGRAY
Next I
BTXT1$="Cancel" : BY=159 : BZN=57 : Gosub BUTTONGRAY
Gosub GDR
Gosub DRWDR
CR$=""
Gosub DRWFILE
Repeat 
   Gosub GVAL
   If(C=123 or(K$=Chr$(31)) or(Z=41 and M=1)) and FTOTAL>15
      Inc FPOS
      If C=123
         FPOS=FPOS+4
      End If 
      If FPOS>FTOTAL-16
         FPOS=FTOTAL-16
      End If 
      Gosub DRWDR
      Gosub MUP
   Else If(C=122 or(K$=Chr$(30)) or(Z=40 and M=1)) and FTOTAL>15
      Dec FPOS
      If C=122
         FPOS=FPOS-4
      End If 
      If FPOS<0
         FPOS=0
      End If 
      Gosub DRWDR
      Gosub MUP
   Else If K$<>""
      For FI=0 To FTOTAL
         If Upper$(Mid$(FILES$(FI),2,1))=Upper$(K$)
            If FPOS<>FI-1
               FPOS=FI-1
               If FPOS>FTOTAL-16
                  FPOS=FTOTAL-16
               End If 
               Gosub DRWDR
               Exit 
            End If 
         End If 
      Next FI
   End If 
   If PZN<>Z
      Gosub DRWDR : Rem Filename Rollover Rollout
      PZN=Z
   End If 
   If M=1
      PZN=Z
      If Z=50
         BY=40 : Gosub PRESS : Rem Ok 
         FRQ=True
         Exit 
      Else If Z=2 or Z=3 or Z=4 or Z=8 or Z=9 or Z=10 or Z=43
         COUNT=Len(F$)
         Repeat 
            If A>32 and A<123
               F$=F$+K$
               Inc COUNT
            End If 
            If C=65
               Dec COUNT
               F$=Mid$(F$,0,COUNT)
            End If 
            Ink _BG
            CR$="_"
            Gosub DRWFILE
            Gosub TESTMOVE
         Until A=13 or A=27 or M=1
         If A=27
            Exit 
         End If 
         CR$=""
         Gosub DRWFILE
      Else If Z=42 and FTOTAL>15
         DY=Y Screen(Y Mouse)
         Repeat 
            Gosub TESTMOVE
            FPOS=((DY-50)/SLISIZE#)*14
            DY=CY
            If FPOS<0
               FPOS=0
            End If 
            If FPOS>FTOTAL-16
               FPOS=FTOTAL-16
            End If 
            Gosub DRWDR
         Until M=0
      Else If Z=51
         BY=54 : Gosub PRESS : Rem Parent 
         Parent 
         Gosub GDR
         FPOS=0
         Gosub DRWDR
      Else If Z=52
         BY=68 : Gosub PRESS : Rem Volumes
         Gosub VLUMES
         FPOS=0
         Gosub DRWDR
      Else If Z>52 and Z<57
         BY=68+((Z-52)*14) : Gosub PRESS
         Trap Dir$=DEVS$(Z-52)
         If Errtrap
            Gosub FLSHSCR
         Else 
            Gosub GDR
            FPOS=0
            Gosub DRWDR
         End If 
      Else If Z=57 or Z=5 or Z=11
         BY=159 : Gosub PRESS : Rem Cancel 
         F$=PF$
         FRQ=False
         Exit 
      Else If Z>57 and Z<73
         Gosub CHOFN
      End If 
   End If 
   If K$=Chr$(27)
      F$=PF$
      FRQ=False
      Exit 
   End If 
Until FRQ
Gosub WIND0WC
For I=40 To 74
   Reset Zone I
Next I
Gosub SETZ0NES
Gosub MAGICWAND
Return 
'  
CHOFN:
Paper _WHITE : Pen _GRAY
TVDL$=FILES$(FPOS+Z-57)
For I=Len(TVDL$) To 0 Step -1
   TDC$=Mid$(TVDL$,I,1)
   If TDC$<>" "
      TDFC=I
      Exit 
   End If 
Next I
If TVDL$<>""
   TVDC$=Left$(TVDL$,1)
   If TDFC=0
      TVDF$=Mid$(TVDL$,2,Len(TVDL$))
   Else 
      TVDF$=Mid$(TVDL$,2,TDFC-1)
   End If 
   If TVDC$="*" or TVDC$="!" or TVDC$="?"
      Trap Dir$=TVDF$
      If Errtrap
         T$=WTXT$
         TXT1$="Error Opening Device" : TXT2$="" : Gosub _NOTICE
         WTXT$=T$
         Dir$=PROGDIR$
         Pop : Goto FREQUEST
      Else 
         Gosub MUP
         Gosub GDR
         FPOS=0
         Gosub DRWFILE
         Gosub DRWDR
      End If 
   Else 
      F$=TVDF$
      If T$=F$ : Rem Double Click 
         FRQ=True
      Else 
         T$=F$
         Gosub DRWFILE
      End If 
      Gosub MUP
   End If 
End If 
Return 
'
DRWFILE:
Ink _BLACK,_WHITE
Text 120,167,Space$(37)
FOFF=Len(F$)-37
If FOFF<0 Then FOFF=0
Text 120,167,Mid$(F$,FOFF+1,Len(F$)-FOFF)+CR$
Return 
'  
GDR:
Gosub CLRFILES
Set Dir 100,""
D$=Dir First$("")
Repeat 
   If Left$(D$,1)<>"*"
      FILEL(TCOUNT)=Val(Right$(D$,8))
      If FILEL(TCOUNT)>1000000
         For I=Len(D$)-8 To 0 Step -1
            TDC$=Mid$(D$,I,1)
            If TDC$<>" "
               TDFC=I
               Exit 
            End If 
         Next I
         Trap Open In 1,Mid$(D$,2,TDFC-1)
         If Not Errtrap
            FILEL(TCOUNT)=Lof(1)
            Close 1
         End If 
      End If 
   End If 
   FILES$(TCOUNT)=Left$(D$,31)
   D$=Dir Next$
   Inc TCOUNT
Until FILES$(TCOUNT-1)=""
FTOTAL=TCOUNT
Return 
'  
CLRFILES:
TCOUNT=FPOS
For I=1 To 600
   FILES$(I)=""
   FILEL(I)=0
Next I
Gosub DRWCLR
TCOUNT=1
Return 
'  
VLUMES:
Gosub CLRFILES
D$=Dev First$("d:")-" " : T$="!" : Gosub VTYPE
D$=Dev First$("a:")-" " : T$="?"
VTYPE:
FILES$(TCOUNT)=T$+D$
Repeat 
   Inc TCOUNT
   D$=Dev Next$-" "
   FILES$(TCOUNT)=T$+D$
Until FILES$(TCOUNT)=T$
FTOTAL=TCOUNT
Return 
'
DRWDR:
Pen _BLACK
TCOUNT=FPOS
For I=5 To 18
   Locate 13,I
   Inc TCOUNT
   If Left$(FILES$(TCOUNT),1)="*"
      T$=Zone$("(Dir)"+Mid$(FILES$(TCOUNT),2)+Space$(3),I+53)
   Else If Left$(FILES$(TCOUNT),1)="!"
      T$=Zone$("(Dev)"+Mid$(FILES$(TCOUNT),2)+Space$(34-Len(FILES$(TCOUNT))),I+53)
   Else If Left$(FILES$(TCOUNT),1)="?"
      T$=Zone$(" "+Mid$(FILES$(TCOUNT),2)+Space$(34-Len(FILES$(TCOUNT))),I+53)
   Else 
      If FILEL(TCOUNT)=0
         If Len(FILES$(TCOUNT))>1
            T$=Zone$(FILES$(TCOUNT)+"0B",I+53)
         Else 
            T$=Zone$(Space$(38),I+53)
         End If 
      Else If FILEL(TCOUNT)<1000
         T$=Str$(FILEL(TCOUNT))-" "+"B"
         T$=Zone$(FILES$(TCOUNT)+Space$(7-Len(T$))+T$,I+53)
      Else If FILEL(TCOUNT)<1000000
         T$=Str$(FILEL(TCOUNT)/1000)-" "+"K"
         T$=Zone$(FILES$(TCOUNT)+Space$(7-Len(T$))+T$,I+53)
      Else 
         T$=Str$(FILEL(TCOUNT)/1000000)-" "+"M"
         T$=Zone$(FILES$(TCOUNT)+Space$(7-Len(T$))+T$,I+53)
      End If 
   End If 
   If TCOUNT=(FPOS+Z-57) and Len(FILES$(TCOUNT))>1
      Paper _PANE
   Else 
      Paper _WHITE
   End If 
   Print T$
Next I
If FTOTAL<14
   SLISIZE#=1.0
Else 
   SLISIZE#=FTOTAL/16.0
End If 
SLISIZE#=95.0/SLISIZE#
SLIPOS#=(SLISIZE#*FPOS)/16.0
Ink _BG
Bar 408,48 To 423,143
Ink _GRAY
Bar 410,48+SLIPOS# To 421,48+SLIPOS#+SLISIZE#
Set Zone 42,410,49+SLIPOS# To 421,48+SLIPOS#+SLISIZE#
Paper _WHITE : Pen _BLACK
Locate 51,5 : Print Chr$(147);Chr$(148)
Locate 51,18 : Print Chr$(149);Chr$(150)
Return 
'
DRWCLR:
For I=5 To 18
   Locate 13,I
   Print Space$(38)
Next I
Return 
'
_REQUEST:
RX=200 : RY=59
WTXT$="Request" : WX=RX : WY=RY-14 : WX2=RX+239 : WY2=104 : Gosub WIND0W
Ink _BG,_WHITE
Text RX+120-(Text Length(TXT1$)*128)/256,RY+11,TXT1$
Text RX+120-(Text Length(TXT2$)*128)/256,RY+21,TXT2$
C0L=_WHITE
BX=RX+16 : BY=RY+30 : BZN=48 : Gosub BUTTONGRAY
T$=Lower$(Left$(BTXT1$,1))
BTXT1$="Cancel" : BX=RX+124 : BZN=49 : Gosub BUTTONGRAY
Do 
   Gosub TESTMOVE
   If(M=1 and Z=48) or K$=T$ or A=13
      BX=RX+16 : Gosub PRESS
      REQ=True
      Exit 
   Else If(M=1 and Z=49) or K$="c" or A=27
      BX=RX+124 : Gosub PRESS
      REQ=False
      Exit 
   End If 
Loop 
Gosub WIND0WC
Reset Zone 48 : Reset Zone 49
Return 
'
_NOTICE:
RX=216 : RY=59
WTXT$="Notice" : WX=RX-5 : WY=RY-14 : WX2=429 : WY2=104 : Gosub WIND0W
Ink _BG,_WHITE
Text RX+104-(Text Length(TXT1$)*128)/256,RY+11,TXT1$
Text RX+104-(Text Length(TXT2$)*128)/256,RY+21,TXT2$
Gosub WIND0WWAITC
Return 
'
_NOMATH:
Gosub FLSHSCR
TXT1$="mathtrans.library" : TXT2$="is not available"
Goto _NOTICE
'  
_NOCOPY:
Gosub FLSHSCR
TXT1$="Need something in" : TXT2$="the copy buffer"
Goto _NOTICE
'
_NOUNDO:
Gosub FLSHSCR
TXT1$="Nothing in the" : TXT2$="undo buffer"
Goto _NOTICE
'
_NOMEMORY:
Gosub FLSHSCR
TXT1$="Not enough memory" : TXT2$="to complete"
Goto _NOTICE
'
OVERWRITE:
BTXT1$="Ok" : TXT1$="File exists" : TXT2$="Overwrite?"
Goto _REQUEST
'  
ECHO_WIN:
WX=98 : WY=26 : WX2=536 : WY2=122 : Gosub WIND0W
Ink _PANE,_WHITE
Paper _WHITE
Pen _GRAY
Locate ,6 : Centre " 2nd:"+Str$(Length(PBANK)/2)+" 3rd:"+Str$(Length(PBANK)/3)+" 4th:"+Str$(Length(PBANK)/4)+" 5th:"+Str$(Length(PBANK)/5)
Locate ,7 : Centre " 6th:"+Str$(Length(PBANK)/6)+" 7th:"+Str$(Length(PBANK)/7)+" 8th:"+Str$(Length(PBANK)/7)+" 9th:"+Str$(Length(PBANK)/9)
Locate ,8 : Centre " 12th:"+Str$(Length(PBANK)/12)+" 16th:"+Str$(Length(PBANK)/16)+" 24th:"+Str$(Length(PBANK)/24)+" 32nd:"+Str$(Length(PBANK)/32)
Locate ,9 : Centre " 48th:"+Str$(Length(PBANK)/48)+" 64th:"+Str$(Length(PBANK)/64)+" 96th:"+Str$(Length(PBANK)/96)+" 128th:"+Str$(Length(PBANK)/128)
_EFFN=0
T$=""
Repeat 
   If A>47 and A<58
      T$=T$+K$
      Inc _EFFN
   End If 
   If C=65 and _EFFN>0
      Dec _EFFN
      T$=Mid$(T$,0,_COUNT)
   End If 
   Ink _BG,_WHITE
   Text 226,89,"bytes:"+T$+"_"+" "
   Gosub GVAL
Until A=13 or A=27
_EFFN=Val(T$)
Return 
'  
_OPENFXBIGWIN:
REALTIME=False : Rem COMPRESSOR 
RX=216 : RY=59 : C0L=_WHITE
WTXT$=_CHOICES$ : WX=RX-5 : WY=RY-15 : WX2=RX+212 : WY2=RY+94 : Gosub WIND0W
C0L=_WHITE
BTXT1$="Ok" : BX=RX+2 : BY=RY+79 : BZN=60 : Gosub BUTTON
BTXT1$="Cancel" : BX=RX+108 : BZN=61 : Gosub BUTTON
Return 
'
_OPENFXSMALLWIN:
REALTIME=True
RX=216 : RY=59 : C0L=_GRAY
WTXT$=_CHOICES$ : WX=RX-5 : WY=RY-15 : WX2=RX+207+5 : WY2=RY+25 : Gosub WIND0W
C0L=_WHITE
BTXT1$="Ok" : BX=RX+2 : BY=RY+10 : BZN=60 : Gosub BUTTON
BTXT1$="Cancel" : BX=RX+108 : BZN=61 : Gosub BUTTON
Return 
'
_OPENFXWIN:
REALTIME=True
RX=216 : RY=59 : C0L=_GRAY
WTXT$=_CHOICES$ : WX=RX-5 : WY=RY-15 : WX2=RX+207+5 : WY2=RY+45 : Gosub WIND0W
C0L=_WHITE
BTXT1$="Ok" : BX=RX+2 : BY=RY+30 : BZN=60 : Gosub BUTTON
BTXT1$="Cancel" : BX=RX+108 : BZN=61 : Gosub BUTTON
Return 
'
_CLOSEFXWIN:
Gosub DIALSMAIN
Reset Zone 60
Reset Zone 61
Return 
'
_RUNFXWIN:
Do 
   If Z=60 and M=1
      BX=RX+2 : Gosub PRESS
      REQ=True
      Exit 
   Else If Z=61 and M=1 or A=27
      BX=RX+108 : Gosub PRESS
      REQ=False
      Exit 
   Else If Z=62 and M=1 and FXRUN$<>""
      Gosub FXRUN$
   End If 
   Gosub GVAL
   If M=1
      For _DIAL=0 To 1
         If CX>AREAX(_DIAL)-14 and CX<AREAX2(_DIAL) and CY>AREAY(_DIAL)-9 and CY<AREAY2(_DIAL)
            Gosub DIALSET
            Exit 
         End If 
      Next _DIAL
      If CHAIN$(1)="_RESONANTP"
         For _DIAL=2 To 3
            If CX>AREAX(_DIAL)-14 and CX<AREAX2(_DIAL) and CY>AREAY(_DIAL)-9 and CY<AREAY2(_DIAL)
               Gosub DIALSET
               Exit 
            End If 
         Next _DIAL
      Else If CHAIN$(1)="_COMPRESSORP"
         For _DIAL=4 To AR
            If CX>AREAX(_DIAL)-14 and CX<AREAX2(_DIAL) and CY>AREAY(_DIAL)-9 and CY<AREAY2(_DIAL)
               Gosub DIALSET
               Exit 
            End If 
         Next _DIAL
      End If 
   End If 
Loop 
Gosub MUP
Gosub _CLOSEFXWIN
REALTIME=False
CHAIN$(1)=""
_CHANNEL=1
Return 
'
FXDRW:
Ink _WHITE,_SHADOW
Text RX+151,RY-4,Space$(7)
Text RX+200-(Len(Str$(FXSN))*8),RY-4,Str$(FXSN)-" "+FXS$
Cls _BG,RX,RY+6 To RX+207,RY+20
Cls _GRAY,RX+4+FXN-4,RY+6 To RX+4+FXN+4-1,RY+20
Set Zone 62,RX+4+FXN-4,RY+6 To RX+4+FXN+4-1,RY+20
Return 
'
FXSET:
FXN=X Screen(X Mouse)-224
If FXN=<0
   FXN=0
Else If FXN>199
   FXN=200
End If 
Return 
'  
SETREALTIME:
If REALTIME
   _SHOW=False
Else 
   _SHOW=True
End If 
If MACRO
   _SHOW=False
End If 
Return 
'  
'
'
'***************************************************************************** 
'*buttons********************************************************************* 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
' :::::::.   ...    :::::::::::::::::::::::    ...     ::.    :::. .::::::.  
'  ;;;'';;' ';;     ;;;;;;;;;;''';;;;;;;''' .;;;;;;;.  ;;;;,  `;;;;;;`    `; 
'  [[[__[[\.[['     [[[    [[        [[    ,[[     \[[, [[[[[. '[['[==/[[[[, 
'  $$""""Y$$$$      $$$    $$        $$    $$$,     $$$ $$$ "Y$c$$  '''    $ 
' _88o,,od8P88    .d888    88,       88,   "888,_ _,88P888    Y88 ,88b    dP 
' ""YUMMMP"  "YmmMMMM""    MMM       MMM     "YMMMMMP" MM     YM    "YMmMY"  
'
'
'
ALLBUTTONS:
For BZN=1 To _BU
   BTXT1$=BUTS$(BZN) : BX=BUTX(BZN) : BY=BUTY(BZN)
   Gosub BUTTON
Next BZN
Gosub _LPBUTTON
Return 
'
BUTTONGRAY:
Cls _GRAY,BX-4,BY-2 To BX+BUT_W+1,BY+BUT_H
Goto DRWBUTTON
BUTTON:
Cls _BLACK,BX-3,BY-2 To BX+BUT_W,BY+BUT_H
DRWBUTTON:
Gosub PATSET
Ink C0L+4,_GRAY
Bar BX-2,BY-1 To BX+BUT_W-2,BY+BUT_H-2
Gosub PATRESTORE
Cls C0L,BX,BY To BX+BUT_W-3,BY+BUT_H-2
Ink _BLACK,C0L
Text BX+(98-(Text Length(BTXT1$)))*0.5,BY+BUT_H-5,BTXT1$
Set Zone BZN,BX-2,BY-1 To BX+BUT_W-2,BY+BUT_H-2
Return 
'  
PATSET:
If SCR_D>4 Then Return 
Set Pattern 2
Return 
'  
PATRESTORE:
If SCR_D>4 Then Return 
Set Pattern 0
Return 
'
_TGLLP:
If _LP
   _LP=False
Else 
   _LP=True
End If 
_LPBUTTON:
BZN=6 : BX=BUTX(BZN) : BY=BUTY(BZN)
If Not _LP
   C0L=_PANE
   BTXT1$="Loop Off"
Else 
   C0L=_WHITE
   BTXT1$="Loop On"
End If 
Gosub BUTTON
Return 
'
PRESSBUT:
BX=BUTX(PZN) : BY=BUTY(PZN)
PRESS:
For PRB=0 To 1
   Gosub HIGHLIGHT
   Gosub MUP
Next PRB
Return 
'
HIGHLIGHT:
Screen Copy 0,BX-2,BY-1,BX+BUT_W-1,BY+BUT_H-1 To 0,BX-2,BY-1,%110000
Return 
'  
'
'
'***************************************************************************** 
'*gadgets********************************************************************* 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'    .,-:::::/    :::.     ::::::-.   .,-:::::/  .,:::::::::::::::: .::::::. 
'   ;;-'````'     ;;`;;    ;;,   `';,;;-'````'   ;;;;'''';;;;;;;''';;;`    `;
'   [[   [[[[[[/ ,[[ '[[,  `[[     [[[[   [[[[[[/ [[cccc     [[    '[==/[[[[,
'   $$c.    "$$ c$$$cc$$$c  $$,    $$$$c.    "$$  $$""""     $$      '''    $
'   `Y8bo,,,o88  888   888, 888_,o8P'`Y8bo,,,o88  888oo,_    88,   ,88b    dP
'     `'YMUP"YMM YMM   ""` "MMMMP"`    `'YMUP"YMM """"YUM    MMM     "YMmMY" 
'
'
'
_RAINSET:
If _AMIVER>2
   WVE_D=WVE_H/4
   BBARS=0 : CBARS=0
   Repeat 
      Inc BBARS
      CCOLS=CBARS
      Repeat 
         If B=BBARS
            Rain(0,CCOLS)=Colour(1)+$111
         Else 
            Rain(0,CCOLS)=Colour(1)
         End If 
         Inc CCOLS
      Until CCOLS>CBARS+WVE_D-1
      Add CBARS,WVE_D
   Until CBARS>WVE_D*3
   Rainbow 0,0,56,WVE_H
   C0L=PC0L
End If 
Return 
'  
_RAINRESTORE:
RNG_T=0 : RNG_B=WVE_H
If _AMIVER>2
   CBARS=0
   Repeat 
      Rain(0,CBARS)=Colour(1)
      Inc CBARS
   Until CBARS>WVE_H-1
   Rainbow 0,0,60,WVE_H
End If 
Return 
'
_TOASTWAITER:
If _TOASTWAIT>0
   Inc _TOASTWAIT
   If _TOASTWAIT>5
      Gosub FLSHSCRC
      _TOASTWAIT=0
   End If 
End If 
Return 
'
_TOAST:
If _TOAST$="!"
   _TOASTWAIT=1
   _TOAST$=""
Else 
   _T=Len(_TOAST$)
   Do 
      Exit If _T=0
      If _T>5
         Scroll 5
         _T=_T-5
      Else 
         Scroll _T
         _T=0
      End If 
   Loop 
   If Len(_TOAST$)>15
      _TOAST2$=Right$(_TOAST$,Len(_TOAST$)-15)
      _TOAST$=Left$(_TOAST$,15)
   Else 
      _TOAST2$=""
   End If 
   Ink _SHADOW,_PANE
   Text TST_W-Text Length(_TOAST$),TST_H,_TOAST$
   _TOAST$=_TOAST2$
End If 
Return 
'  
DIALSCOMP:
I=4
DIA_X=228
DIA_Y=HDR_H+52
DIA_W=104
DIA_C=0
Ink _GRAY,_WHITE
Text X+267,Y+77,"Thres.       Slope"
Text X+267,Y+100,"Window       Ahead"
Text X+267,Y+123,"Attack       Re."
Repeat 
   Gosub DIALS
   If I=5 or I=7
      DIA_Y=DIA_Y+23
      DIA_C=DIA_C-2
   End If 
   Inc I : Inc DIA_C
Until I>AR
Return 
'  
DIARES:
I=2
DIA_X=228
DIA_Y=HDR_H+52
DIA_W=104
DIA_C=0
Ink _GRAY,_WHITE
Text X+267,Y+77,"Freq.        Q."
Repeat 
   Gosub DIALS
   Inc I : Inc DIA_C
Until I>3
Return 
'
DIALSMAIN:
I=0
DIA_X=110
DIA_Y=WVE_H+25
DIA_W=33
DIA_C=0
Repeat 
   Gosub DIALS
   Inc I : Inc DIA_C
Until I>1
Return 
'
DIALS:
Paste Bob DIA_X+(DIA_W*DIA_C),DIA_Y,2
AREAX(I)=DIA_X+14+(DIA_W*DIA_C) : AREAY(I)=DIA_Y+8
AREAX2(I)=AREAX(I)+16 : AREAY2(I)=AREAY(I)+10
STRTX=AREAX(I) : STRTY=AREAY(I)
DESTX=STRTX+7.0*Cos(LEVELS#(I)) : DESTY=STRTY+5.0*Sin(LEVELS#(I))
Ink _SHADOW
Draw STRTX,STRTY To DESTX,DESTY
STRTX=STRTX+3.5*Cos(LEVELS#(I)) : STRTY=STRTY+2.5*Sin(LEVELS#(I))
Ink _BLACK
Draw STRTX,STRTY To DESTX,DESTY
Return 
'
DIALSET:
DY=Y Screen(Y Mouse)
CY=DY
Repeat 
   Gosub TESTMOVE
   If Key Shift=1
      _INC#=0.01
   Else 
      _INC#=0.1
   End If 
   If CY<DY
      LEVELS#(_DIAL)=LEVELS#(_DIAL)+(_INC#*(DY-CY))
      If LEVELS#(_DIAL)>13.3
         LEVELS#(_DIAL)=13.3
      End If 
      I=_DIAL
   Else If CY>DY
      LEVELS#(_DIAL)=LEVELS#(_DIAL)-(_INC#*(CY-DY))
      If LEVELS#(_DIAL)<8.5
         LEVELS#(_DIAL)=8.5
      End If 
      I=_DIAL
   End If 
   DY=CY
   If _DIAL=1
      Volume PAULA(7),Int((LEVELS#(_DIAL)-8.5)*13.3)
      Gosub DIALSMAIN
   Else If _DIAL=0
      FREQ=(((LEVELS#(_DIAL)-8.5)*13.3)*(256+184))+501
      Gosub SETHZ
      Gosub DIALSMAIN
   Else If _DIAL=3
      _RQ#=(LEVELS#(_DIAL)-8.5)/4.8
      Gosub RESSET
      Gosub DIARES
   Else If _DIAL=2
      RESN=Int(((LEVELS#(_DIAL)-8.5)/4.8)*200.0)
      Gosub RESSET
      Gosub DIARES
   Else If _DIAL=4
      _THRESHOLDN#=Int(((LEVELS#(_DIAL)-8.5)/4.8)*100.0)
      Gosub COMSET
      Gosub DIALSCOMP
   Else If _DIAL=5
      _SLOPEN#=Int(((LEVELS#(_DIAL)-8.5)/4.8)*100.0)
      Gosub COMSET
      Gosub DIALSCOMP
   Else If _DIAL=6
      _WINDOWN#=Int(((LEVELS#(_DIAL)-8.5)/4.8)*10.0)
      Gosub COMSET
      Gosub DIALSCOMP
   Else If _DIAL=7
      _LOOKAHEADN#=Int(((LEVELS#(_DIAL)-8.5)/4.8)*10.0)
      Gosub COMSET
      Gosub DIALSCOMP
   Else If _DIAL=8
      _ATTACKN#=Int(((LEVELS#(_DIAL)-8.5)/4.8)*10.0)
      Gosub COMSET
      Gosub DIALSCOMP
   Else If _DIAL=9
      _RELEASEN#=Int(((LEVELS#(_DIAL)-8.5)/4.8)*500.0)
      Gosub COMSET
      Gosub DIALSCOMP
   End If 
Until M=0
Return 
'  
_PROBAR:
If REALTIME Then Return 
If FX>FX_START and FX<FXE
   PRO#=FX-FX_START
   If PRO#>0 and FX_LENGTH>0
      PRO=Int((PRO#/FX_LENGTH)*128)
      If PPRO<>PRO
         A=Asc(Inkey$)
         If A=27
            FX=FXE
            Return 
         End If 
         If PRO<=2
            Ink SHADOW
            If SCR_D<8
               Set Pattern 2
            End If 
            Bar 256,72 To 256+126,77
            If SCR_D<8
               Set Pattern 0
            End If 
         Else 
            Cls _GRAY,256,72 To 256+PRO,78
         End If 
      End If 
   End If 
   PPRO=PRO
End If 
Return 
'
_GNOME:
Cls _HIGHLIGHT,GNO_X,GNO_Y To GNO_W,GNO_H
Return 
'
_GNOMEC:
Cls _PANE,GNO_X,GNO_Y To GNO_W,GNO_H
Return 
'
DRW_LEV:
If INFO=False or RENDERING Then Return 

If Length(PBANK)=0 Then Return 
If _MENUDO Then Return 
'If _DIRECT Then Return  
Scroll 7
If M0DE=4
   If PBANK-7>0 and PBANK-7<5
      OSC_START=Start(PBANK)+OFFSET(PBANK-7)
   Else 
      Return 
   End If 
Else 
   OSC_START=Start(PBANK)+OFFSET(1)
End If 
PI=0
If OSCILLO and _AMIVER>4
   Gosub OSC_BCK
   Ink _GREEN
   If M0DE=1 or M0DE=4
      '  
      '********************      
      Repeat 
         OSC_X=PI*2
         OSC_X=Peek(OSC_START+OSC_X)
         If OSC_X>127
            OSC_X=OSC_X-256
         End If 
         Plot PI+(SCR_W/2)-128,(OSC_X/2)+77
         Inc PI
      Until PI>255
   Else 
      '  
      '********************
      Repeat 
         OSC_X=Peek(OSC_START+PI)
         If OSC_X>127
            OSC_X=OSC_X-256
         End If 
         OSC_Y=Peek(OSC_START+M_LENGTH5+PI)
         If OSC_Y>127
            OSC_Y=OSC_Y-255
         End If 
         Gosub DRW_OSC
         Inc PI : Inc PI
      Until PI>BSIZE
   End If 
End If 
PI=0
If _AMIVER>4
   '  
   '********************          
   'RMS LEVEL METER 
   LMC=BSIZE
   On M0DE Goto L1,L2,L3,L1
   L3:
   LMC=LMC*2
   L2:
   LMC=LMC*2
   L1:
   SUMM#=0.0
   Repeat 
      LMN#=Peek(OSC_START+PI)
      If LMN#>127
         LMN#=LMN#-256
      End If 
      LMN#=LMN#/127.0
      SUMM#=SUMM#+(LMN#*LMN#)
      Inc PI
   Until PI>LMC
   LML=-Int(Sqr(SUMM#/LMC)*16.0)
Else 
   '  
   '********************          
   'PEAK LEVEL METER
   LML=0
   Repeat 
      LMN=(Peek(OSC_START+PI)*32)/256
      If LMN>15
         LMN=LMN-32
      Else 
         LMN=-LMN
      End If 
      If LMN<LML
         LML=LMN
      End If 
      PI=PI+10
   Until PI>LMC
End If 
Scroll 7
Ink _HIGHLIGHT
DRWLEV:
Gosub GFXSET
Bar LEV_X,LEV_Y+LML To LEV_W,LEV_Y+1
Gosub GFXRESTORE
Ink _WHITE
Return 
'
OSC_BCK:
C0L=_DARKGREEN
T$="x" : OSC_BZN=58 : OSC_BX=(SCR_W/2)+128+4 : OSC_BY=14 : Gosub OSC_TAB
T$=Str$(OSCMODE)-" " : OSC_BZN=59 : OSC_BY=32 : Gosub OSC_TAB
Ink _DARKGREEN
Bar(SCR_W/2)-128,13 To(SCR_W/2)+128,141
Return 
'
OSC_TAB:
Cls C0L,OSC_BX,OSC_BY To OSC_BX+23,OSC_BY+16
Ink _GRAY,C0L
Text OSC_BX+8,OSC_BY+10,T$
Set Zone OSC_BZN,OSC_BX,OSC_BY To OSC_BX+23,OSC_BY+16
Return 
'
DRW_OSC:
If OSCMODE=1
   Plot OSC_Y+(SCR_W/2),-(OSC_X/2)+77,_GREEN
Else If OSCMODE=2
   Plot OSC_X+(SCR_W/2),-(OSC_Y/2)+77,_GREEN
Else If OSCMODE=3
   Plot -OSC_Y+(SCR_W/2),(OSC_X/2)+77,_GREEN
Else If OSCMODE=4
   Plot -OSC_X+(SCR_W/2),(OSC_Y/2)+77,_GREEN
End If 
Return 
'
_TGLOSCILLO:
If PASS=0
   Gosub MUP
   RENDERING=True
   If OSCILLO
      OSCILLO=False
      Reset Zone 58
      Reset Zone 59
      Gosub _SHOWWAVE
      Gosub FRESHSEL
      Gosub FLIPPOS
   Else 
      Gosub _UPDATEPOS
      OSCILLO=True
      Gosub OSC_BCK
   End If 
   RENDERING=False
End If 
Inc PASS
Return 
'
_TGLOSCILLOMODE:
Gosub MUP
Inc OSCMODE
If OSCMODE>4
   OSCMODE=1
End If 
Gosub OSC_BCK
Return 
'
'
'
'***************************************************************************** 
'*network********************************************************************* 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'   ::.    :::..,::::::::::::::::.::    .   .::    ...     :::::::..  ::::::  .  
'   ;;;;,  `;;;;;;;'''';;;;;;;'''';;,  ;;  ;;;' .;;;;;;;.  ;;;;``;;;; ```;;; .;;,  
'    [[[[[. '[[ [[cccc     [[     '[[, [[, [[' ,[[     \[[,\[[[,/[[['    [[[[[/' 
'    $$$ "Y$c$$ $$""""     $$       Y$c$$$c$P  $$$,     $$$"$$$$$$c     _$$$$, 
'   888    Y88  888oo,_    88,       "88"888   "888,_ _,88P,888b "88bo "888"88o, 
'   MM     YM   """"YUM    MMM        "M "M"     "YMMMMMP" "MMMM   "W" MMM "MMP""  
'
'   BSDSocket.library Procedures originally by Internext Software (John Bintz) 
'
SOCK_OPENCONNECTION:
Dreg(0)=2
Dreg(1)=2
Dreg(2)=0
SOCKET=Lib Call(2,-$1E)
Areg(0)=Varptr(_ADDR$)
HOSTINFO=Lib Call(2,-$D2)
HOSTADDRESS=Leek(Leek(Leek(HOSTINFO+16)))
T$=Chr$(32)+Chr$(2)+String$(Chr$(0),14)
Doke Varptr(T$)+2,Deek(Varptr(_PORT)+2)
Loke Varptr(T$)+4,Leek(Varptr(HOSTADDRESS))
Dreg(0)=SOCKET
Areg(0)=Varptr(T$)
Dreg(1)=Len(T$)
CONNECT=Lib Call(2,-$36)
Gosub SOCK_SETIO
If CONNECT=-1
   Gosub SOCK_CLOSE
   SOCKET=-1
End If 
Return 
'
SOCK_SETIO:
IOC_FIONBIO=($80000000 or(4*65536) or 126 or(Asc("f")*256))
IOC_FIOASYNC=($80000000 or(4*65536) or 125 or(Asc("f")*256))
NBIO=1
Dreg(0)=SOCKET : Dreg(1)=IOC_FIONBIO : Areg(0)=Varptr(NBIO)
NOBLOCK=Lib Call(2,-$72)
NBIO=1
Dreg(0)=SOCKET : Dreg(1)=IOC_FIOASYNC : Areg(0)=Varptr(NBIO)
NOBLOCK=Lib Call(2,-$72)
Return 
'
SOCK_SENDSTRING:
If SOCKET<>-1
   Dreg(0)=SOCKET
   Areg(0)=Varptr(MSG$)
   Dreg(1)=32
   Dreg(2)=0
   NBYTES=Lib Call(2,-$42)
End If 
Return 
'
SOCK_CLOSE:
If SOCKET<>-1
   Dreg(0)=SOCKET
   NBYTES=Lib Call(2,-$78)
End If 
Return 
'
'
'
'***************************************************************************** 
'*init************************************************************************ 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'    :::  ::.    :::. :::  ::::::::::  
'    ;;;  ;;;;,  `;;; ;;;  ;;;;;;;'''  
'    [[[   [[[[[. '[[ [[[      [[      
'    $$$,  $$$ "Y$c$$ $$$,     $$      
'   o88888888    Y88 o88888    88,     
'   MMM"MMMM     YM  MMM"MM    MMM     
'
'
'
_INIT:
Reserve As Chip Work 3,FBSIZE
Reserve As Chip Work 4,FBSIZE
P_STARTB1=Start(3) : P_STARTB2=Start(4)
Trap Lib Open 1,"mathtrans.library",0
If Errtrap
   MATH=False
End If 
Trap Lib Open 2,"dos.library",_DOSVER
If Errtrap
   Dec _DOSVER
End If 
Lib Close 2
If _AMIVER>4
   Trap Lib Open 2,"bsdsocket.library",0
   If Errtrap
      BSD=False
   End If 
Else 
   BSD=False
End If 
If Exist("fxbox.cfg")
   Open In 1,"fxbox.cfg"
   N=Lof(1) : Close 1 : C$=Space$(N)
   Bload "fxbox.cfg",Varptr(C$)
   PX=1 : I=0
   Repeat 
      AX=Instr(C$,Chr$(10),PX)
      If AX : SETTING$(I)=Mid$(C$,PX,AX-PX) : End If 
      PX=AX+1 : Inc I
   Until PX>=N
Else 
   Restore SET
   For I=1 To 6
      Read SETTING$(I)
   Next I
End If 
For I=1 To 4
   DEVS$(I)=SETTING$(I)
Next I
_ADDR$=SETTING$(5)+Chr$(0)
_PORT=Val(SETTING$(6))
CN=Deek(Leek(4)+296)
For I=0 To 3
   If Btst(I,CN) Then _CPU$=Str$(I+1)+"0"
Next I
_CPU$=Right$(_CPU$,2)
If _CPU$="00"
   _AMIVER=1
   SCR_D=4
Else If _CPU$="20"
   _AMIVER=3
   SCR_D=4
Else 
   _AMIVER=5
End If 
_CPU$="680"+_CPU$
If SCR_D=4
   _HIGHLIGHT=_GRAY
   _BLACK=_BG
   _SHADOW=_GRAY
End If 
If SCR_D<=8
   _GREEN=_WHITE
   _DARKGREEN=_BLACK
End If 
If Fast Free>0 Then Inc _AMIVER
If Ntsc
   BUT_H=11 : SCR_H=200
   Gosub _TGLMON
End If 
WVE_H=SCR_H-64-HDR_H
TST_H=WVE_H+31
TST_W=SCR_W-10
RNG_B=WVE_H
WAND_H=WVE_H+14
WAND_H2=WAND_H+9
LEV_X=13 : LEV_W=LEV_X+15
LEV_Y=WVE_H+40
TST_X=SCR_W-158 : TST_W=SCR_W-10
TST_Y=WVE_H+25 : TST_H=WVE_H+31
GNO_X=SCR_W-30 : GNO_W=SCR_W-14
GNO_Y=WVE_H+35 : GNO_H=WVE_H+41
DCT_Y=100
'
'
'
'***************************************************************************** 
'*screen********************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'    .::::::.   .,-:::::::::::::..  .,::::::.,::::::::.    :::.  
'   ;;;`    `;,;;;'````' ;;;;``;;;; ;;;;'''';;;;'''';;;;,  `;;;  
'   '[==/[[[[,[[[        \[[[,/[[['  [[cccc  [[cccc  [[[[[. '[[  
'     '''    $$$$        "$$$$$$c    $$""""  $$""""  $$$ "Y$c$$  
'   ,88b    dP`88bo,__,o,,888b "88bo 888oo,_ 888oo,_888    Y88   
'     "YMmMY"   "YUMMMMMP"MMMM   "W" """"YUM """"YUMMM     YM    
'
'
'
Screen Open 1,SCR_W,WVE_H,SCR_D,SCR_R
Flash Off : Curs Off 
Screen Hide 
Screen Open 0,SCR_W,SCR_H,SCR_D,SCR_R
Flash Off : Curs Off 
Palette $0,$599,$DDD,$566,$111,$377,$FFF,$E70,$F0,$30,$520,$975,$C12,$123,$AEE,$1B,,$DDD,$E11,$111
Limit Mouse 128,44 To 448,300
N=8
For I=1 To 5
   Def Scroll I,TST_X+N,TST_Y To TST_W+1,TST_H+1,-N,0
   N=N+8
Next I
Def Scroll 6,TST_X,TST_Y To TST_W+1,TST_H+1,-1,0
Def Scroll 7,LEV_X,LEV_Y-17 To LEV_W+2,LEV_Y+1,0,1
Reserve Zone 79
Restore AUD
For I=1 To 7
   Read PAULA(I)
Next I
Restore KEY
For I=1 To KX
   Read KEYS$(I),KEYN$(I),KEYP(I)
Next I
Restore BUT
For I=1 To _BU
   Read BUTS$(I),BUTX(I),BUTY(I),BUTG$(I)
   BUTY(I)=SCR_H-BUTY(I)
Next I
If _AMIVER>2
   Set Rainbow 0,1,WVE_H,"","",""
End If 
Auto View On : Amos To Front 
'
'
'
'***************************************************************************** 
'*menu************************************************************************ 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'    .        :  .,::::::::.    :::. ...    :::  
'    ;;,.    ;;; ;;;;'''';;;;,  `;;;';;     ;;;  
'    [[[[, ,[[[[, [[cccc  [[[[[. '[[[['     [[[  
'    $$$$$$$$"$$$ $$""""  $$$ "Y$c$$$$      $$$  
'   888 Y88" 888o 888oo,_888    Y88 88    .d888    
'   MM  M'  "MMMM """"YUMMM     YM   "YmmMMMM""    
'
'
'
_MENU$(1,0,0)="File   "
_MENU$(1,1,0)=" New          " : _MENUG$(1,1,0)="_NEW"
_MENU$(1,2,0)=" Open         " : _MENUG$(1,2,0)="_OPEN"
_MENU$(1,3,0)=" Open As Raw  " : _MENUG$(1,3,0)="_OPENRAW"
_MENU$(1,4,0)=" Revert       " : _MENUG$(1,4,0)="_REVERT"
_MENU$(1,5,0)=" Save As      " : _MENUG$(1,5,0)="_SAVEAS"
_MENU$(1,6,0)=" Save As Bank " : _MENUG$(1,6,0)="_SAVEBANK"
_MENU$(1,7,0)="--------------"
_MENU$(1,8,0)=" Mode    >    "
_MENU$(1,8,1)="    "
_MENU$(1,8,2)=" Mono    " : _MENUG$(1,8,2)="M0DEMENU"
_MENU$(1,8,3)=" Stereo  " : _MENUG$(1,8,3)=_MENUG$(1,8,2)
_MENU$(1,8,4)=" Quad    " : _MENUG$(1,8,4)=_MENUG$(1,8,2)
_MENU$(1,8,5)=" Multi   " : _MENUG$(1,8,5)=_MENUG$(1,8,2)
_MENU$(1,8,6)=" 14bit   " : _MENUG$(1,8,6)="_14BIT"
_MENU$(1,9,0)=" Rate    >    "
_MENU$(1,9,1)="    "
_MENU$(1,9,2)=" 8000   " : _MENUG$(1,9,2)="RATEMENU"
_MENU$(1,9,3)=" 11025  " : _MENUG$(1,9,3)=_MENUG$(1,9,2)
_MENU$(1,9,4)=" 12000  " : _MENUG$(1,9,4)=_MENUG$(1,9,2)
_MENU$(1,9,5)=" 16000  " : _MENUG$(1,9,5)=_MENUG$(1,9,2)
_MENU$(1,9,6)=" 22050  " : _MENUG$(1,9,6)=_MENUG$(1,9,2)
_MENU$(1,9,7)=" 24000  " : _MENUG$(1,9,7)=_MENUG$(1,9,2)
_MENU$(1,9,8)=" 32000  " : _MENUG$(1,9,8)=_MENUG$(1,9,2)
_MENU$(1,9,9)=" 44100  " : _MENUG$(1,9,9)=_MENUG$(1,9,2)
_MENU$(1,9,10)=" 48000  " : _MENUG$(1,9,10)=_MENUG$(1,9,2)
_MENU$(1,9,11)=" 96000  " : _MENUG$(1,9,11)=_MENUG$(1,9,2)
_MENU$(1,10,0)="--------------"
_MENU$(1,11,0)=" Quit         " : _MENUG$(1,11,0)="_QUIT"
_MENU$(2,0,0)="Edit   "
_MENU$(2,1,0)=" Cut           " : _MENUG$(2,1,0)="_CUT"
_MENU$(2,2,0)=" Crop          " : _MENUG$(2,2,0)="_CROP"
_MENU$(2,3,0)=" Copy          " : _MENUG$(2,3,0)="_COPY"
_MENU$(2,4,0)=" Paste         " : _MENUG$(2,4,0)="_PASTE"
_MENU$(2,5,0)=" Mix      >    "
_MENU$(2,5,1)="    "
_MENU$(2,5,2)=" Mix         " : _MENUG$(2,5,2)="_MIXP" : _MENUFX(2,5,2)=True
_MENU$(2,5,3)=" Add         " : _MENUG$(2,5,3)="_ADD" : _MENUFX(2,5,3)=True
_MENU$(2,5,4)=" Subtract    " : _MENUG$(2,5,4)="_SUBTRACT" : _MENUFX(2,5,4)=True
_MENU$(2,5,5)=" Modulate    " : _MENUG$(2,5,5)="_MODULATE" : _MENUFX(2,5,5)=True
_MENU$(2,5,6)=" Interleave  " : _MENUG$(2,5,6)="_INTERLEAVE" : _MENUFX(2,5,6)=True
_MENU$(2,5,7)=" Xor         " : _MENUG$(2,5,7)="_XOR" : _MENUFX(2,5,7)=True
_MENU$(2,6,0)="---------------"
_MENU$(2,7,0)=" Size          " : _MENUG$(2,7,0)="_SIZE"
_MENU$(2,8,0)="---------------"
_MENU$(2,9,0)=" Range All     " : _MENUG$(2,9,0)="_RANGEALL"
_MENU$(2,10,0)=" Range Display " : _MENUG$(2,10,0)="_RANGEDISPLAY"
_MENU$(2,11,0)=" Range None    " : _MENUG$(2,11,0)="_RANGENONE"
_MENU$(2,12,0)="---------------"
_MENU$(2,13,0)=" Clear Copy    " : _MENUG$(2,13,0)="_CLEARCOPY"
_MENU$(2,14,0)=" Swap Buffers  " : _MENUG$(2,14,0)="_COPYSWAP"
_MENU$(2,15,0)="---------------"
_MENU$(2,16,0)=" Undo          " : _MENUG$(2,16,0)="_UNDO"
_MENU$(3,0,0)="Process   "
_MENU$(3,1,0)=" Volume     >    "
_MENU$(3,1,1)="    "
_MENU$(3,1,2)=" Volume     " : _MENUG$(3,1,2)="_VOLUME" : _MENUFX(3,1,2)=True
_MENU$(3,1,3)=" Fade In    " : _MENUG$(3,1,3)="_FADEIN" : _MENUFX(3,1,3)=True
_MENU$(3,1,4)=" Fade Out   " : _MENUG$(3,1,4)="_FADEOUT" : _MENUFX(3,1,4)=True
_MENU$(3,1,5)=" Half       " : _MENUG$(3,1,5)="_HALF" : _MENUFX(3,1,5)=True
_MENU$(3,1,6)=" Double     " : _MENUG$(3,1,6)="_DOUBLE" : _MENUFX(3,1,6)=True
_MENU$(3,1,7)=" Silence    " : _MENUG$(3,1,7)="_SILENCE" : _MENUFX(3,1,7)=True
_MENU$(3,1,8)=" Maximize   " : _MENUG$(3,1,8)="_MAXIMIZE" : _MENUFX(3,1,8)=True
_MENU$(3,1,9)=" Expand     " : _MENUG$(3,1,9)="_EXPAND" : _MENUFX(3,1,9)=True
_MENU$(3,1,10)=" Contract   " : _MENUG$(3,1,10)="_CONTRACT" : _MENUFX(3,1,10)=True
_MENU$(3,1,11)=" DC Offset  " : _MENUG$(3,1,11)="_DCOFFSET" : _MENUFX(3,1,11)=True
_MENU$(3,2,0)=" Resample   >    "
_MENU$(3,2,1)="    "
_MENU$(3,2,2)=" by Rate      " : _MENUG$(3,2,2)="_RESAMPLE" : _MENUFX(3,2,2)=True
_MENU$(3,2,3)=" by Size      " : _MENUG$(3,2,3)="_RESIZE" : _MENUFX(3,2,3)=True
_MENU$(3,2,4)=" by BPM       " : _MENUG$(3,2,4)="_REBPM" : _MENUFX(3,2,4)=True
_MENU$(3,2,5)=" Octave Up    " : _MENUG$(3,2,5)="_OCTAVEUP" : _MENUFX(3,2,5)=True
_MENU$(3,2,6)=" Octave Down  " : _MENUG$(3,2,6)="_OCTAVEDOWN" : _MENUFX(3,2,6)=True
_MENU$(3,2,7)=" Note Up      " : _MENUG$(3,2,7)="_NOTEUP" : _MENUFX(3,2,7)=True
_MENU$(3,2,8)=" Note Down    " : _MENUG$(3,2,8)="_NOTEDOWN" : _MENUFX(3,2,8)=True
_MENU$(3,2,9)=" Fine Up      " : _MENUG$(3,2,9)="_FINEUP" : _MENUFX(3,2,9)=True
_MENU$(3,2,10)=" Fine Down    " : _MENUG$(3,2,10)="_FINEDOWN" : _MENUFX(3,2,10)=True
_MENU$(3,3,0)=" Filter     >    "
_MENU$(3,3,1)="    "
_MENU$(3,3,2)=" High Pass    " : _MENUG$(3,3,2)="_HIGHPASS" : _MENUFX(3,3,2)=True
_MENU$(3,3,3)=" Low Pass     " : _MENUG$(3,3,3)="_LOWPASS" : _MENUFX(3,3,3)=True
_MENU$(3,3,4)=" Resonant     " : _MENUG$(3,3,4)="_RESONANT" : _MENUFX(3,3,4)=True
_MENU$(3,3,5)=" Smooth       " : _MENUG$(3,3,5)="_SMOOTH" : _MENUFX(3,3,5)=True
_MENU$(3,3,6)=" Sharpen      " : _MENUG$(3,3,6)="_SHARP" : _MENUFX(3,3,6)=True
_MENU$(3,3,7)=" Wave Shaper  " : _MENUG$(3,3,7)="_WAVESHAPER" : _MENUFX(3,3,7)=True
_MENU$(3,3,8)=" Bezier       " : _MENUG$(3,3,8)="_BEZIER" : _MENUFX(3,3,8)=True
_MENU$(3,3,9)=" Parabolic    " : _MENUG$(3,3,9)="_PARABOLIC" : _MENUFX(3,3,9)=True
_MENU$(3,4,0)=" Distort    >    "
_MENU$(3,4,1)="    "
_MENU$(3,4,2)=" Alias       " : _MENUG$(3,4,2)="_ALIAS" : _MENUFX(3,4,2)=True
_MENU$(3,4,3)=" Tube        " : _MENUG$(3,4,3)="_TUBE" : _MENUFX(3,4,3)=True
_MENU$(3,4,4)=" Saturation  " : _MENUG$(3,4,4)="_SATURATION" : _MENUFX(3,4,4)=True
_MENU$(3,4,5)=" Fold        " : _MENUG$(3,4,5)="_FOLD" : _MENUFX(3,4,5)=True
_MENU$(3,4,6)=" Overdrive   " : _MENUG$(3,4,6)="_OVERDRIVE" : _MENUFX(3,4,6)=True
_MENU$(3,5,0)=" Effects    >    "
_MENU$(3,5,1)="    "
_MENU$(3,5,2)=" Phase        " : _MENUG$(3,5,2)="_PHASE" : _MENUFX(3,5,2)=True
_MENU$(3,5,3)=" Simple Echo  " : _MENUG$(3,5,3)="_ECHO" : _MENUFX(3,5,3)=True
_MENU$(3,5,4)=" Reverb       " : _MENUG$(3,5,4)="_REVERB" : _MENUFX(3,5,4)=True
_MENU$(3,5,5)=" Tremolo      " : _MENUG$(3,5,5)="_TREMOLO" : _MENUFX(3,5,5)=True
_MENU$(3,5,6)=" Compressor   " : _MENUG$(3,5,6)="_COMPRESSOR" : _MENUFX(3,5,6)=True
_MENU$(3,6,0)=" Bitwise    >    "
_MENU$(3,6,1)="    "
_MENU$(3,6,2)=" Rotate Left        " : _MENUG$(3,6,2)="_ROTATE" : _MENUFX(3,6,2)=True
_MENU$(3,6,3)=" Rotate Right       " : _MENUG$(3,6,3)="_ROTATER" : _MENUFX(3,6,3)=True
_MENU$(3,6,4)=" Shift Left         " : _MENUG$(3,6,4)="_SHIFT" : _MENUFX(3,6,4)=True
_MENU$(3,6,5)=" Shift Right        " : _MENUG$(3,6,5)="_SHIFTR" : _MENUFX(3,6,5)=True
_MENU$(3,6,6)=" Shift Left  16bit  " : _MENUG$(3,6,6)="_SHIFT16BIT" : _MENUFX(3,6,6)=True
_MENU$(3,6,7)=" Shift Right 16bit  " : _MENUG$(3,6,7)="_SHIFTR16BIT" : _MENUFX(3,6,7)=True
_MENU$(3,7,0)=" Convert    >    "
_MENU$(3,7,1)="    "
_MENU$(3,7,2)=" Unsigned 8bit to Signed  " : _MENUG$(3,7,2)="_8BITUNSIGNTO8BIT" : _MENUFX(3,7,2)=True
_MENU$(3,7,3)=" 16bit to 8bit            " : _MENUG$(3,7,3)="_16BITTO8BIT" : _MENUFX(3,7,3)=True
_MENU$(3,7,4)=" 16bit to 8bit Flip       " : _MENUG$(3,7,4)="_16BITTO8BITFLIP" : _MENUFX(3,7,4)=True
_MENU$(3,7,5)=" 32bit Float to 8bit      " : _MENUG$(3,7,5)="_32BITTO8BIT" : _MENUFX(3,7,5)=True
_MENU$(3,7,6)=" 32bit Float to 16bit     " : _MENUG$(3,7,6)="_32BITTO16BIT" : _MENUFX(3,7,6)=True
_MENU$(3,7,7)=" Deinterleave 8bit        " : _MENUG$(3,7,7)="_DEINTERLEAVE" : _MENUFX(3,7,7)=True
_MENU$(3,7,8)=" Deinterleave 16bit       " : _MENUG$(3,7,8)="_DEINTERLEAVE16BIT" : _MENUFX(3,7,8)=True
_MENU$(3,8,0)="-----------------"
_MENU$(3,9,0)=" Reverse         " : _MENUG$(3,9,0)="_REVERSE" : _MENUFX(3,9,0)=True
_MENU$(3,10,0)=" Invert          " : _MENUG$(3,10,0)="_INVERT" : _MENUFX(3,10,0)=True
_MENU$(4,0,0)="Utilities   "
_MENU$(4,1,0)=" Tone Generator   " : _MENUG$(4,1,0)="T0NEG"
_MENU$(4,2,0)=" Noise       >    "
_MENU$(4,2,1)="    "
_MENU$(4,2,2)=" White   " : _MENUG$(4,2,2)="_NOISEWHITE" : _MENUFX(4,2,2)=True
_MENU$(4,2,3)=" Dither  " : _MENUG$(4,2,3)="_NOISEDITHER" : _MENUFX(4,2,3)=True
_MENU$(4,2,4)=" Crypto  " : _MENUG$(4,2,4)="_NOISECRYPTO" : _MENUFX(4,2,4)=True
_MENU$(4,2,5)=" Sin()   " : _MENUG$(4,2,5)="_NOISESIN" : _MENUFX(4,2,5)=True
_MENU$(4,3,0)=" Record Output    " : _MENUG$(4,3,0)="_TGLBGREC"
_MENU$(4,4,0)=" Direct Mode      " : _MENUG$(4,4,0)="_DIRECT"
If _AMIVER>4
   _MENU$(4,5,0)=" Oscilloscope     " : _MENUG$(4,5,0)="_TGLOSCILLO"
End If 
_MENU$(5,0,0)="Memory   "
_MENU$(5,1,0)=" F1 -                 " : _MENUG$(5,1,0)="_SWAPMENU"
_MENU$(5,2,0)=" F2 -                 " : _MENUG$(5,2,0)=_MENUG$(5,1,0)
_MENU$(5,3,0)=" F3 -                 " : _MENUG$(5,3,0)=_MENUG$(5,1,0)
_MENU$(5,4,0)=" F4 -                 " : _MENUG$(5,4,0)=_MENUG$(5,1,0)
_MENU$(5,5,0)=" F5 -                 " : _MENUG$(5,5,0)=_MENUG$(5,1,0)
_MENU$(5,6,0)=" F6 -                 " : _MENUG$(5,6,0)=_MENUG$(5,1,0)
_MENU$(5,7,0)=" F7 -                 " : _MENUG$(5,7,0)=_MENUG$(5,1,0)
_MENU$(5,8,0)=" F8 -                 " : _MENUG$(5,8,0)=_MENUG$(5,1,0)
_MENU$(5,9,0)=" F9 -                 " : _MENUG$(5,9,0)=_MENUG$(5,1,0)
_MENU$(5,10,0)=" F10 -                " : _MENUG$(5,10,0)=_MENUG$(5,1,0)
_MENU$(5,11,0)="----------------------"
_MENU$(5,12,0)=" Previous             " : _MENUG$(5,12,0)="_SWAPPREV"
_MENU$(5,13,0)=" Next                 " : _MENUG$(5,13,0)="_SWAPNEXT"
_MENU$(5,14,0)="----------------------"
_MENU$(5,15,0)=" Erase All            " : _MENUG$(5,15,0)="_CLEARALL"
_MENU$(6,0,0)="Help   "
_MENU$(6,1,0)=" Shortcuts  " : _MENUG$(6,1,0)="_SHORTCUTS"
_MENU$(6,2,0)=" Options    " : _MENUG$(6,2,0)="_OPTIONS"
_MENU$(6,3,0)=" About      " : _MENUG$(6,3,0)="_ABOUT"
Gosub _MACROMENU
For M1=1 To _M1
   _MENUX(M1,0,0)=Text Length(_MENU$(M1,0,0))+_MENUX(M1-1,0,0)
Next M1
If Arexx Exist("REXX")
   If Arexx Exist("OCTAMED_REXX")
      OCTAMED=True
   End If 
   Arexx Open "FXBOX_REXX"
   REXX=True
End If 
If BSD
   Gosub SOCK_OPENCONNECTION
End If 
Gosub _DRAW
Gosub HEADER
Gosub SETZ0NES
Gosub ALLBUTTONS
Gosub MAGICWAND
Gosub SETHZ
Gosub DIALSMAIN
F$=Command Line$
Gosub FILEL0AD
I#=-181 : DD#=0
Repeat 
   Screen Display 0,128,Int(I#),320,256
   Gosub TASK
   I#=I#+DD#
   DD#=DD#+0.75
Until I#>44
Return 
'
'
'
'***************************************************************************** 
'*error*********************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'
'   .,:::::::::::::..  :::::::..      ...     :::::::..
'   ;;;;'''';;;;``;;;; ;;;;``;;;;  .;;;;;;;.  ;;;;``;;;; 
'    [[cccc \[[[,/[[[' \[[[,/[[[' ,[[     \[[,\[[[,/[[[' 
'    $$"""" "$$$$$$c   "$$$$$$c   $$$,     $$$"$$$$$$c 
'    888oo,_,888b "88bo,888b "88bo"888,_ _,88P,888b "88bo
'    """"YUM"MMMM   "W""MMMM   "W"  "YMMMMMP" "MMMM   "W"
'
'
'
Procedure TR4P
   BUT_W=101 : BUT_H=13
   _BG=0 : _PANE=1 : _WHITE=2 : _GRAY=3
   Sam Loop Off 
   PLYING=False
   Every Off 
   If Errn=97
      Resume Next : Rem File name too long   
   Else If Errn=23
      TXT2$="Illegal Function"
   Else If Errn=29
      TXT2$="Overflow"
   Else If Errn=24
      TXT2$="not enough memory"
   Else If Errn=36
      TXT2$="bank not reserved"
   Else If Errn=20
      TXT2$="division by zero"
   Else If Errn=81
      TXT2$="file not found"
   Else If Errn=40
      TXT2$="unknown routine"
   Else If Errn=82
      TXT2$="file name invalid"
   Else If Errn=83
      TXT2$="disk not validated"
   Else If Errn=84
      TXT2$="disk write protected"
   Else If Errn=86
      TXT2$="device not available"
   Else If Errn=88
      TXT2$="disk is full"
   Else If Errn=89
      TXT2$="file delete protected"
   Else If Errn=90
      TXT2$="file write protected"
   Else If Errn=91
      TXT2$="file read protected"
   Else If Errn=92
      TXT2$="not an AmigaDOS Disk"
   Else If Errn=93
      TXT2$="drive is empty"
   Else If Errn=94
      TXT2$="of an I/O error"
   Else 
      TXT2$=Str$(Errn)
   End If 
   RX=216 : RY=59
   TXT1$="Can't do that because"
   WX=RX-5 : WY=RY-15 : WX2=RX+207+5 : WY2=RY+45
   Ink _GRAY
   Bar WX-5,WY-4 To WX2+5,WY2+4
   Ink _BG
   Box WX-5,WY-4 To WX2+5,WY2+4
   Ink _WHITE
   Bar WX,WY To WX2,WY2
   Ink _GRAY
   Bar WX+1,WY+1 To WX2-1,WY+13
   Box WX+1,WY+1 To WX2-1,WY2-1
   Ink _WHITE,_GRAY
   Text WX+4,WY+10,"Error"
   Ink _BG,_WHITE
   Text RX+103-(Text Length(TXT1$)*128)/256,RY+11,TXT1$
   Text RX+103-(Text Length(TXT2$)*128)/256,RY+21,TXT2$
   BX=RX+2+54 : BY=RY+30
   BTXT1$="Ok"
   Cls _BG,BX-3,BY-2 To BX+BUT_W,BY+BUT_H
   Cls _WHITE,BX-2,BY-1 To BX-2+BUT_W,BY+BUT_H-1
   Cls _GRAY,BX,BY To BX+BUT_W-3,BY+BUT_H-2
   Ink _BG,_GRAY
   Text BX+(98-(Text Length(BTXT1$)))*0.5,BY+BUT_H-5,BTXT1$
   Do 
      Exit If Mouse Key=0
      Multi Wait 
   Loop 
   Do 
      Exit If Mouse Key=1
      Multi Wait 
   Loop 
   Do 
      Exit If Mouse Key=0
      Multi Wait 
   Loop 
   Resume Next 
End Proc
'  
MATHTR4P:
'math overflow 
Resume Next 
'
'
'
'***************************************************************************** 
'*data************************************************************************ 
'***************************************************************************** 
'***************************************************************************** 
'***************************************************************************** 
'
'   ::::::-.    :::.     ::::::::::  :::.        
'   ;;,   `';,  ;;`;;    ;;;;;;;'''  ;;`;;       
'   `[[     [[ ,[[ '[[,      [[     ,[[ '[[,     
'    $$,    $$c$$$cc$$$c     $$    c$$$cc$$$c    
'    888_,o8P' 888   888,    88,    888   888,   
'   "MMMMP"`   YMM   ""`     MMM    YMM   ""`    
'
'
'
AUD:
Data %1,%10,%100,%1000,%1001,%110,%1111
'
SET:
Data "DF0:","DH0:","DH1:","RAM:","127.0.0.1","7000"
'
BUT:
Data "Range Disp",8,31,"_RANGEDISPLAY"
Data "Show Range",113,31,"_SHOWRANGE"
Data "Show All",218,31,"_SHOWALL"
Data "Cut",323,31,"_CUT"
Data "Copy",428,31,"_COPY"
Data "Loop Off",533,31,"_TGLLP"
Data "Play All",8,15,"_PLAYALL"
Data "Play Range",113,15,"_PLAYRANGE"
Data "Play Display",218,15,"_PLAYDISPLAY"
Data "Mix",323,15,"_MIX"
Data "Paste",428,15,"_PASTE"
Data "Range None",533,15,"_RANGENONE"
'
KEY:
Data "Z","c-1",4181
Data "S","c#1",4430
Data "X","d-1",4697
Data "D","d#1",4971
Data "C","e-1",5279
Data "V","f-1",5593
Data "G","f#1",5926
Data "B","G-1",6279
Data "H","G#1",6653
Data "N","A-1",7046
Data "J","A#1",7457
Data "M","B-1",7901
Data "Q","c-2",8363
Data '"',"c#2",8860
Data "W","d-2",9395
Data "£","d#2",9943
Data "E","e-2",10559
Data "R","f-2",11186
Data "%","f#2",11852
Data "T","g-2",12559
Data "^","g#2",13306
Data "Y","a-2",14092
Data "&","a#2",14914
Data "U","b-2",15838
'  
Data "z","c-2",8363
Data "s","c#2",8860
Data "x","d-2",9395
Data "d","d#2",9943
Data "c","e-2",10559
Data "v","f-2",11186
Data "g","f#2",11852
Data "b","g-2",12559
Data "h","g#2",13306
Data "n","a-2",14092
Data "j","a#2",14914
Data "m","b-2",15838
Data "q","c-3",16726
Data "2","c#3",17720
Data "w","d-3",18839
Data "3","d#3",19886
Data "e","e-3",21056
Data "r","f-3",22372
Data "5","f#3",23705
Data "t","g-3",25031
Data "6","g#3",26515
Data "y","a-3",28185
'
SHRT:
Data "Function Key F1-F10   Change sample: 1 to 10"
Data "- / +                 Change sample: previous/next"
Data "Left Amiga o r s      Open Revert Save As"
Data "Left Amiga x c v      Cut Copy Paste"
Data "Left Amiga d          Direct mode"
Data "Esc                   Stop working, quit or cancel"
Data "Space                 Stop playing"
Data "Both Mouse Keys       Panic stop audio"
Data "Return                Toggle looping on/off"
Data "Cursor Left/Right &   Fine move magic wand"
Data "Left Shift"
Data "Left Shift            Quantized range select"
Data "Left Shift            Fine move dials"
Data "Left Shift            Fx preview toggle all channels"
Data "Caps Lock             Use low octave for the piano"
'
HLP:
Data "","DOS: Cd, Md, Dir, Del, Cls"
Data 'AREXX: Rx " address <FXBOX_REXX><COMMAND>"'
Data "Macro Subroutines: HELP SUBS"
Data "14bit Conversion Technique: HELP 14BIT"
'
H14:
Data "","Converting to 14bit:"
Data "Open As Raw"
Data "Change mode to Multi"
Data "32bit Float to 16bit (if necessary)"
Data "Deinterleave 16bit"
Data "Deinterleave 8bit"
Data "Quantized range select the half of sample bank 1 with the white noise"
Data "cut and paste into sample bank 4"
Data "Quantized range select the second half of sample bank 1"
Data "cut and paste into sample bank 2"
Data "Quantized range select the second half of sample bank 4"
Data "Cut and paste into sample bank 3"
Data "Bitwise shift right twice sample bank 3 and 4"
Data "Change mode to 14bit"
'
MSG:
Data "                         .."
Data "  oec8888E          . uW8'"
Data " @888888N  uL   ..  `t888             u.     uL   .."
Data " 8`*88%  .@88b  @88R 8888   .   ...ue888b  .@88b  @88R"
Data " 8b.    '`Y888k/`*P  9888.z88N  888R Y888r'`Y888k/`*P"
Data "u8888888>  Y888L     9888  888E 888R I888>   Y888L"
Data " 8888R      8888     9888  888E 888R I888>    8888"
Data " 8888P      `888N    9888  888E 888R I888>    `888N"
Data " *888>   .u./`888&   9888  888Eu8888cJ888  .u./`888&"
Data " 4888   d888' Y888*'.8888  888' `*888*P'  d888' Y888*'"
Data " '888   ` `Y   Y'    `%888*%'     `Y'     ` `Y   Y'"
Data "  88R                   '`"
Data "  88>"
Data "  48"
Data "  '8                 Version 1.11","",""
Data "              © 1991-2025 Marc Williams",""
'
Data "$VER: fxbox 1.11"
'    
_CLIOUT:
Dreg(1)=Doscall(-60)
If Dreg(1)
   Restore MSG
   For I=0 To 18
      Read T$
      T$=T$+Chr$($A)
      Dreg(2)=Varptr(T$) : Dreg(3)=Len(T$)
      R=Doscall(-48)
   Next I
End If 
Return 
